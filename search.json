[{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"nair-network-analysis-of-immune-repertoire","dir":"Articles","previous_headings":"","what":"NAIR: Network Analysis of Immune Repertoire","title":"Introduction to the NAIR package","text":"NAIR R package analyzing adaptive immune repertoire using network analysis based similarities among receptor sequences. implements methods following paper: Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 NAIR allows users perform network analysis Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data, including computing local global network properties nodes clusters, can provide insights structural organization immune repertoire network. NAIR also enables users search across multiple AIRR-Seq samples clones/clusters associated subject characteristics, disease conditions clinical outcomes, well identify public clones/clusters. can help researchers identify potentially important TCR/BCR clones. aid interpretation immune repertoire network, NAIR includes convenient functionality generating customized network visualizations.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"what-data-does-nair-support","dir":"Articles","previous_headings":"NAIR: Network Analysis of Immune Repertoire","what":"What data does NAIR support?","title":"Introduction to the NAIR package","text":"NAIR supports bulk single-cell immune repertoire sequence data T-cell B-cell receptors (TCR BCR). Single-cell data: row single cell Bulk data: row distinct TCR/BCR clone (unique combination V-D-J genes nucleotide sequence) typically includes corresponding measurement clonal abundance (e.g., clone count clone frequency/fraction)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"how-does-nair-model-and-analyze-the-adaptive-immune-receptor-repertoire-as-a-network","dir":"Articles","previous_headings":"NAIR: Network Analysis of Immune Repertoire","what":"How does NAIR model and analyze the adaptive immune receptor repertoire as a network?","title":"Introduction to the NAIR package","text":"cell (single-cell data) clone (bulk data) modeled node (vertex) network node, consider corresponding receptor sequence (nucleotide amino acid) pair nodes, measure similarity receptor sequences (using Hamming Levenshtein distance) single-cell data, sequences two chains (e.g., alpha chain beta chain) can jointly used determine similarity cells, considering cells similar sequences chains similar (.e., distance chain threshold) Many clustering algorithms available, seeking identify “best” configuration clusters according different graph criteria Network statistics characterize repertoire terms local global structural properties graph Customized visual plots network graph generated, nodes colored according desired metadata (e.g., disease status, sample, cluster, clonal abundance, etc.)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"main-function","dir":"Articles","previous_headings":"Getting Started","what":"Main Function","title":"Introduction to the NAIR package","text":"General network analysis AIRR-Seq data performed using buildRepSeqNetwork() convenient alias buildNet(). function following: Filters AIRR-Seq data according user specifications Builds network graph immune repertoire Cluster analysis Network properties Customizable visual plots network graph network graph (igraph adjacency matrix) Metadata network Metadata nodes network Metadata clusters network Plots network graph See vignette(\"buildRepSeqNetwork\") tutorial.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"searching-for-associated-clusters","dir":"Articles","previous_headings":"Getting Started","what":"Searching for Associated Clusters","title":"Introduction to the NAIR package","text":"Given multiple samples bulk AIRR-Seq data, NAIR can used search TCR/BCR clusters associated binary variable interest, disease condition, treatment clinical outcome. See article tutorial.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"searching-for-public-clusters","dir":"Articles","previous_headings":"Getting Started","what":"Searching for Public Clusters","title":"Introduction to the NAIR package","text":"NAIR package includes set functions facilitate searching public TCR/BCR clusters across multiple samples bulk AIRR-seq data. context, public cluster consists similar TCR/BCR clones (e.g., whose CDR3 amino acid sequences differ one amino acid) shared across samples (e.g., across individuals across time points single individual). See article tutorial.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"visualization","dir":"Articles","previous_headings":"Additional Resources","what":"Visualization","title":"Introduction to the NAIR package","text":"article provides introduction creation customization network visualizations using NAIR.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"network-properties-and-cluster-analysis","dir":"Articles","previous_headings":"Additional Resources","what":"Network Properties and Cluster Analysis","title":"Introduction to the NAIR package","text":"vignette(\"node_properties\") provides introduction computing node-level network properties NAIR. vignette(\"cluster_analysis\") explains perform cluster analysis NAIR.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"supplementary-functions","dir":"Articles","previous_headings":"Additional Resources","what":"Supplementary Functions","title":"Introduction to the NAIR package","text":"vignette(\"supplementary\") provides overview NAIR utility functions supplement main function buildNet().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Searching for Associated TCR/BCR Clusters","text":"Given multiple samples bulk Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data, NAIR package can used search TCR/BCR clusters associated binary variable interest, disease condition, treatment clinical outcome.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"overview-of-process","dir":"Articles","previous_headings":"Introduction","what":"Overview of Process","title":"Searching for Associated TCR/BCR Clusters","text":"Identify associated sequences. Divide subjects two groups based two levels binary variable. Identify TCR/BCR sequences exhibit statistically significant difference frequency two groups using Fisher’s exact test. Identify clones sequences similar associated sequences. single associated sequence, sequences fall within certain distance (e.g., differ one amino acid) comprise neighborhood. samples, identify clones whose sequences belong neighborhood. Repeat associated sequence. Construct global network using identified clones. Combine clones step 2 single global network. Use cluster analysis partition global network clusters, considered associated clusters. Perform additional tasks labeling global clusters visual plot analyzing individual clusters interest.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"simulate-data-for-demonstration","dir":"Articles","previous_headings":"Introduction","what":"Simulate Data for Demonstration","title":"Searching for Associated TCR/BCR Clusters","text":"simulate toy data demonstration. binary variable interest, consider single treatment factor two levels, labeled treatment control. two groups, simulate 15 samples, containing 30 observations. generation probabilities possible sequences fixed within group. order simulate treatment effect, generation probabilities certain sequences differ substantially two groups. sample’s data frame saved file using RDS file format. files named “Sample1.rds”, “Sample2.rds”, etc. character string containing directory path assigned R environment variable dir_input_samples later reference. first rows data first sample appear follows:","code":"set.seed(42) library(NAIR) #> Welcome to NAIR: Network Analysis of Immune Repertoire. #> Get started using `vignette(\"NAIR\")`, or by visiting #> https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/ data_dir <- tempdir() dir_input_samples <- file.path(data_dir, \"input_samples\") dir.create(dir_input_samples, showWarnings = FALSE)  # Number of samples by control/treatment group n_control <- n_treatment <- 15  n_samples <- n_control + n_treatment sample_size <- 30 # (seqs per sample)            # sequences (first five are chosen to be associated with treatment) base_seqs <-    c(\"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\",      \"CASSIEGQLSTDTQYF\", # 3 of the associated     \"CASSEEGQLSTDTQYF\", # sequences differ by     \"CASSPEGQLSTDTQYF\", # only one amino acid     \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\"   )   # relative generation probabilities by control/treatment group pgen_c <- matrix(rep(c(rep(1, 5), rep(30, 3)), times = n_control),                   nrow = n_control, byrow = TRUE) pgen_t <- matrix(rep(c(1, 1, rep(1/3, 3), rep(2, 3)), times = n_treatment),                   nrow = n_treatment, byrow = TRUE) pgen <- rbind(pgen_c, pgen_t)  simulateToyData(       samples = n_samples,    sample_size = sample_size,   prefix_length = 1,    prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, n_samples), rep(0, n_samples)),   affixes = base_seqs,    affix_probs = pgen,    num_edits = 0,   output_dir = dir_input_samples,    no_return = TRUE ) #> [1] TRUE # View first few rows of data for sample 1 head(readRDS(file.path(dir_input_samples, \"Sample1.rds\"))) #>        CloneSeq CloneFrequency CloneCount SampleID #> 1 CASDAGVFQPQHF     0.02606559       2832  Sample1 #> 2 CASDAGVFQPQHF     0.03718396       4040  Sample1 #> 3 CASSHRGTDTQYF     0.03182726       3458  Sample1 #> 4 CASDAGVFQPQHF     0.04615781       5015  Sample1 #> 5 RASSLAGNTEAFF     0.06006498       6526  Sample1 #> 6 CASDAGVFQPQHF     0.03363123       3654  Sample1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"step-1-find-associated-sequences","dir":"Articles","previous_headings":"","what":"Step 1: Find Associated Sequences","title":"Searching for Associated TCR/BCR Clusters","text":"First, use findAssociatedSeqs() conduct systematic search associated sequences within provided samples. search two-stage procedure. unique receptor sequences first filtered according basic criteria order narrow list candidates. candidate sequence, perform Fisher’s exact test independence binary variable interest observed presence sequence within sample/subject. Significant associations identified based specified P-value threshold. , explain use findAssociatedSeqs().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"input-data-for-step-1","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Input Data for Step 1","title":"Searching for Associated TCR/BCR Clusters","text":"sample’s AIRR-Seq data must contained separate file, observations indexed row, columns across samples.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"file-paths-of-sample-data","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Input Data for Step 1","what":"File Paths of Sample Data","title":"Searching for Associated TCR/BCR Clusters","text":"file_list parameter accepts character vector containing file paths (list containing file paths connections), element corresponds file containing single sample.","code":"# create vector of input file paths for step 1 (one per sample) input_files <- file.path(dir_input_samples,                          paste0(\"Sample\", 1:n_samples, \".rds\") ) length(input_files) #> [1] 30 input_files[1] #> [1] \"/tmp/RtmpP2574R/input_samples/Sample1.rds\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"file-format-of-sample-data","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Input Data for Step 1","what":"File Format of Sample Data","title":"Searching for Associated TCR/BCR Clusters","text":"file format input files specified input_type parameter. supported values \"rds\", \"rda\", \"csv\", \"csv2\", \"tsv\" \"table\". Depending input type, options specified data_symbols read.args. Refer loadDataFromFileList() details examples.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"sequence-column-in-sample-data","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Input Data for Step 1","what":"Sequence Column in Sample Data","title":"Searching for Associated TCR/BCR Clusters","text":"seq_col parameter specifies column containing TCR/BCR sequences within sample. accepts column name (character string) column position index.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"assigning-samples-to-groups","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Input Data for Step 1","what":"Assigning Samples to Groups","title":"Searching for Associated TCR/BCR Clusters","text":"group_ids parameter assigns sample one two groups, representing two levels binary variable interest. accepts vector length file_list, entry group label corresponding sample. two distinct values may used group labels.","code":"# create vector of group labels for the samples group_labels <- c(rep(\"reference\", n_control), rep(\"comparison\", n_treatment))"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"assigning-samples-to-subjects-if-applicable","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Input Data for Step 1","what":"Assigning Samples to Subjects (If Applicable)","title":"Searching for Associated TCR/BCR Clusters","text":"optional subject_ids parameter assigns sample subject. accepts vector length file_list, entry subject ID corresponding sample. Without subjects, sample independent observational unit. contingency table Fisher’s exact test counts samples possessing given sequence. subjects, samples subject form one observational unit. contingency table counts subjects possessing given sequence. sequence counted per subject, subject counted exactly margin. Subject IDs provided binary variable interest subject-specific data contains multiple samples single subject.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"clone-frequency-column-optional","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Input Data for Step 1","what":"Clone Frequency Column (Optional)","title":"Searching for Associated TCR/BCR Clusters","text":"optional freq_col parameter specifies column containing clone frequencies (normalized measure abundance) within sample. accepts column name (character string) column position index. provided, maximum clone count (across samples) associated sequence included output.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"search-criteria","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Search Criteria","title":"Searching for Associated TCR/BCR Clusters","text":"following parameters control criteria used searching associated sequences. include filter criteria determine sequences considered testing, well P-value cutoff association detected Fisher’s exact test.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"sample-membership","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Search Criteria","what":"Sample Membership","title":"Searching for Associated TCR/BCR Clusters","text":"default, sequences appear least five samples considered. can changed setting min_sample_membership parameter different value. argument value NULL bypasses check.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"sequence-length","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Search Criteria","what":"Sequence Length","title":"Searching for Associated TCR/BCR Clusters","text":"default, sequences length least seven characters considered. can changed setting min_seq_length parameter different value. argument value NULL bypasses check.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"sequence-content","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Search Criteria","what":"Sequence Content","title":"Searching for Associated TCR/BCR Clusters","text":"Sequences containing characters *, | _ excluded consideration. can changed using drop_matches parameter, accepts character string containing regular expression specifies pattern content search . sequence checked pattern match using grep(). match found, sequence excluded. argument value NULL bypasses check.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"p-value-cutoff","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Search Criteria","what":"P-value Cutoff","title":"Searching for Associated TCR/BCR Clusters","text":"default, sequences P-value 0.05 Fisher’s exact test included output findAssociatedSeqs(). cutoff can set different value using pval_cutoff parameter. lower cutoff value, stronger evidence association required sequence included output. noted output includes P-value associated sequence; furthermore, sequences ordered P-value, subset can used step2. Thus necessary rerun findAssociatedSeqs() order impose stricter P-value cutoff. user can instead subset results order use sequences specified P-value.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"output-settings-for-step-1","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Output Settings for Step 1","title":"Searching for Associated TCR/BCR Clusters","text":"findAssociatedSeqs() returns data frame (see demonstration ). data frame can written csv file providing file path outfile parameter.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"demonstration-step-1","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Demonstration, Step 1","title":"Searching for Associated TCR/BCR Clusters","text":"findAssociatedSeqs() returns data frame containing associated sequences based specified search criteria. row corresponds unique receptor sequence. rows ordered \\(P\\)-value. remaining steps, need use ReceptorSeq column. documentation findAssociatedSeqs() describes variables.","code":"associated_seqs <- findAssociatedSeqs(file_list = input_files,                                        input_type = \"rds\",                                        group_ids = group_labels,                                        seq_col = \"CloneSeq\",                                        min_seq_length = NULL,                                        drop_matches = NULL,                                        min_sample_membership = NULL,                                        pval_cutoff = 0.1 ) associated_seqs[, 1:5] #>        ReceptorSeq fisher_pvalue shared_by_n_samples samples_g0 samples_g1 #> 8   CSVDLGKGNNEQFF  1.052106e-05                  18          3         15 #> 7      CASSGAYEQYF  1.157316e-04                  17          3         14 #> 4 CASSEEGQLSTDTQYF  5.197401e-03                  10          1          9 #> 5 CASSIEGQLSTDTQYF  6.559548e-02                  16          5         11"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"step-2-find-associated-clones","dir":"Articles","previous_headings":"","what":"Step 2: Find Associated Clones","title":"Searching for Associated TCR/BCR Clusters","text":"findAssociatedClones() searches across samples identifies clones sequences similar associated sequences identified step 1. associated sequence, define neighborhood collection sequences fall within specified distance (e.g., maximum Hamming distance 1). identify clones (samples) whose sequences belong neighborhood.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"associated-sequences","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Associated Sequences","title":"Searching for Associated TCR/BCR Clusters","text":"assoc_seqs parameter specifies associated sequences. accepts character vector, typically ReceptorSeq column output findAssociatedSeqs(), subset column associated sequences step 1 considered (column ordered P-value facilitate subsetting).","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"argument-values-from-step-1","dir":"Articles","previous_headings":"Step 2: Find Associated Clones > Input Data for Step 2","what":"Argument Values from Step 1","title":"Searching for Associated TCR/BCR Clusters","text":"findAssociatedClones(), specify sample data using parameters findAssociatedSeqs(): file_list input_type seq_col group_ids subject_ids (applicable) user provide argument values used call findAssociatedSeqs() step 1.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"custom-sample-ids-optional","dir":"Articles","previous_headings":"Step 2: Find Associated Clones > Input Data for Step 2","what":"Custom Sample IDs (Optional)","title":"Searching for Associated TCR/BCR Clusters","text":"clone’s sample ID included output. default, \"Sample1\", \"Sample2\", etc., according order file_list. optional sample_ids parameter assigns custom sample IDs. accepts vector length file_list, entry corresponding sample ID.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"filtering-the-sample-data","dir":"Articles","previous_headings":"Step 2: Find Associated Clones > Input Data for Step 2","what":"Filtering the Sample Data","title":"Searching for Associated TCR/BCR Clusters","text":"clones sample filtered remove irrelevant data. default, clones sequences less six characters length, well sequences containing characters *, _ |, excluded. min_seq_length drop_matches parameters control filter settings. Refer details.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"defining-the-neighborhoods","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Defining the Neighborhoods","title":"Searching for Associated TCR/BCR Clusters","text":"neighborhood associated sequence includes sequences sufficiently similar . default, similarity measured using Hamming distance, “sufficiently similar” means Hamming distance 1. Levenshtein distance can used specifying dist_type = \"lev\". described , preferable comparing nucleotide sequences, greater computational cost. maximum distance associated sequence sequences neighborhood specified nbd_radius parameter (default 1). Increasing value increases potential number clones neighborhood. value 0 means neighborhood includes clones exact associated sequence.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"output-settings-for-step-2","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Output Settings for Step 2","title":"Searching for Associated TCR/BCR Clusters","text":"findAssociatedClones() return direct output. Instead, AIRR-Seq data neighborhoods saved files used inputs step 3. following parameters control output settings.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"variables-to-keep-from-sample-data","dir":"Articles","previous_headings":"Step 2: Find Associated Clones > Output Settings for Step 2","what":"Variables to Keep From Sample Data","title":"Searching for Associated TCR/BCR Clusters","text":"default, neighborhood’s AIRR-Seq data includes variables original sample data. variables can used metadata visualizations global network step 3. keep subset original variables, specify variables keep using subset_cols parameter, accepts character vector column names vector column indices. sequence column always included.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"output-directory-for-step-2","dir":"Articles","previous_headings":"Step 2: Find Associated Clones > Output Settings for Step 2","what":"Output Directory for Step 2","title":"Searching for Associated TCR/BCR Clusters","text":"output_dir parameter specifies output directory. accepts character string containing directory path. directory created exist. Using empty directory simplifies task inputting files step 3.","code":"# output directory for current step dir_nbds <- file.path(data_dir, \"assoc_seq_nbds\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"output-file-format-for-step-2","dir":"Articles","previous_headings":"Step 2: Find Associated Clones > Output Settings for Step 2","what":"Output File Format for Step 2","title":"Searching for Associated TCR/BCR Clusters","text":"default, neighborhood’s data frame saved RDS file. can changed using output_type parameter. accepted values \"rda\", \"csv\", \"csv2\", \"tsv\" \"table\". \"rda\", data frames named data R environment. remaining options, write.table() called row.names = TRUE.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"demonstration-step-2","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Demonstration, Step 2","title":"Searching for Associated TCR/BCR Clusters","text":"following files created output directory:  file contains neighborhood data single associated sequence. row names identify sample original row clone. addition variables kept original data, following variables added: SampleID GroupID AssocSeq (associated sequence neighborhood) subject_ids specified, variable SubjectID also present.","code":"# Identify clones in a neighborhood around each associated sequence findAssociatedClones(file_list = input_files,                       input_type = \"rds\",                       group_ids = group_labels,                       seq_col = \"CloneSeq\",                       assoc_seqs = associated_seqs$ReceptorSeq,                      min_seq_length = NULL,                       drop_matches = NULL,                      output_dir = dir_nbds ) # Files created by findAssociatedClones() list.files(dir_nbds) #> [1] \"assoc_nbd_1_CSVDLGKGNNEQFF.rds\"   \"assoc_nbd_2_CASSGAYEQYF.rds\"      #> [3] \"assoc_nbd_3_CASSEEGQLSTDTQYF.rds\" \"assoc_nbd_4_CASSIEGQLSTDTQYF.rds\" # first neighborhood data file one_nbd <- readRDS(list.files(dir_nbds, full.names = TRUE)[[1]])  # first few rows head(one_nbd) #>                   CloneSeq CloneFrequency CloneCount SampleID    GroupID #> Sample5.14  CSVDLGKGNNEQFF     0.02668662       2924  Sample5  reference #> Sample7.17  CSVDLGKGNNEQFF     0.01957279       2113  Sample7  reference #> Sample10.17 CSVDLGKGNNEQFF     0.03594648       4097 Sample10  reference #> Sample16.10 CSVDLGKGNNEQFF     0.03404553       3802 Sample16 comparison #> Sample16.28 CSVDLGKGNNEQFF     0.02736537       3056 Sample16 comparison #> Sample17.3  CSVDLGKGNNEQFF     0.04114818       4603 Sample17 comparison #>                   AssocSeq #> Sample5.14  CSVDLGKGNNEQFF #> Sample7.17  CSVDLGKGNNEQFF #> Sample10.17 CSVDLGKGNNEQFF #> Sample16.10 CSVDLGKGNNEQFF #> Sample16.28 CSVDLGKGNNEQFF #> Sample17.3  CSVDLGKGNNEQFF"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"step-3-global-network-of-associated-clusters","dir":"Articles","previous_headings":"","what":"Step 3: Global Network of Associated Clusters","title":"Searching for Associated TCR/BCR Clusters","text":"buildAssociatedClusterNetwork() combines clones neighborhoods single global network. Cluster analysis used partition global network clusters, considered associated clusters.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"input-data-for-step-3","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Input Data for Step 3","title":"Searching for Associated TCR/BCR Clusters","text":"input files buildAssociatedClusterNetwork() output files step 2. file contains AIRR-Seq data clones belonging particular neighborhood.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"file-paths-of-neighborhood-data","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Input Data for Step 3","what":"File Paths of Neighborhood Data","title":"Searching for Associated TCR/BCR Clusters","text":"previous steps, file_list parameter specifies input files, located output directory step 2. empty output directory used, can easily referenced using list.files().","code":"# Create vector of file paths to files from step 2 nbd_files <- list.files(dir_nbds, full.names = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"file-format-of-neighborhood-data","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Input Data for Step 3","what":"File Format of Neighborhood Data","title":"Searching for Associated TCR/BCR Clusters","text":"findAssociatedClones() called non-default value output_type, value must passed input_type parameter buildAssociatedClusterNetwork().","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"network-construction","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Global Network Analysis","what":"Network Construction","title":"Searching for Associated TCR/BCR Clusters","text":"parameters control construction global network shown along default values. dist_type = \"hamming\" dist_cutoff = 1 drop_isolated_nodes = FALSE Refer meaning usage.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"clustering-algorithm","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Global Network Analysis","what":"Clustering Algorithm","title":"Searching for Associated TCR/BCR Clusters","text":"clustering algorithm used partition global network graph densely-connected subgraphs (clusters). cluster represents distinct group clones associated binary variable interest. default, clustering performed using igraph::cluster_fast_greedy(). different algorithm can specified using cluster_fun parameter, described .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"network-properties","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Global Network Analysis","what":"Network Properties","title":"Searching for Associated TCR/BCR Clusters","text":"default, buildAssociatedClusterNetwork() computes node-level cluster-level properties global network. can excluded setting node_stats = FALSE cluster_stats = FALSE, respectively. set node-level properties computed can specified using stats_to_include parameter, described .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"visualization-of-global-network","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Global Network Analysis","what":"Visualization of Global Network","title":"Searching for Associated TCR/BCR Clusters","text":"default, buildAssociatedClusterNetwork() produces visual plot global network graph nodes colored according binary variable interest. color_nodes_by parameter specifies variable used color nodes. accepts character string naming variable present neighborhood data (e.g., \"SampleID\") computed node-level property (e.g., \"degree\"). color_nodes_by also accepts vector naming multiple variables. One plot created entry, nodes colored according respective variable. name binary variable interest \"GroupID\". Refer learn parameters customizing visualization.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"output-settings-for-step-3","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Output Settings for Step 3","title":"Searching for Associated TCR/BCR Clusters","text":"buildAssociatedClusterNetwork() returns list containing plots, metadata network objects, structure output buildRepSeqNetwork(). output can saved local directory using parameters output_dir, output_type output_name, whose usage described .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"demonstration-step-3","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Demonstration, Step 3","title":"Searching for Associated TCR/BCR Clusters","text":"returned list contains following elements: elements described . inspect node metadata cluster metadata.","code":"# Combine neighborhoods and perform network analysis all_clusters <-    buildAssociatedClusterNetwork(     file_list = nbd_files,      seq_col = \"CloneSeq\",     size_nodes_by = 1.5,     print_plots = TRUE   ) names(all_clusters) #> [1] \"details\"          \"igraph\"           \"adjacency_matrix\" \"node_data\"        #> [5] \"cluster_data\"     \"plots\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"node-metadata-for-global-network","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Demonstration, Step 3","what":"Node Metadata for Global Network","title":"Searching for Associated TCR/BCR Clusters","text":"list element node_data data frame containing metadata network nodes, row represents distinct clone corresponding node global network graph. row names identify sample original row clone. default, variables original sample data present. Node-level network properties also present, described .","code":"head(all_clusters$node_data[, 1:8]) #>                   CloneSeq CloneFrequency CloneCount SampleID    GroupID #> Sample5.14  CSVDLGKGNNEQFF     0.02668662       2924  Sample5  reference #> Sample7.17  CSVDLGKGNNEQFF     0.01957279       2113  Sample7  reference #> Sample10.17 CSVDLGKGNNEQFF     0.03594648       4097 Sample10  reference #> Sample16.10 CSVDLGKGNNEQFF     0.03404553       3802 Sample16 comparison #> Sample16.28 CSVDLGKGNNEQFF     0.02736537       3056 Sample16 comparison #> Sample17.3  CSVDLGKGNNEQFF     0.04114818       4603 Sample17 comparison #>                   AssocSeq degree cluster_id #> Sample5.14  CSVDLGKGNNEQFF     53          3 #> Sample7.17  CSVDLGKGNNEQFF     53          3 #> Sample10.17 CSVDLGKGNNEQFF     53          3 #> Sample16.10 CSVDLGKGNNEQFF     53          3 #> Sample16.28 CSVDLGKGNNEQFF     53          3 #> Sample17.3  CSVDLGKGNNEQFF     53          3 # variables in the node metadata names(all_clusters$node_data) #>  [1] \"CloneSeq\"                  \"CloneFrequency\"            #>  [3] \"CloneCount\"                \"SampleID\"                  #>  [5] \"GroupID\"                   \"AssocSeq\"                  #>  [7] \"degree\"                    \"cluster_id\"                #>  [9] \"transitivity\"              \"eigen_centrality\"          #> [11] \"centrality_by_eigen\"       \"betweenness\"               #> [13] \"centrality_by_betweenness\" \"authority_score\"           #> [15] \"coreness\"                  \"page_rank\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"cluster-metadata-for-global-network","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Demonstration, Step 3","what":"Cluster Metadata for Global Network","title":"Searching for Associated TCR/BCR Clusters","text":"list element cluster_data data frame containing metadata associated clusters, row corresponds cluster global network. contains following variables: cluster properties described .","code":"# variables in the cluster metadata names(all_clusters$cluster_data) #>  [1] \"cluster_id\"                  \"node_count\"                  #>  [3] \"eigen_centrality_eigenvalue\" \"eigen_centrality_index\"      #>  [5] \"closeness_centrality_index\"  \"degree_centrality_index\"     #>  [7] \"edge_density\"                \"global_transitivity\"         #>  [9] \"assortativity\"               \"diameter_length\"             #> [11] \"max_degree\"                  \"mean_degree\"                 #> [13] \"mean_seq_length\"             \"seq_w_max_degree\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"step-4-additional-tasks","dir":"Articles","previous_headings":"","what":"Step 4: Additional Tasks","title":"Searching for Associated TCR/BCR Clusters","text":"calling buildAssociatedClusterNetwork(), following tasks can performed using returned output.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"additional-plots","dir":"Articles","previous_headings":"Step 4: Additional Tasks","what":"Additional Plots","title":"Searching for Associated TCR/BCR Clusters","text":"may wish generate additional plots global network graph, coloring nodes according different metadata gain insight associated clusters. can done using addPlots() described .  cluster right, notice neighborhoods two similar associated sequences grouped single cluster.","code":"# global network plot, nodes colored by associated sequence all_clusters <- addPlots(all_clusters,                          color_nodes_by = \"AssocSeq\",                          color_title = \"Neighborhood Sequence\",                          size_nodes_by = 1.5,                          print_plots = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"labeling-the-global-clusters","dir":"Articles","previous_headings":"Step 4: Additional Tasks","what":"Labeling the Global Clusters","title":"Searching for Associated TCR/BCR Clusters","text":"order easily cross-reference clusters visual plot clusters data, can label clusters ID numbers. accomplished using labelClusters() function described .","code":"all_clusters <- labelClusters(all_clusters, size = 10)  all_clusters$plots[[1]] #> Warning: Removed 172 rows containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"focusing-on-individual-clusters","dir":"Articles","previous_headings":"Step 4: Additional Tasks","what":"Focusing on Individual Clusters","title":"Searching for Associated TCR/BCR Clusters","text":"focus particular cluster, can subset node metadata based value cluster_id use buildNet() produce plots cluster’s graph.","code":"# focus on the second cluster buildNet(   data = all_clusters$node_data[all_clusters$node_data$cluster_id == 2, ],   seq_col = \"CloneSeq\",    color_nodes_by = c(\"CloneSeq\", \"SampleID\"),    color_scheme = c(\"plasma\", \"turbo\"),   size_nodes_by = 3,    plot_title = \"Cluster 2\",   print_plots = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"buildRepSeqNetwork()/buildNet()","text":"General network analysis Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data performed using buildRepSeqNetwork() convenient alias buildNet(). function following: Filters AIRR-Seq data according user specifications Builds network graph immune repertoire Cluster analysis Network properties Customizable visual plots network graph network graph (igraph adjacency matrix) Metadata network Metadata nodes network Metadata clusters network Plots network graph","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"simulate-data-for-demonstration","dir":"Articles","previous_headings":"Introduction","what":"Simulate Data for Demonstration","title":"buildRepSeqNetwork()/buildNet()","text":"simulate toy data demonstration. simulate data consisting two samples 100 observations , total 200 observations (rows).","code":"set.seed(42) library(NAIR) #> Welcome to NAIR: Network Analysis of Immune Repertoire. #> Get started using `vignette(\"NAIR\")`, or by visiting #> https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/ dir_out <- tempdir()  toy_data <- simulateToyData() head(toy_data) #>        CloneSeq CloneFrequency CloneCount SampleID #> 1 TTGAGGAAATTCG    0.007873775       3095  Sample1 #> 2 GGAGATGAATCGG    0.007777102       3057  Sample1 #> 3 GTCGGGTAATTGG    0.009094910       3575  Sample1 #> 4 GCCGGGTAATTCG    0.010160859       3994  Sample1 #> 5 GAAAGAGAATTCG    0.009336593       3670  Sample1 #> 6 AGGTGGGAATTCG    0.010369470       4076  Sample1 nrow(toy_data) #> [1] 200"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"required-arguments","dir":"Articles","previous_headings":"","what":"Required Arguments","title":"buildRepSeqNetwork()/buildNet()","text":"first parameter data accepts data frame containing AIRR-seq data, row corresponds single TCR/BCR clone (bulk data) cell (single-cell data). second parameter seq_col specifies data column containing receptor sequences used basis similarity two cells clones. accepts column name character string column position index.","code":"net <- buildNet(toy_data, \"CloneSeq\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"filtering-the-input-data","dir":"Articles","previous_headings":"","what":"Filtering the Input Data","title":"buildRepSeqNetwork()/buildNet()","text":"following options useful removing noise irrelevant data analysis, potentially improving quality network graph downstream analysis results.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"sequence-length","dir":"Articles","previous_headings":"Filtering the Input Data","what":"Sequence Length","title":"buildRepSeqNetwork()/buildNet()","text":"min_seq_length parameter specifies minimum TCR/BCR sequence length (number characters). Sequences lengths value dropped prior analysis. argument value NULL bypasses filter. filter applies sequence column specified seq_col. default, min_seq_length set 3.","code":"net <- buildNet(toy_data, \"CloneSeq\", min_seq_length = 10)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"sequence-content","dir":"Articles","previous_headings":"Filtering the Input Data","what":"Sequence Content","title":"buildRepSeqNetwork()/buildNet()","text":"optional drop_matches parameter can used remove TCR/BCR sequences matching specified pattern. accepts character string containing regular expression specifying pattern content search . sequence column specified seq_col checked pattern match using grep(). match found, sequence removed prior analysis.","code":"net <- buildNet(toy_data, \"CloneSeq\", drop_matches = \"\\\\W\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"network-settings","dir":"Articles","previous_headings":"","what":"Network Settings","title":"buildRepSeqNetwork()/buildNet()","text":"following settings pertain network construction.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"distance-function","dir":"Articles","previous_headings":"Network Settings","what":"Distance Function","title":"buildRepSeqNetwork()/buildNet()","text":"default method quantifying similarity TCR/BCR sequences Hamming distance, computed using hamDistBounded(). calculates number differences two sequences length. position one sequence, character position checked see whether differs character position sequence. sequences different lengths, shorter sequence extended adding non-matching characters make length longer sequence. Levenshtein distance, computed using levDistBounded(), can used alternative measurement determine similarity sequences. calculates minimum number single-character edits (insertions, deletions transformations) needed transform one sequence . method particularly useful comparing sequences different lengths can account insertions deletions. constructing network based similarity CDR-3 nucleotide sequences, preferable use Levenshtein distance instead default Hamming distance specifying dist_type = \"lev\". However, Levenshtein distance requires significantly computation Hamming distance, may challenging working large data sets long TCR/BCR sequences.","code":"net <- buildNet(toy_data, \"CloneSeq\", dist_type = \"lev\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"distance-cutoff","dir":"Articles","previous_headings":"Network Settings","what":"Distance Cutoff","title":"buildRepSeqNetwork()/buildNet()","text":"function specified dist_type quantifies similarity TCR/BCR sequences nonnegative distance, values closer 0 indicating greater similarity. node network graph corresponds row AIRR-Seq data. default, two nodes connected edge distance TCR/BCR sequences exceed 1. cutoff value specified dist_cutoff parameter, controls stringency network construction affects number density edges network. lower cutoff requires greater sequence similarity form edge connection. dist_cutoff = 0, two sequences must identical order nodes joined edge.","code":"net <- buildNet(toy_data, \"CloneSeq\", dist_cutoff = 0)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"keepremove-isolated-nodes","dir":"Articles","previous_headings":"Network Settings","what":"Keep/Remove Isolated Nodes","title":"buildRepSeqNetwork()/buildNet()","text":"default, nodes joined edge connection least one node kept network. drop_isolated_nodes = FALSE, nodes kept network, including edge connections nodes.","code":"net <- buildNet(toy_data, \"CloneSeq\", drop_isolated_nodes = FALSE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"network-properties-and-cluster-analysis","dir":"Articles","previous_headings":"","what":"Network Properties and Cluster Analysis","title":"buildRepSeqNetwork()/buildNet()","text":"buildRepSeqNetwork() can perform additional analysis constructing network, including cluster analysis (partitioning network graph densely-connected subgraphs) computation network properties (describe structural organization network).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"node-level-network-properties","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis","what":"Node-Level Network Properties","title":"buildRepSeqNetwork()/buildNet()","text":"Node-level network properties pertain individual nodes network graph. local properties, meaning value given node depends subset nodes network. One example network degree given node, represents number nodes directly joined given node edge connection. properties global properties, meaning value given node depends nodes network. example authority score node, computed using entire graph adjacency matrix (denote matrix \\(\\), principal eigenvector \\(^T \\) represents authority scores network nodes). Node-level network properties can computed calling buildRepSeqNetwork() setting node_stats = TRUE, separate step using addNodeStats(). See vignette details computing node-level network properties.","code":"net <- buildNet(toy_data, \"CloneSeq\", node_stats = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"cluster-analysis","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis","what":"Cluster Analysis","title":"buildRepSeqNetwork()/buildNet()","text":"Cluster analysis uses community-finding algorithm partition network graph clusters (densely-connected subgraphs). clusters represent groups clones/cells similar receptor sequences. Cluster analysis can performed calling buildRepSeqNetwork() setting cluster_stats = TRUE separate step using addClusterStats(). cluster membership node recorded variable node metadata. Cluster properties, node count mean sequence length, included data frame within output. See vignette details.","code":"net <- buildNet(toy_data, \"CloneSeq\", cluster_stats = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"buildRepSeqNetwork()/buildNet()","text":"Customized plots can produced calling buildRepSeqNetwork() created afterward using addPlots(). Specify print_plots = TRUE print plots R plotting window.  See article customize visualizations.","code":"net <- buildNet(toy_data, \"CloneSeq\",                 node_stats = TRUE,                 color_nodes_by = c(\"SampleID\", \"transitivity\", \"coreness\"),                 color_scheme = c(\"default\", \"plasma-1\", \"mako-1\"),                 color_title = c(\"\", \"Transitivity\", \"Coreness\"),                 size_nodes_by = \"degree\",                 node_size_limits = c(0.1, 1.5),                 plot_title = NULL,                 plot_subtitle = NULL,                 print_plots = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"buildRepSeqNetwork()/buildNet()","text":"function returns list following elements: describe element .","code":"names(net) #> [1] \"details\"          \"igraph\"           \"adjacency_matrix\" \"node_data\"        #> [5] \"plots\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"network-metadata","dir":"Articles","previous_headings":"Output","what":"Network Metadata","title":"buildRepSeqNetwork()/buildNet()","text":"details records argument values supplied call buildRepSeqNetwork(): nodes_in_network records number nodes network. Additional network information included cluster analysis performed.","code":"net$details #> $seq_col #> [1] \"CloneSeq\" #>  #> $dist_type #> [1] \"hamming\" #>  #> $dist_cutoff #> [1] 1 #>  #> $drop_isolated_nodes #> [1] TRUE #>  #> $nodes_in_network #> [1] 122 #>  #> $min_seq_length #> [1] 3 #>  #> $drop_matches #> [1] \"NULL\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"node-metadata","dir":"Articles","previous_headings":"Output","what":"Node Metadata","title":"buildRepSeqNetwork()/buildNet()","text":"node_data data frame containing metadata network nodes, row corresponds node network graph:  Since buildNet() called drop_isolated_nodes = TRUE, original rows missing. original row names preserved, facilitating cross-referencing original data. default, variables original input data present. include subset original variables, specify keep using subset_cols parameter, accepts character vector column names vector column indices. sequence column always included. Variables node-level network properties also present computed, seen . Variables present node metadata can used encode node colors visualizations.","code":"head(net$node_data) #>         CloneSeq CloneFrequency CloneCount SampleID degree transitivity #> 2  GGAGATGAATCGG    0.007777102       3057  Sample1      1          NaN #> 5  GAAAGAGAATTCG    0.009336593       3670  Sample1      3    0.3333333 #> 8  GGGGAGAAATTGG    0.006220155       2445  Sample1      2    1.0000000 #> 11 GGGGGAGAATTGC    0.012969469       5098  Sample1      4    0.6666667 #> 12 GGGGGGGAATTGC    0.009079646       3569  Sample1     10    0.3555556 #> 13 AGGGGGAAATTGG    0.014941093       5873  Sample1      5    0.1000000 #>    eigen_centrality centrality_by_eigen betweenness centrality_by_betweenness #> 2        0.00000000        0.000000e+00    0.000000                  0.000000 #> 5        0.00000000        1.702099e-17  108.000000                108.000000 #> 8        0.04558649        4.558649e-02    0.000000                  0.000000 #> 11       0.15055366        1.505537e-01    1.549451                  1.549451 #> 12       0.52691798        5.269180e-01   73.970918                 73.970918 #> 13       0.14682343        1.468234e-01   75.439560                 75.439560 #>    authority_score coreness   page_rank #> 2       0.00000000        1 0.008196721 #> 5       0.00000000        2 0.010578507 #> 8       0.04558649        2 0.003936684 #> 11      0.15055366        4 0.005034736 #> 12      0.52691798        6 0.011491588 #> 13      0.14682343        3 0.008703523"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"cluster-metadata","dir":"Articles","previous_headings":"Output","what":"Cluster Metadata","title":"buildRepSeqNetwork()/buildNet()","text":"buildRepSeqNetwork() called cluster_stats = TRUE, returned list contain data frame cluster_data cluster properties node count mean sequence length, seen .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"visual-plots","dir":"Articles","previous_headings":"Output","what":"Visual Plots","title":"buildRepSeqNetwork()/buildNet()","text":"plots list containing plots created well matrix graph_layout storing node layout used plots. plot named according variable used color nodes. plot ggraph (special kind ggplot). Custom plots can created calling buildNet() afterward using addPlots() described .","code":"names(net$plots) #> [1] \"SampleID\"     \"transitivity\" \"coreness\"     \"graph_layout\" class(net$plots$uniform_color) #> [1] \"NULL\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"network-graph-and-adjacency-matrix","dir":"Articles","previous_headings":"Output","what":"Network Graph and Adjacency Matrix","title":"buildRepSeqNetwork()/buildNet()","text":"igraph object class igraph adjacency_matrix dgCMatrix. objects encode nodes edges network graph, using different format. objects used NAIR functions, typically direct importance user.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"output-directory","dir":"Articles","previous_headings":"Saving Output","what":"Output Directory","title":"buildRepSeqNetwork()/buildNet()","text":"buildRepSeqNetwork() writes output files directory path provided output_dir parameter. specified output directory created already exist.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"output-file-format","dir":"Articles","previous_headings":"Saving Output","what":"Output File Format","title":"buildRepSeqNetwork()/buildNet()","text":"default, list returned buildRepSeqNetwork() saved compressed RDS file. file transferred across machines, RData format preferred. can used specifying output_type = \"rda\". list named net R environment. .csv node_data cluster_data (using write.csv(), row.names = FALSE cluster_data) .mtx adjacency_matrix .txt details, igraph plots$graph_layout .rda (RData) plots Regardless output_type, plots printed pdf file containing one plot per page. dimensions (inches) page can adjusted using plot_width plot_height parameters, defaults 12 10, respectively.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"output-file-names","dir":"Articles","previous_headings":"Saving Output","what":"Output File Name(s)","title":"buildRepSeqNetwork()/buildNet()","text":"default, name saved file begins MyRepSeqNetwork. prefix can changed using output_name parameter, accepts character string. output_type \"rds\" \"rda\", two files saved (data file pdf). file, output_name followed appropriate file extension. example, output_name = \"NetworkABC\" output_type = \"rds\", files named NetworkABC.rds NetworkABC.pdf. _Details.txt details _EdgeList.txt igraph _AdjacencyMatrix.mtx adjacency_matrix _NodeMetadata.csv node_data _ClusterMetadata.csv cluster_data (present) _Plots.rda list plots .pdf pdf plots _GraphLayout.txt plots$graph_layout example, output_name = \"NetworkABC\" output_type = \"individual\", node metadata saved NetworkABC_NodeMetadata.csv, pdf saved NetworkABC.pdf, list plots saved NetworkABC_Plots.rds, .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"supplementary-functions","dir":"Articles","previous_headings":"","what":"Supplementary Functions","title":"buildRepSeqNetwork()/buildNet()","text":"NAIR package contains number functions supplementary buildRepSeqNetwork() can used perform additional downstream tasks. See vignette.","code":"library(magrittr) # For pipe operator (%>%) toy_data %>%   filterInputData(\"CloneSeq\", drop_matches = \"\\\\W\") %>%   buildNet(\"CloneSeq\") %>%   addNodeStats(\"all\") %>%   addClusterMembership(\"greedy\", cluster_id_name = \"cluster_greedy\") %>%   addClusterMembership(\"leiden\", cluster_id_name = \"cluster_leiden\") %>%   addClusterStats(\"cluster_leiden\", \"CloneSeq\", \"CloneCount\") %>%   addPlots(color_nodes_by = c(\"cluster_leiden\", \"cluster_greedy\"),             color_scheme = \"Viridis\"   ) %>%   labelClusters(\"cluster_leiden\", cluster_id_col = \"cluster_leiden\") %>%   labelClusters(\"cluster_greedy\", cluster_id_col = \"cluster_greedy\") %>%   saveNetwork(output_dir = tempdir(), output_name = \"my_network\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cluster Analysis","text":"Cluster analysis involves using community-finding algorithm partition network graph clusters (densely-connected subgraphs). clusters represent groups clones/cells similar receptor sequences. Cluster analysis can performed calling buildRepSeqNetwork() setting cluster_stats = TRUE separate step using addClusterStats(). performing cluster analysis, cluster assigned numeric cluster ID, cluster membership node recorded variable node metadata. Properties computed cluster, total node count, mean sequence length, sequence greatest network degree, various centrality indices cluster’s graph. cluster metadata properties included data frame contained list network objects.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"simulate-data-for-demonstration","dir":"Articles","previous_headings":"Introduction","what":"Simulate Data for Demonstration","title":"Cluster Analysis","text":"simulate toy data demonstration. simulate data consisting two samples 100 observations , total 200 observations (rows).","code":"set.seed(42) library(NAIR) #> Welcome to NAIR: Network Analysis of Immune Repertoire. #> Get started using `vignette(\"NAIR\")`, or by visiting #> https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/ dir_out <- tempdir()  toy_data <- simulateToyData() head(toy_data) #>        CloneSeq CloneFrequency CloneCount SampleID #> 1 TTGAGGAAATTCG    0.007873775       3095  Sample1 #> 2 GGAGATGAATCGG    0.007777102       3057  Sample1 #> 3 GTCGGGTAATTGG    0.009094910       3575  Sample1 #> 4 GCCGGGTAATTCG    0.010160859       3994  Sample1 #> 5 GAAAGAGAATTCG    0.009336593       3670  Sample1 #> 6 AGGTGGGAATTCG    0.010369470       4076  Sample1 nrow(toy_data) #> [1] 200"},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"with-buildrepseqnetworkbuildnet","dir":"Articles","previous_headings":"Performing Cluster Analysis","what":"With buildRepSeqNetwork()/buildNet()","title":"Cluster Analysis","text":"Calling buildRepSeqNetwork() alias buildNet() cluster_stats = TRUE one way perform cluster analysis.","code":"net <- buildRepSeqNetwork(toy_data, \"CloneSeq\", cluster_stats = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"with-addclusterstats","dir":"Articles","previous_headings":"Performing Cluster Analysis","what":"With addClusterStats()","title":"Cluster Analysis","text":"addClusterStats() can used output buildRepSeqNetwork() perform cluster analysis.","code":"net <- buildNet(toy_data, \"CloneSeq\")  net <- addClusterStats(net)"},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"cluster-membership","dir":"Articles","previous_headings":"Results","what":"Cluster Membership","title":"Cluster Analysis","text":"using either methods described , node metadata now contains variable cluster_id values cluster membership:","code":"head(net$node_data$cluster_id) #> [1] 20 3  4  2  2  4  #> Levels: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"cluster-properties","dir":"Articles","previous_headings":"Results","what":"Cluster Properties","title":"Cluster Analysis","text":"output list now includes additional data frame cluster_data containing cluster metadata: brief description cluster-level property given : node_count: number nodes cluster. mean_seq_length: mean sequence length cluster. mean_degree: mean network degree cluster. max_degree: maximum network degree cluster. seq_w_max_degree: receptor sequence possessing maximum degree within cluster. agg_count: aggregate count among nodes cluster (based counts count_col, provided). max_count: maximum count among nodes cluster (based counts count_col, provided). seq_w_max_count: receptor sequence possessing maximum count within cluster. diameter_length: longest geodesic distance cluster. assortativity: assortativity coefficient cluster’s graph, based degree (minus one) node cluster (degree computed based upon nodes within cluster). global_transitivity: transitivity (.e., clustering coefficient) cluster’s graph, estimates probability adjacent vertices connected. edge_density: number edges cluster fraction maximum possible number edges. degree_centrality_index: cluster-level centrality index based degree within cluster graph. closeness_centrality_index: cluster-level centrality index based closeness, .e., distance nodes cluster. eigen_centrality_index: cluster-level centrality index based eigenvector centrality scores, .e., values principal eigenvector adjacency matrix cluster. eigen_centrality_eigenvalue: eigenvalue corresponding principal eigenvector adjacency matrix cluster.","code":"names(net) #> [1] \"details\"          \"igraph\"           \"adjacency_matrix\" \"node_data\"        #> [5] \"cluster_data\"     \"plots\" nrow(net$cluster_data) #> [1] 20 names(net$cluster_data) #>  [1] \"cluster_id\"                  \"node_count\"                  #>  [3] \"eigen_centrality_eigenvalue\" \"eigen_centrality_index\"      #>  [5] \"closeness_centrality_index\"  \"degree_centrality_index\"     #>  [7] \"edge_density\"                \"global_transitivity\"         #>  [9] \"assortativity\"               \"diameter_length\"             #> [11] \"max_degree\"                  \"mean_degree\"                 #> [13] \"mean_seq_length\"             \"seq_w_max_degree\" head(net$cluster_data[ , 1:6]) #>   cluster_id node_count eigen_centrality_eigenvalue eigen_centrality_index #> 1          1         14                    3.627940              0.6572455 #> 2          2         28                   11.831606              0.5524239 #> 3          3          9                    2.238772              0.6748055 #> 4          4          6                    2.278414              0.5237142 #> 5          5          6                    2.228328              0.5707806 #> 6          6         25                    5.885769              0.6291788 #>   closeness_centrality_index degree_centrality_index #> 1                  0.5584465               0.3076923 #> 2                  0.4703335               0.3333333 #> 3                  0.2311674               0.1250000 #> 4                  0.4266234               0.2000000 #> 5                  0.3301948               0.2000000 #> 6                  0.4012791               0.1983333"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"abundance-based-properties","dir":"Articles","previous_headings":"","what":"Abundance-Based Properties","title":"Cluster Analysis","text":"cluster-level network properties, agg_count max_count, computed user specifies column input data containing measure abundance row (e.g., clone count bulk data Unique Molecular Identifier count single-cell data). column specified using count_col function, accepts column name column index. : case data includes one count variable, net$details$count_col_for_cluster_data specifies variables corresponds count-based cluster properties:","code":"net <- buildNet(toy_data, \"CloneSeq\",                  cluster_stats = TRUE,                  count_col = \"CloneCount\" ) net <- buildNet(toy_data, \"CloneSeq\") net <- addClusterStats(net, count_col = \"CloneCount\") net$details$count_col_for_cluster_data #> [1] \"CloneCount\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"clustering-algorithm","dir":"Articles","previous_headings":"","what":"Clustering Algorithm","title":"Cluster Analysis","text":"default, clustering performed using igraph::cluster_fast_greedy(). clustering algorithms can used instead default algorithm. buildRepSeqNetwork() addClusterStats(), algorithm specified using cluster_fun parameter, accepts one following values: \"fast_greedy\" (default) \"edge_betweenness\" \"infomap\" \"label_prop\" \"leading_eigen\" \"leiden\" \"louvain\" \"optimal\" \"spinglass\" \"walktrap\" details clustering algorithms, see ?addClusterMembership(). possible using addClusterStats() specify non-default argument values optional parameters clustering functions.","code":"net <- buildRepSeqNetwork(toy_data, \"CloneSeq\",                            cluster_stats = TRUE,                            cluster_fun = \"leiden\" ) net <- buildRepSeqNetwork(toy_data, \"CloneSeq\") net <- addClusterStats(net,                         cluster_fun = \"leiden\",                        beta = 0.02,                        n_iterations = 3 )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"cluster-membership-only","dir":"Articles","previous_headings":"","what":"Cluster Membership Only","title":"Cluster Analysis","text":"addClusterMembership() similar addClusterStats(), adds cluster membership values node metadata. compute cluster properties.","code":"net <- buildRepSeqNetwork(toy_data, \"CloneSeq\") net <- addClusterMembership(net,                              cluster_fun = \"leiden\",                             beta = 0.02,                             n_iterations = 3 )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"multiple-instances-of-clustering","dir":"Articles","previous_headings":"","what":"Multiple Instances of Clustering","title":"Cluster Analysis","text":"Using addClusterMembership() addClusterStats(), possible perform cluster analysis different clustering algorithms record cluster membership instance clustering. performing cluster analysis, cluster_id_name parameter specifies name cluster membership variable added node metadata. allows cluster membership values instance clustering saved different variable name.  Currently, keeping cluster properties multiple instances clustering analysis supported. addClusterStats() can overwrite existing cluster properties using overwrite = TRUE. details element network list helps keeping track clustering results cross-referencing cluster properties node properties. net$details$cluster_id_variable tells cluster membership variable corresponds clustering algorithm. net$details$cluster_data_goes_with tells cluster membership variable corresponds cluster metadata.","code":"# First instance of clustering net <- buildRepSeqNetwork(toy_data, \"CloneSeq\",                            print_plots = FALSE,                            cluster_stats = TRUE,                            cluster_id_name = \"cluster_greedy\" )  # Second instance of clustering net <- addClusterMembership(net,                             cluster_fun = \"louvain\",                             cluster_id_name = \"cluster_louvain\" ) net <- addPlots(net,                 color_nodes_by = c(\"cluster_greedy\", \"cluster_louvain\"),                 color_scheme = \"Viridis\",                 size_nodes_by = 1.5,                 print_plots = TRUE ) net$details #> $seq_col #> [1] \"CloneSeq\" #>  #> $dist_type #> [1] \"hamming\" #>  #> $dist_cutoff #> [1] 1 #>  #> $drop_isolated_nodes #> [1] TRUE #>  #> $nodes_in_network #> [1] 122 #>  #> $clusters_in_network #> fast_greedy     louvain  #>          20          20  #>  #> $cluster_id_variable #>       fast_greedy           louvain  #>  \"cluster_greedy\" \"cluster_louvain\"  #>  #> $cluster_data_goes_with #> [1] \"cluster_greedy\" #>  #> $count_col_for_cluster_data #> [1] NA #>  #> $min_seq_length #> [1] 3 #>  #> $drop_matches #> [1] \"NULL\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/cluster_analysis.html","id":"labeling-clusters","dir":"Articles","previous_headings":"","what":"Labeling Clusters","title":"Cluster Analysis","text":"easily reference clusters within visual plot, clusters can labeled cluster IDs using labelClusters(). list network objects returned buildRepSeqNetwork() passed net parameter. default, plots contained list net$plots annotated, subset plots may specified vector element names positions plots parameter. name cluster membership variable node metadata provided cluster_id_col parameter (default \"cluster_id\"). default, 20 largest clusters node count labeled order preserve legibility. number can changed using top_n_clusters parameter. Instead ranking clusters node count, different criterion can used, provided list net contains cluster properties corresponding cluster membership variable. name numeric cluster property provided criterion parameter. ranking order can reversed using greatest_values = FALSE. size cluster ID labels can adjusted providing numeric value size parameter (default 5), color can changed providing valid character string color parameter.","code":"# First instance of clustering net <- buildNet(toy_data, \"CloneSeq\",                  print_plots = FALSE,                  cluster_stats = TRUE,                  cluster_id_name = \"cluster_greedy\",                 color_nodes_by = \"cluster_greedy\",                 color_scheme = \"Viridis\",                 size_nodes_by = 1.5,                 plot_title = NULL ) # Second instance of clustering net <- addClusterMembership(net,                             cluster_fun = \"louvain\",                             cluster_id_name = \"cluster_louvain\" ) net <- addPlots(net,                 color_nodes_by = \"cluster_louvain\",                 color_scheme = \"Viridis\",                 size_nodes_by = 1.5,                 print_plots = FALSE ) # Label the clusters in each plot net <- labelClusters(net,                      plots = \"cluster_greedy\",                      cluster_id_col = \"cluster_greedy\",                      top_n_clusters = 7,                      size = 7 ) net <- labelClusters(net,                      plots = \"cluster_louvain\",                      cluster_id_col = \"cluster_louvain\",                      top_n_clusters = 7,                      size = 7 )  net$plots$cluster_greedy #> Warning: Removed 115 rows containing missing values or values outside the scale range #> (`geom_text()`). net$plots$cluster_louvain #> Warning: Removed 115 rows containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Network Visualization","text":"Customized visual plots network graph can produced calling buildRepSeqNetwork() afterward using using addPlots().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"simulate-data-for-demonstration","dir":"Articles","previous_headings":"Introduction","what":"Simulate Data for Demonstration","title":"Network Visualization","text":"","code":"set.seed(42) library(NAIR) #> Welcome to NAIR: Network Analysis of Immune Repertoire. #> Get started using `vignette(\"NAIR\")`, or by visiting #> https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/ toy_data <- simulateToyData()"},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"with-buildrepseqnetworkbuildnet","dir":"Articles","previous_headings":"Producing Plots","what":"With buildRepSeqNetwork()/buildNet()","title":"Network Visualization","text":"buildRepSeqNetwork() automatically generates plot network graph default:","code":"net <- buildNet(toy_data, \"CloneSeq\") net$plots$uniform_color"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"with-addplots","dir":"Articles","previous_headings":"Producing Plots","what":"With addPlots()","title":"Network Visualization","text":"addPlots() can used list returned buildRepSeqNetwork() generate additional plots network graph.","code":"net <- addPlots(net, color_nodes_by = \"SampleID\") net$plots$SampleID"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"reproducibility-of-graph-layout","dir":"Articles","previous_headings":"Producing Plots","what":"Reproducibility of Graph Layout","title":"Network Visualization","text":"creating initial plot network, coordinate layout nodes generated pseudo-randomly. plots created call buildRepSeqNetwork() subsequent calls addPlots() use graph layout initial plot (compare previous two plots). Different calls buildRepSeqNetwork(), however, can produce plots network different layouts (compare previous plot next plot). reason, recommended use set.seed() calling buildRepSeqNetwork(). allows graph layout reproduced across multiple executions code initial plots generated.","code":"set.seed(42) net <- buildNet(toy_data, \"CloneSeq\")"},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"color-nodes-according-to-metadata","dir":"Articles","previous_headings":"Node Colors","what":"Color Nodes According to Metadata","title":"Network Visualization","text":"nodes graph can colored according available metadata. color_nodes_by parameter accepts character string naming variable use. can variable present node metadata.","code":"buildNet(toy_data, \"CloneSeq\",           color_nodes_by = \"CloneCount\",          print_plots = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"node-color-scale","dir":"Articles","previous_headings":"Node Colors","what":"Node Color Scale","title":"Network Visualization","text":"color_scheme parameter accepts character string naming preset color scale use coloring nodes. accepts following values: \"default\" default ggplot2 colors One following color scales viridis package: \"magma\" (\"\") \"inferno\" (\"B\") \"plasma\" (\"C\") \"viridis\" (\"D\") \"cividis\" (\"E\") \"rocket\" (\"F\") \"mako\" (\"G\") \"turbo\" (\"H\") viridis color scales \"-1\" appended (e.g., \"mako-1\"), reverses direction color scale variable discrete, color palette grDevices::hcl.pals() (e.g., \"RdBu\")","code":"net <- buildNet(toy_data, \"CloneSeq\",                  node_stats = TRUE,                 color_nodes_by = \"transitivity\",                  color_scheme = \"plasma-1\",                 print_plots = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"custom-color-scales","dir":"Articles","previous_headings":"Node Colors","what":"Custom Color Scales","title":"Network Visualization","text":"color scales available color_scheme parameter limited selection preset color scales. customized color scale can applied plot created. variable used color nodes continuous, custom two-color gradient can applied using ggplot2::scale_color_gradient().  Similarly, ggplot2::scale_color_gradient2() can used apply three-color diverging gradient. variable used color nodes discrete, custom color palette can applied using ggplot2::scale_color_manual() function, allows user specify color used value. parameter values accepts vector colors whose length matches number unique values.","code":"net$plots$transitivity <- net$plots$transitivity +   ggplot2::scale_color_gradient(low = \"pink\", high = \"purple4\") #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  net$plots$transitivity # Sample ID is a discrete variable net <- addPlots(net, color_nodes_by = \"SampleID\")  net$plots$SampleID <- net$plots$SampleID +    ggplot2::scale_color_manual(values = c(\"deepskyblue\", \"red2\"))  net$plots$SampleID"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"node-size","dir":"Articles","previous_headings":"","what":"Node Size","title":"Network Visualization","text":"default, nodes drawn using uniform size value 0.5. value suitable large networks many nodes. node size can specified providing positive value size_nodes_by parameter.","code":"net <- addPlots(net,                 color_nodes_by = \"transitivity\",                  color_scheme = \"plasma-1\",                 size_nodes_by = 1.5,                 print_plots = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"size-nodes-according-to-metadata","dir":"Articles","previous_headings":"Node Size","what":"Size Nodes According to Metadata","title":"Network Visualization","text":"nodes can sized dynamically according variable node metadata. size_nodes_by parameter accepts character string naming variable. node size scale can adjusted using node_size_limits parameter, accepts numeric vector length two specifying minimum maximum node size.","code":"net <- addPlots(net,                 color_nodes_by = \"transitivity\",                  color_scheme = \"plasma-1\",                 size_nodes_by = \"degree\",                  node_size_limits = c(0.1, 2.5),                 print_plots = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"text-elements","dir":"Articles","previous_headings":"","what":"Text Elements","title":"Network Visualization","text":"section covers parameters control text elements plot, titles, annotations legends.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"title-and-subtitle","dir":"Articles","previous_headings":"Text Elements","what":"Title and Subtitle","title":"Network Visualization","text":"default title plots created buildRepSeqNetwork() argument value output_name parameter (\"MyRepSeqNetwork\" default). Plots created addPlots() default title. buildRepSeqNetwork() addPlots(), default subtitle includes information network’s construction, values dist_type dist_cutoff. custom plot title subtitle can provided character strings plot_title plot_subtitle parameters. argument value NULL omits corresponding element plot.","code":"net <- addPlots(   net,   plot_title = \"Immune Repertoire Network by TCR Sequence Similarity\",   plot_subtitle = NULL )"},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"hiding-legends","dir":"Articles","previous_headings":"Text Elements > Legends","what":"Hiding Legends","title":"Network Visualization","text":"default, nodes colored sized dynamically according variable, legend included plot showing color scale /size scale. color scale legend can hidden using color_legend = FALSE. Similarly, size_legend = FALSE hides size scale legend. Note: variable used color nodes discrete 20 distinct values, color scale automatically excluded legend prevent crowding plot. name node color variable appended plot’s subtitle. force color legend shown, use color_legend = TRUE.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"legend-titles","dir":"Articles","previous_headings":"Text Elements > Legends","what":"Legend Titles","title":"Network Visualization","text":"default titles color size scales names variables used color size nodes. Custom titles can provided character strings color_title size_title parameters. argument value NULL \"\" omits title. vector provided color_nodes_by parameter order generate multiple plots, color_title accepts character vector matching length, entry title color legend corresponding plot.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"labeling-clusters","dir":"Articles","previous_headings":"Text Elements","what":"Labeling Clusters","title":"Network Visualization","text":"performing cluster analysis, can helpful label clusters plot cluster IDs reference, shown .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"labeling-nodes","dir":"Articles","previous_headings":"Text Elements","what":"Labeling Nodes","title":"Network Visualization","text":"addGraphLabels() can used label individual nodes.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"generating-multiple-plots","dir":"Articles","previous_headings":"","what":"Generating Multiple Plots","title":"Network Visualization","text":"buildRepSeqNetwork() addPlots() can generate multiple plots single call, plot coloring nodes according different variable. color_nodes_by parameter accepts character vector naming variables use. color_scheme parameter accept character vector matching length specifying color scale plot, character string specifying single color scale use plots.","code":"net <- addPlots(net,                 color_nodes_by = c(\"coreness\", \"degree\"),                 color_scheme = c(\"plasma-1\", \"mako-1\"),                 color_title = c(\"Coreness\", \"Network Degree\"),                 size_title = \"Network Degree\",                 size_nodes_by = \"degree\",                  node_size_limits = c(0.1, 1.5),                 plot_subtitle = NULL,                 print_plots = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"saving-plots","dir":"Articles","previous_headings":"","what":"Saving Plots","title":"Network Visualization","text":"adding modifying plots list network objects, list network objects can saved using saveNetwork(), also prints plots PDF. saveNetworkPlots() saves PDF .","code":"saveNetwork(net, output_dir = dir_out)  saveNetworkPlots(net$plots, outfile = file.path(dir_out, \"plots.pdf\"))"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/node_properties.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Node-Level Network Properties","text":"Node-level network properties properties pertain individual node network graph. local properties, meaning value given node depends subset nodes network. One example network degree given node, represents number nodes directly joined given node edge connection. properties global properties, meaning value given node depends nodes network. example authority score node, computed using entire graph adjacency matrix (denote matrix \\(\\), principal eigenvector \\(^T \\) represents authority scores network nodes). Node-level network properties can computed calling buildRepSeqNetwork() alias buildNet() setting node_stats = TRUE, separate step using addNodeStats().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/node_properties.html","id":"simulate-data-for-demonstration","dir":"Articles","previous_headings":"Introduction","what":"Simulate Data for Demonstration","title":"Node-Level Network Properties","text":"simulate toy data demonstration. simulate data consisting two samples 100 observations , total 200 observations (rows).","code":"set.seed(42) library(NAIR) #> Welcome to NAIR: Network Analysis of Immune Repertoire. #> Get started using `vignette(\"NAIR\")`, or by visiting #> https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/ dir_out <- tempdir()  toy_data <- simulateToyData() head(toy_data) #>        CloneSeq CloneFrequency CloneCount SampleID #> 1 TTGAGGAAATTCG    0.007873775       3095  Sample1 #> 2 GGAGATGAATCGG    0.007777102       3057  Sample1 #> 3 GTCGGGTAATTGG    0.009094910       3575  Sample1 #> 4 GCCGGGTAATTCG    0.010160859       3994  Sample1 #> 5 GAAAGAGAATTCG    0.009336593       3670  Sample1 #> 6 AGGTGGGAATTCG    0.010369470       4076  Sample1 nrow(toy_data) #> [1] 200"},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/node_properties.html","id":"with-buildrepseqnetworkbuildnet","dir":"Articles","previous_headings":"Computing Node-Level Properties","what":"With buildRepSeqNetwork()/buildNet()","title":"Node-Level Network Properties","text":"Calling buildRepSeqNetwork() node_stats = TRUE one way compute node-level network properties.","code":"# build network with computation of node-level network properties net <- buildNet(toy_data, \"CloneSeq\",                  node_stats = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/node_properties.html","id":"with-addnodestats","dir":"Articles","previous_headings":"Computing Node-Level Properties","what":"With addNodeStats()","title":"Node-Level Network Properties","text":"addNodeStats() can used output buildRepSeqNetwork() compute node properties network.","code":"net <- buildNet(toy_data, \"CloneSeq\")  net <- addNodeStats(net)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/node_properties.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Node-Level Network Properties","text":"using either methods described , node metadata now contains additional variables network properties.","code":"names(net$node_data) #>  [1] \"CloneSeq\"                  \"CloneFrequency\"            #>  [3] \"CloneCount\"                \"SampleID\"                  #>  [5] \"degree\"                    \"transitivity\"              #>  [7] \"eigen_centrality\"          \"centrality_by_eigen\"       #>  [9] \"betweenness\"               \"centrality_by_betweenness\" #> [11] \"authority_score\"           \"coreness\"                  #> [13] \"page_rank\" head(net$node_data[ , c(\"CloneSeq\", \"degree\", \"authority_score\")]) #>         CloneSeq degree authority_score #> 2  GGAGATGAATCGG      1      0.00000000 #> 5  GAAAGAGAATTCG      3      0.00000000 #> 8  GGGGAGAAATTGG      2      0.04558649 #> 11 GGGGGAGAATTGC      4      0.15055366 #> 12 GGGGGGGAATTGC     10      0.52691798 #> 13 AGGGGGAAATTGG      5      0.14682343"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/node_properties.html","id":"choosing-the-node-level-properties","dir":"Articles","previous_headings":"","what":"Choosing the Node-Level Properties","title":"Node-Level Network Properties","text":"names node-level network properties can computed listed . details individual properties, see ?chooseNodeStats(). cluster_id property discussed . degree cluster_id transitivity closeness centrality_by_closeness eigen_centrality centrality_by_eigen betweenness centrality_by_betweenness authority_score coreness page_rank default, available node-level properties computed except closeness, centrality_by_closeness cluster_id. computing node properties buildRepSeqNetwork() addNodeStats(), properties compute can specified using stats_to_include parameter. stats_to_include = \"\" computes properties. specify subset properties, stats_to_include accepts named logical vector following particular format. vector can created chooseNodeStats(). parameter chooseNodeStats() one property names seen , accepting TRUE FALSE specify whether property computed. (default values match default set node properties, stats_to_include = chooseNodeStats() leaving stats_to_include unspecified.) , closeness property computed along default properties except page_rank. include properties exclude rest, easier use exclusiveNodeStats(), behaves like chooseNodeStats(), argument values FALSE default.","code":"# Modifying the default set of node-level properties net <- buildNet(toy_data, \"CloneSeq\",                  node_stats = TRUE,                 stats_to_include =                    chooseNodeStats(closeness = TRUE,                                    page_rank = FALSE                   ) ) # Include only the node-level properties specified below net <- buildNet(toy_data, \"CloneSeq\",                  node_stats = TRUE,                  stats_to_include =                    exclusiveNodeStats(degree = TRUE,                                       transitivity = TRUE                   ) )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Searching for Public TCR/BCR Clusters","text":"NAIR package includes set functions facilitate searching public TCR/BCR clusters across multiple samples Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data. context, public cluster consists similar TCR/BCR clones (e.g., whose CDR3 amino acid sequences differ one amino acid) shared across samples (e.g., across individuals across time points single individual).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"overview-of-process","dir":"Articles","previous_headings":"Introduction","what":"Overview of Process","title":"Searching for Public TCR/BCR Clusters","text":"Identify prominent clusters within sample.. sample, construct repertoire network use cluster analysis partition network clusters. sample, select clusters based node count clone count. Construct global network using selected clusters. Combine selected data step 1 single global network. Use cluster analysis partition global network clusters, considered public clusters. Perform additional tasks labeling global clusters visual plot analyzing individual clusters interest.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"simulate-data-for-demonstration","dir":"Articles","previous_headings":"Introduction","what":"Simulate Data for Demonstration","title":"Searching for Public TCR/BCR Clusters","text":"simulate toy data demonstration. toy data includes 30 samples, containing 30 observations. sequences simulated tendency appear relatively samples, others simulated tendency appear many samples. sample’s data frame saved file using RDS file format. files named “Sample1.rds”, “Sample2.rds”, etc. character string containing directory path assigned R environment variable dir_input_samples later reference. first rows data first sample appear follows:","code":"set.seed(42) library(NAIR) #> Welcome to NAIR: Network Analysis of Immune Repertoire. #> Get started using `vignette(\"NAIR\")`, or by visiting #> https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/ data_dir <- tempdir() dir_input_samples <- file.path(data_dir, \"input_samples\") dir.create(dir_input_samples, showWarnings = FALSE)  samples <- 30 sample_size <- 30 # (seqs per sample)           base_seqs <- c(   \"CASSIEGQLSTDTQYF\", \"CASSEEGQLSTDTQYF\", \"CASSSVETQYF\",   \"CASSPEGQLSTDTQYF\", \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\",   \"CASSLTSGYNEQFF\", \"CASSETGYNEQFF\", \"CASSLTGGNEQFF\", \"CASSYLTGYNEQFF\",   \"CASSLTGNEQFF\", \"CASSLNGYNEQFF\", \"CASSFPWDGYGYTF\", \"CASTLARQGGELFF\",   \"CASTLSRQGGELFF\", \"CSVELLPTGPLETSYNEQFF\", \"CSVELLPTGPSETSYNEQFF\",   \"CVELLPTGPSETSYNEQFF\", \"CASLAGGRTQETQYF\", \"CASRLAGGRTQETQYF\",   \"CASSLAGGRTETQYF\", \"CASSLAGGRTQETQYF\", \"CASSRLAGGRTQETQYF\",   \"CASQYGGGNQPQHF\", \"CASSLGGGNQPQHF\", \"CASSNGGGNQPQHF\", \"CASSYGGGGNQPQHF\",   \"CASSYGGGQPQHF\", \"CASSYKGGNQPQHF\", \"CASSYTGGGNQPQHF\",    \"CAWSSQETQYF\", \"CASSSPETQYF\", \"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\")   # relative generation probabilities pgen <- cbind(   stats::toeplitz(0.6^(0:(sample_size - 1))),   matrix(1, nrow = samples, ncol = length(base_seqs) - samples))  simulateToyData(       samples = samples,    sample_size = sample_size,   prefix_length = 1,    prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, samples), rep(0, samples)),   affixes = base_seqs,    affix_probs = pgen,    num_edits = 0,   output_dir = dir_input_samples,    no_return = TRUE ) #> [1] TRUE # View first few rows of data for sample 1 head(readRDS(file.path(dir_input_samples, \"Sample1.rds\"))) #>           CloneSeq CloneFrequency CloneCount SampleID #> 1 CASSIEGQLSTDTQYF     0.02606559       2832  Sample1 #> 2 CASSEEGQLSTDTQYF     0.03718396       4040  Sample1 #> 3      CASSSPETQYF     0.03182726       3458  Sample1 #> 4 CASSIEGQLSTDTQYF     0.04615781       5015  Sample1 #> 5      CAWSSQETQYF     0.06006498       6526  Sample1 #> 6 CASSEEGQLSTDTQYF     0.03363123       3654  Sample1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"step-1-identify-prominent-clusters-within-each-sample","dir":"Articles","previous_headings":"","what":"Step 1: Identify Prominent Clusters Within Each Sample","title":"Searching for Public TCR/BCR Clusters","text":"First, use findPublicClusters() search across samples select clones inclusion global network. sample’s repertoire network constructed individually, cluster analysis used partition network clusters. clusters filtered according node count clone count based user-specified criteria. AIRR-Seq data clusters remain filtering saved files used inputs step 2. , explain use findPublicClusters().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"input-data-for-step-1","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample","what":"Input Data for Step 1","title":"Searching for Public TCR/BCR Clusters","text":"sample’s AIRR-Seq data must contained separate file, observations indexed row, columns across samples.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"file-paths-of-sample-data","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Input Data for Step 1","what":"File Paths of Sample Data","title":"Searching for Public TCR/BCR Clusters","text":"file_list parameter accepts character vector containing file paths (list containing file paths connections), element corresponds file containing single sample.","code":"# create vector of input file paths for step 1 (one per sample) input_files <- file.path(dir_input_samples,                           paste0(\"Sample\", 1:samples, \".rds\") ) head(input_files) #> [1] \"/tmp/RtmplBGS3E/input_samples/Sample1.rds\" #> [2] \"/tmp/RtmplBGS3E/input_samples/Sample2.rds\" #> [3] \"/tmp/RtmplBGS3E/input_samples/Sample3.rds\" #> [4] \"/tmp/RtmplBGS3E/input_samples/Sample4.rds\" #> [5] \"/tmp/RtmplBGS3E/input_samples/Sample5.rds\" #> [6] \"/tmp/RtmplBGS3E/input_samples/Sample6.rds\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"file-format-of-sample-data","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Input Data for Step 1","what":"File Format of Sample Data","title":"Searching for Public TCR/BCR Clusters","text":"file format input files specified input_type parameter. supported values \"rds\", \"rda\", \"csv\", \"csv2\", \"tsv\" \"table\". Depending input type, options specified data_symbols read.args. Refer loadDataFromFileList() details examples.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"sequence-column-in-sample-data","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Input Data for Step 1","what":"Sequence Column in Sample Data","title":"Searching for Public TCR/BCR Clusters","text":"seq_col parameter specifies column containing TCR/BCR sequences within sample. accepts column name (character string) column position index.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"count-column-in-sample-data","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Input Data for Step 1","what":"Count Column in Sample Data","title":"Searching for Public TCR/BCR Clusters","text":"optional count_col parameter specifies column containing clone count (clonal abundance) within sample. accepts column name (character string) column position index. provided, clone counts considered filtering clusters.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"custom-sample-ids-optional","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Input Data for Step 1","what":"Custom Sample IDs (Optional)","title":"Searching for Public TCR/BCR Clusters","text":"clone’s sample ID included output. default, \"Sample1\", \"Sample2\", etc., according order file_list. optional sample_ids parameter assigns custom sample IDs. accepts vector length file_list, entry corresponding sample ID.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"filtering-the-sample-data","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Input Data for Step 1","what":"Filtering the Sample Data","title":"Searching for Public TCR/BCR Clusters","text":"clones sample filtered remove irrelevant data. default, clones sequences less three characters length, well sequences containing characters *, _ |, excluded. min_seq_length drop_matches parameters control filter settings. Refer details.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"construction-of-sample-networks","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Input Data for Step 1","what":"Construction of Sample Networks","title":"Searching for Public TCR/BCR Clusters","text":"parameters control construction sample’s network shown along default values. dist_type = \"hamming\" dist_cutoff = 1 drop_isolated_nodes = TRUE Refer meaning usage.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"clustering-algorithm-for-sample-networks","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Input Data for Step 1","what":"Clustering Algorithm for Sample Networks","title":"Searching for Public TCR/BCR Clusters","text":"default, clustering within sample’s network performed using igraph::cluster_fast_greedy(). different clustering algorithm can specified using cluster_fun parameter, described .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"filtering-the-sample-clusters","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample","what":"Filtering the Sample Clusters","title":"Searching for Public TCR/BCR Clusters","text":"following parameters control criteria used select clusters sample.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"top-n-clusters","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Filtering the Sample Clusters","what":"Top \\(n\\) Clusters","title":"Searching for Public TCR/BCR Clusters","text":"Within sample, \\(n = 20\\) clusters greatest node count automatically selected. value \\(n\\) can adjusted using top_n_clusters parameter.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"minimum-node-count","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Filtering the Sample Clusters","what":"Minimum Node Count","title":"Searching for Public TCR/BCR Clusters","text":"default, cluster containing least ten nodes selected value can adjusted using min_node_count parameter.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"minimum-clone-count","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Filtering the Sample Clusters","what":"Minimum Clone Count","title":"Searching for Public TCR/BCR Clusters","text":"default, cluster aggregate clone count (summed nodes) least 100 selected. value can adjusted using min_clone_count parameter. criterion applies clone counts provided using count_col parameter.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-settings-for-step-1","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample","what":"Output Settings for Step 1","title":"Searching for Public TCR/BCR Clusters","text":"findPublicClusters() return direct output. Instead, data selected clusters saved files used inputs step 2. following parameters control output settings.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"variables-to-keep-from-sample-data","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Output Settings for Step 1","what":"Variables to Keep From Sample Data","title":"Searching for Public TCR/BCR Clusters","text":"default, output includes variables original sample data. variables can used later metadata visualizations global network. keep subset original variables, specify variables keep using subset_cols parameter, accepts character vector column names vector column indices. sequence column always included.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-directory-for-step-1","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Output Settings for Step 1","what":"Output Directory for Step 1","title":"Searching for Public TCR/BCR Clusters","text":"output_dir parameter specifies output directory. accepts character string containing directory path. directory created exist.","code":"# create output directory path for step 1 dir_filtered_samples <- file.path(data_dir, \"filtered_samples\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-file-format-for-step-1","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Output Settings for Step 1","what":"Output File Format for Step 1","title":"Searching for Public TCR/BCR Clusters","text":"default, file saved RDS file. can changed using output_type parameter. accepted values \"rda\" \"csv\".","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"saving-full-networks-for-each-sample-optional","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Output Settings for Step 1","what":"Saving Full Networks for Each Sample (Optional)","title":"Searching for Public TCR/BCR Clusters","text":"default, findPublicClusters() saves data selected clusters sample. desired, data sample’s entire network can also saved passing directory path output_dir_unfiltered parameter. full network data sample output returned buildNet(). output_type_unfiltered parameter specifies file format manner described []((https://mlizhangx.github.io/Network-Analysis--Repertoire-Sequencing-/articles/buildRepSeqNetwork.html#output-file-format) output_type parameter buildNet().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"visualization-of-sample-networks-optional","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample > Output Settings for Step 1","what":"Visualization of Sample Networks (Optional)","title":"Searching for Public TCR/BCR Clusters","text":"default, findPublicClusters() produce visual plots. visualization interest global network step 2. plot sample’s full network can produced using plots = TRUE. Specifying print_plots = TRUE prints R plotting window. plots saved output_dir_unfiltered non-null. default, nodes plot colored according cluster membership. different variable can specified using color_nodes_by parameter detailed (multiple variables). Refer learn parameters customizing visualization.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"demonstration-step-1","dir":"Articles","previous_headings":"Step 1: Identify Prominent Clusters Within Each Sample","what":"Demonstration, Step 1","title":"Searching for Public TCR/BCR Clusters","text":"Two new directories created within specified output directory: directories contain cluster-level node-level metadata, respectively, selected clusters sample. require node metadata step 2.","code":"findPublicClusters(input_files,                     input_type = \"rds\",                    seq_col = \"CloneSeq\",                     count_col = \"CloneCount\",                    min_seq_length = NULL,                     drop_matches = NULL,                    top_n_clusters = 3,                     min_node_count = 5,                     min_clone_count = 15000,                    output_dir = dir_filtered_samples ) list.files(dir_filtered_samples) #> [1] \"cluster_meta_data\" \"node_meta_data\" head(list.files(file.path(dir_filtered_samples, \"node_meta_data\"))) #> [1] \"1_Sample1.rds\"   \"10_Sample10.rds\" \"11_Sample11.rds\" \"12_Sample12.rds\" #> [5] \"13_Sample13.rds\" \"14_Sample14.rds\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"step-2-global-network-of-public-clusters","dir":"Articles","previous_headings":"","what":"Step 2: Global Network of Public Clusters","title":"Searching for Public TCR/BCR Clusters","text":"buildPublicClusterNetwork() combines selected clusters samples single global network, new round cluster analysis performed partition global network clusters.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"input-data-for-step-2","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Input Data for Step 2","title":"Searching for Public TCR/BCR Clusters","text":"input files buildPublicClusterNetwork() node metadata files output step 1. file contains data one sample.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"file-paths-of-node-metadata-from-step-1","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Input Data for Step 2","what":"File Paths of Node Metadata From Step 1","title":"Searching for Public TCR/BCR Clusters","text":"file_list parameter accepts character vector file paths input files, located node_meta_data subdirectory output directory step 1.","code":"# Directory of node metadata from step 1 dir_filtered_samples_node <-    file.path(dir_filtered_samples, \"node_meta_data\")  # Vector of file paths to node metadata from step 1 files_filtered_samples_node <-    list.files(dir_filtered_samples_node, full.names = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"file-format-of-node-metadata-from-step-1","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Input Data for Step 2","what":"File Format of Node Metadata From Step 1","title":"Searching for Public TCR/BCR Clusters","text":"findPublicClusters() called non-default value output_type, value must passed input_type parameter buildPublicClusterNetwork().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"argument-values-from-step-1","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Input Data for Step 2","what":"Argument Values From Step 1","title":"Searching for Public TCR/BCR Clusters","text":"seq_col count_col parameters specify input data columns containing receptor sequences clone counts, respectively. Users pass argument values parameters calling findPublicClusters() step 1.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"network-construction","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Global Network Analysis","what":"Network Construction","title":"Searching for Public TCR/BCR Clusters","text":"parameters control construction global network shown along default values. dist_type = \"hamming\" dist_cutoff = 1 drop_isolated_nodes = FALSE Refer meaning usage.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"clustering-algorithm-for-global-network","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Global Network Analysis","what":"Clustering Algorithm for Global Network","title":"Searching for Public TCR/BCR Clusters","text":"clustering algorithm used partition global network graph densely-connected subgraphs (clusters). cluster can contain clones different samples. default, clustering within performed using igraph::cluster_fast_greedy(). different clustering algorithm can specified using cluster_fun parameter, described .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"visualization-of-global-network","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Global Network Analysis","what":"Visualization of Global Network","title":"Searching for Public TCR/BCR Clusters","text":"default, buildPublicClusterNetwork() produces visual plot global network graph nodes colored according sample ID. color_nodes_by parameter specifies variable used color nodes. accepts character string naming variable kept original sample data one node-level network properties listed . color_nodes_by also accepts vector naming multiple variables. One plot created entry, nodes colored according respective variable. Refer learn parameters customizing visualization.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-settings-for-step-2","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Output Settings for Step 2","title":"Searching for Public TCR/BCR Clusters","text":"buildPublicClusterNetwork() returns list containing plots, metadata network objects, structure output buildRepSeqNetwork(). output can saved local directory using parameters output_dir, output_type output_name, whose usage described .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"demonstration-step-2","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Demonstration, Step 2","title":"Searching for Public TCR/BCR Clusters","text":"returned list contains following elements: elements described . inspect node metadata cluster metadata.","code":"public_clusters <- buildPublicClusterNetwork(files_filtered_samples_node,                                              seq_col = \"CloneSeq\",                                               count_col = \"CloneCount\",                                              size_nodes_by = 1,                                              print_plots = TRUE ) names(public_clusters) #> [1] \"details\"          \"igraph\"           \"adjacency_matrix\" \"node_data\"        #> [5] \"cluster_data\"     \"plots\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"node-metadata-for-global-network","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Demonstration, Step 2","what":"Node Metadata for Global Network","title":"Searching for Public TCR/BCR Clusters","text":"list element node_data data frame containing metadata network nodes, row represents distinct clone corresponding node global network graph. variables kept original sample data step 1 present. variable ClusterIDPublic contains global cluster membership, ClusterIDInSample contains -sample cluster membership. Node-level network properties also present. beginning SampleLevel correspond sample networks, beginning Public correspond global network. row names indicate original row ID clone within sample’s data.","code":"nrow(public_clusters$node_data) #> [1] 517 # variables in the node-level metadata names(public_clusters$node_data) #>  [1] \"CloneSeq\"                           \"CloneFrequency\"                     #>  [3] \"CloneCount\"                         \"SampleID\"                           #>  [5] \"SampleLevelNetworkDegree\"           \"ClusterIDInSample\"                  #>  [7] \"SampleLevelTransitivity\"            \"SampleLevelCloseness\"               #>  [9] \"SampleLevelCentralityByCloseness\"   \"SampleLevelEigenCentrality\"         #> [11] \"SampleLevelCentralityByEigen\"       \"SampleLevelBetweenness\"             #> [13] \"SampleLevelCentralityByBetweenness\" \"SampleLevelAuthorityScore\"          #> [15] \"SampleLevelCoreness\"                \"SampleLevelPageRank\"                #> [17] \"PublicNetworkDegree\"                \"ClusterIDPublic\"                    #> [19] \"PublicTransitivity\"                 \"PublicCloseness\"                    #> [21] \"PublicCentralityByCloseness\"        \"PublicEigenCentrality\"              #> [23] \"PublicCentralityByEigen\"            \"PublicBetweenness\"                  #> [25] \"PublicCentralityByBetweenness\"      \"PublicAuthorityScore\"               #> [27] \"PublicCoreness\"                     \"PublicPageRank\" # View some of the node metadata for the global network view_cols <- c(\"CloneSeq\", \"SampleID\", \"ClusterIDInSample\", \"ClusterIDPublic\") public_clusters$node_data[49:54 , view_cols] #>                   CloneSeq SampleID ClusterIDInSample ClusterIDPublic #> Sample11.27    CASSGAYEQYF Sample11                 3               2 #> Sample11.29 CASSYLTGYNEQFF Sample11                 1              11 #> Sample11.30    CAWSSQETQYF Sample11                 4               4 #> Sample12.6   CASSLNGYNEQFF Sample12                 1              12 #> Sample12.11 CASSYLTGYNEQFF Sample12                 2              11 #> Sample12.14  CASSLNGYNEQFF Sample12                 1              12"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"cluster-metadata-for-global-network","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Demonstration, Step 2","what":"Cluster Metadata for Global Network","title":"Searching for Public TCR/BCR Clusters","text":"list element cluster_data data frame containing metadata public clusters, row corresponds cluster global network. Refer information cluster-level network properties.","code":"# variables in the cluster-level metadata names(public_clusters$cluster_data) #>  [1] \"cluster_id\"                  \"node_count\"                  #>  [3] \"eigen_centrality_eigenvalue\" \"eigen_centrality_index\"      #>  [5] \"closeness_centrality_index\"  \"degree_centrality_index\"     #>  [7] \"edge_density\"                \"global_transitivity\"         #>  [9] \"assortativity\"               \"diameter_length\"             #> [11] \"max_degree\"                  \"mean_degree\"                 #> [13] \"mean_seq_length\"             \"seq_w_max_degree\"            #> [15] \"max_count\"                   \"agg_count\"                   #> [17] \"seq_w_max_count\" # View some of the cluster metadata for the global network head(public_clusters$cluster_data[, 1:6]) #>   cluster_id node_count eigen_centrality_eigenvalue eigen_centrality_index #> 1          1         96                          95           1.511793e-16 #> 2          2         75                          74           0.000000e+00 #> 3          3         73                          72           0.000000e+00 #> 4          4         66                          65           0.000000e+00 #> 5          5         61                          60           1.204310e-16 #> 6          6         27                          26           0.000000e+00 #>   closeness_centrality_index degree_centrality_index #> 1                          0                       0 #> 2                          0                       0 #> 3                          0                       0 #> 4                          0                       0 #> 5                          0                       0 #> 6                          0                       0"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"step-3-additional-tasks","dir":"Articles","previous_headings":"","what":"Step 3: Additional Tasks","title":"Searching for Public TCR/BCR Clusters","text":"calling buildPublicClusterNetwork(), following tasks can performed using returned output.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"labeling-the-global-clusters","dir":"Articles","previous_headings":"Step 3: Additional Tasks","what":"Labeling the Global Clusters","title":"Searching for Public TCR/BCR Clusters","text":"order easily cross-reference clusters visual plot clusters data, can label clusters ID numbers. accomplished using labelClusters() described . , label six largest clusters plot cluster IDs. node metadata variable ClusterIDPublic contains global cluster membership, pass name cluster_id_col parameter.","code":"public_clusters <-    labelClusters(public_clusters,                 top_n_clusters = 6,                 cluster_id_col = \"ClusterIDPublic\",                 size = 7   )  public_clusters$plots[[1]] #> Warning: Removed 511 rows containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"focusing-on-individual-clusters","dir":"Articles","previous_headings":"Step 3: Additional Tasks","what":"Focusing on Individual Clusters","title":"Searching for Public TCR/BCR Clusters","text":"focus particular cluster, can subset node metadata based value ClusterIDPublic use buildNet() produce plots cluster’s graph.","code":"# focus on cluster 1 buildNet(   public_clusters$node_data[public_clusters$node_data$ClusterIDPublic == 1, ],   \"CloneSeq\",    color_nodes_by = \"CloneSeq\",    size_nodes_by = 3,    output_name = \"Cluster 1\",   print_plots = TRUE ) #> Warning in .checkOutputName(output_name, \"MyRepSeqNetwork\"): value for #> 'output_name' may be unsafe for use as a file name prefix. Value changed to #> \"Cluster_1\" # focus on cluster 6 buildNet(   public_clusters$node_data[public_clusters$node_data$ClusterIDPublic == 6, ],   \"CloneSeq\",    color_nodes_by = \"CloneSeq\",    color_scheme = \"plasma\",    size_nodes_by = 4,    output_name = \"Cluster 6\",   print_plots = TRUE ) #> Warning in .checkOutputName(output_name, \"MyRepSeqNetwork\"): value for #> 'output_name' may be unsafe for use as a file name prefix. Value changed to #> \"Cluster_6\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Supplementary Functions","text":"NAIR package contains number functions supplementary buildRepSeqNetwork() can used perform additional downstream tasks.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"simulate-data-for-demonstration","dir":"Articles","previous_headings":"Introduction","what":"Simulate Data for Demonstration","title":"Supplementary Functions","text":"simulate toy data demonstration. simulate data consisting two samples 100 observations , total 200 observations (rows). go various functions, code shows example might used together.","code":"set.seed(42) library(NAIR) #> Welcome to NAIR: Network Analysis of Immune Repertoire. #> Get started using `vignette(\"NAIR\")`, or by visiting #> https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/ dir_out <- tempdir()  toy_data <- simulateToyData() head(toy_data) #>        CloneSeq CloneFrequency CloneCount SampleID #> 1 TTGAGGAAATTCG    0.007873775       3095  Sample1 #> 2 GGAGATGAATCGG    0.007777102       3057  Sample1 #> 3 GTCGGGTAATTGG    0.009094910       3575  Sample1 #> 4 GCCGGGTAATTCG    0.010160859       3994  Sample1 #> 5 GAAAGAGAATTCG    0.009336593       3670  Sample1 #> 6 AGGTGGGAATTCG    0.010369470       4076  Sample1 nrow(toy_data) #> [1] 200 library(magrittr) # For pipe operator (%>%) toy_data %>%   filterInputData(\"CloneSeq\", drop_matches = \"\\\\W\") %>%   buildNet(\"CloneSeq\") %>%   addNodeStats(\"all\") %>%   addClusterMembership(\"greedy\", cluster_id_name = \"cluster_greedy\") %>%   addClusterMembership(\"leiden\", cluster_id_name = \"cluster_leiden\") %>%   addClusterStats(\"cluster_leiden\", \"CloneSeq\", \"CloneCount\") %>%   addPlots(color_nodes_by = c(\"cluster_leiden\", \"cluster_greedy\"),             color_scheme = \"Viridis\"   ) %>%   labelClusters(\"cluster_leiden\", cluster_id_col = \"cluster_leiden\") %>%   labelClusters(\"cluster_greedy\", cluster_id_col = \"cluster_greedy\") %>%   saveNetwork(output_dir = tempdir(), output_name = \"my_network\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"addplots","dir":"Articles","previous_headings":"","what":"addPlots()","title":"Supplementary Functions","text":"addPlots() can used generate plots network graph. See article details.","code":"net <- buildRepSeqNetwork(toy_data, \"CloneSeq\") net <- addPlots(net, color_nodes_by = \"SampleID\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"addnodestats","dir":"Articles","previous_headings":"","what":"addNodeStats()","title":"Supplementary Functions","text":"addNodeStats() can used compute node-level network properties network. See article details.","code":"net <- addNodeStats(net, stats_to_include = \"all\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"addclusterstats","dir":"Articles","previous_headings":"","what":"addClusterStats()","title":"Supplementary Functions","text":"addClusterStats() can used perform cluster analysis network. performs clustering, records cluster membership nodes, computes cluster properties. See article details.","code":"net <- addClusterStats(net, cluster_fun = \"walktrap\",                        cluster_id_name = \"cluster_walktrap\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"addclustermembership","dir":"Articles","previous_headings":"","what":"addClusterMembership()","title":"Supplementary Functions","text":"addClusterMembership() can used perform clustering record cluster membership nodes without computing cluster properties. useful performing multiple instances clustering different algorithms. Refer details.","code":"net <- addClusterMembership(net,                              cluster_fun = \"leiden\",                             cluster_id_name = \"cluster_leiden\" ) net <- addClusterMembership(net,                              cluster_fun = \"louvain\",                             cluster_id_name = \"cluster_louvain\" )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"addclusterlabels","dir":"Articles","previous_headings":"","what":"addClusterLabels()","title":"Supplementary Functions","text":"addClusterLabels() can used label clusters plot.  Refer details.","code":"net <- addPlots(net,                 color_nodes_by = \"cluster_louvain\",                 color_scheme = \"Viridis\" ) net <- labelClusters(net,                      cluster_id_col = \"cluster_louvain\",                      top_n_clusters = 7,                      size = 7 ) net$plots$cluster_louvain #> Warning: Removed 115 rows containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"labelnodes","dir":"Articles","previous_headings":"","what":"labelNodes()","title":"Supplementary Functions","text":"labelNodes() can used label nodes network plots.","code":"set.seed(42) small_sample <- simulateToyData(1, sample_size = 10, prefix_length = 1) net <- buildNet(small_sample, \"CloneSeq\", plot_title = NULL) net <- labelNodes(net, \"CloneSeq\", size = 4) net$plots[[1]]"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"savenetwork","dir":"Articles","previous_headings":"","what":"saveNetwork()","title":"Supplementary Functions","text":"saveNetwork() can used save list network objects. Also prints plots PDF containing one plot per page. parameters output_dir, output_type, output_name, pdf_width pdf_height behavior buildRepSeqNetwork() function.","code":"saveNetwork(net, output_dir = dir_out, output_type = \"individual\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"savenetworkplots","dir":"Articles","previous_headings":"","what":"saveNetworkPlots()","title":"Supplementary Functions","text":"saveNetworkPlots() can used save plots network PDF containing one plot per page.","code":"saveNetworkPlots(net$plots, outfile = file.path(dir_out, \"plots.pdf\"))"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"loaddatafromfilelist","dir":"Articles","previous_headings":"","what":"loadDataFromFileList()","title":"Supplementary Functions","text":"loadDataFromFileList() can used load data multiple files combine single data frame. primary parameter accepts character vector containing file paths list containing file paths connections. element corresponds single file. file assumed contain data single sample, observations indexed row, columns across samples. supported values input_type \"rds\", \"rda\", \"csv\", \"csv2\", \"tsv\" \"table\". value specifies different function load files. respective functions readRDS(), load(), read.csv(), read.csv2(), read.delim(), read.table().","code":"dat <- loadDataFromFileList(list.files(my_dir), input_type = \"rds\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"text-formats","dir":"Articles","previous_headings":"loadDataFromFileList()","what":"Text formats","title":"Supplementary Functions","text":"text formats (values input_type \"rds\" \"rda\"), non-default argument values can specified optional parameters reading function using read.args argument. accepts named list argument values. See ?utils::read.table() parameters accepted values. Note read.csv(), read.csv2() read.delim() identical read.table() default argument values. examples useful parameters include: header: Whether first row contains column names. sep: character separating consecutive values row. dec: character used decimal point. quote: character(s) used quotes within character strings. na.strings: character string representing NA values. row.names: row names column containing row names. col.names: column names, files without header row. colClasses: manually specifying class column. .: specifying character columns converted factors. nrows: Max number rows (specification can improve memory usage)","code":"loadDataFromFileList(list.files(my_dir),                      input_type = \"table\",                      read.args = list(                        header = TRUE,                        sep = \" \",                        dec = \",\",                        na.strings = \"NA!\",                        row.names = 1,                        col.names = c(\"RowID\",                                       \"CloneSeq\", \"CloneFrequency\",                                      \"CloneCount\", \"VGene\"                        )                      ) )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"rdata-format","dir":"Articles","previous_headings":"loadDataFromFileList()","what":"RData format","title":"Supplementary Functions","text":"\"rda\" input type, data_symbols parameter accepts character vector specifying name sample’s data frame within respective Rdata file (.e., name data frame R environment). single character string can used sample’s data frame name.","code":"save(df_sample1, file = file_1) save(df_sample2, file = file_2) save(df_sample3, file = file_3) loadDataFromFileList(c(file_1, file_2, file_3),                      input_type = \"rda\",                      data_symbols = c(\"df_sample1\",                                       \"df_sample2\",                                       \"df_sample3\"                      ) )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"combinesamples","dir":"Articles","previous_headings":"","what":"combineSamples()","title":"Supplementary Functions","text":"combineSamples() default behavior loadDataFromFileList(), possesses additional parameters give extra functionality, ability filter data assign sample/subject/group IDs data file, included variables combined data frame.","code":"dat <- combineSamples(list.files(my_dir),                       input_type = \"rds\",                       min_seq_length = 7,                       drop_matches = \"[*|_]\",                       subset_cols = c(\"CloneSeq\", \"CloneCount\", \"VGene\"),                       sample_ids = 1:5,                       subject_ids = c(1, 2, 2, 3, 3),                       group_ids = c(1, 1, 1, 2, 2) )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"filterinputdata","dir":"Articles","previous_headings":"","what":"filterInputData()","title":"Supplementary Functions","text":"filterInputData() can used filter data prior performing network analysis. function parameters data, seq_col, min_seq_length, drop_matches subset_cols, behave manner seen buildRepSeqNetwork(). addition, count_col parameter can used specify column containing clone count UMI count. specified, observations NA values column removed data.","code":"filtered_data <- filterInputData(toy_data,                                   seq_col = \"CloneSeq\",                                   min_seq_length = 13,                                  drop_matches = \"GGGG\",                                   subset_cols = c(\"CloneFrequency\", \"SampleID\"),                                  count_col = \"CloneCount\",                                  verbose = TRUE ) #> Input data contains 200 rows. #> Removing sequences with length fewer than 13 characters... Done. 136 rows remaining. #> Removing sequences containing matches to \"GGGG\"... Done. 105 rows remaining."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"aggregateidenticalclones","dir":"Articles","previous_headings":"","what":"aggregateIdenticalClones()","title":"Supplementary Functions","text":"aggregateIdenticalClones() can used bulk AIRR-seq data aggregate data rows containing clone sequence, clone counts clone frequencies added together. Aggregation can restricted performed within groups defined based specified grouping variables.","code":"my_data <- data.frame(   clone_seq = c(\"ATCG\", rep(\"ACAC\", 2), rep(\"GGGG\", 4)),   clone_count = rep(1, 7),   clone_freq = rep(1/7, 7),   time_point = c(\"t_0\", rep(c(\"t_0\", \"t_1\"), 3)),   subject_id = c(rep(1, 5), rep(2, 2)) )  # group clones by time point and subject ID data_agg_time_subject <-   aggregateIdenticalClones(my_data,                            clone_col = \"clone_seq\",                            count_col = \"clone_count\",                            freq_col = \"clone_freq\",                            grouping_cols = c(\"subject_id\", \"time_point\")   )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"getneighborhood","dir":"Articles","previous_headings":"","what":"getNeighborhood()","title":"Supplementary Functions","text":"getNeighborhood() can used extract subset observations receptor sequences sufficiently similar target sequence.","code":"nbd <- getNeighborhood(toy_data,                        seq_col = \"CloneSeq\",                        target_seq = \"GGGGGGGAATTGG\" )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"generatenetworkobjects","dir":"Articles","previous_headings":"","what":"generateNetworkObjects()","title":"Supplementary Functions","text":"generateNetworkObjects() can used construct minimal output possible buildRepSeqNetwork(). filter input data, produce plots, compute network properties, perform cluster analysis save data. function parameters data, seq_col, dist_type, dist_cutoff drop_isolated_nodes, behavior default values seen buildRepSeqNetwork().","code":"net <- generateNetworkObjects(toy_data, \"CloneSeq\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"generatenetworkgraph","dir":"Articles","previous_headings":"","what":"generateNetworkGraph()","title":"Supplementary Functions","text":"generateNetworkGraph() can used generate network igraph adjacency matrix.","code":"net$igraph <- generateNetworkGraph(net$adjacency_matrix)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/supplementary.html","id":"generateadjacencymatrix","dir":"Articles","previous_headings":"","what":"generateAdjacencyMatrix()","title":"Supplementary Functions","text":"generateAdjacencyMatrix() can used compute network adjacency matrix list receptor sequences. parameters dist_type, dist_cutoff drop_isolated_nodes behavior default values buildRepSeqNetwork().","code":"output$adjacency_matrix <- generateAdjacencyMatrix(toy_data$CloneSeq)  # use same settings from original call to buildRepSeqNetwork() net$adjacency_matrix <- generateAdjacencyMatrix(   net$node_data$CloneSeq,   dist_type = net$details$dist_type,   dist_cutoff = net$details$dist_cutoff,   drop_isolated_nodes = net$details$drop_isolated_nodes )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Neal. Author, maintainer. Hai Yang. Author. Daniil Matveev. Author. Phi Long Le. Author. Li Zhang. Copyright holder, author.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Neal B, Yang H, Matveev D, Le P, Zhang L (2024). NAIR: Network Analysis Immune Repertoire. R package version 1.0.4.9001, https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-, https://mlizhangx.github.io/Network-Analysis--Repertoire-Sequencing-/.","code":"@Manual{,   title = {NAIR: Network Analysis of Immune Repertoire},   author = {Brian Neal and Hai Yang and Daniil Matveev and Phi Long Le and Li Zhang},   year = {2024},   note = {R package version 1.0.4.9001, https://github.com/mlizhangx/Network-Analysis-for-Repertoire-Sequencing-},   url = {https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/}, }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"nair-network-analysis-of-immune-repertoire","dir":"","previous_headings":"","what":"Network Analysis of Immune Repertoire","title":"Network Analysis of Immune Repertoire","text":"NAIR R package analyzing adaptive immune repertoire using network analysis based similarities among receptor sequences. implements methods following paper: Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 NAIR allows users perform network analysis Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data, including computing local global network properties nodes clusters, can provide insights structural organization immune repertoire network. NAIR also enables users search across multiple AIRR-Seq samples clones/clusters associated subject characteristics, disease conditions clinical outcomes, well identify public clones/clusters. can help researchers identify potentially important TCR/BCR clones. aid interpretation immune repertoire network, NAIR includes convenient functionality generating customized network visualizations.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"what-data-does-nair-support","dir":"","previous_headings":"","what":"What data does NAIR support?","title":"Network Analysis of Immune Repertoire","text":"NAIR supports bulk single-cell immune repertoire sequence data T-cell B-cell receptors (TCR BCR). Single-cell data: row single cell Bulk data: row distinct TCR/BCR clone (unique combination V-D-J genes nucleotide sequence) typically includes corresponding measurement clonal abundance (e.g., clone count clone frequency/fraction)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"how-does-nair-model-the-immune-repertoire-as-a-network","dir":"","previous_headings":"","what":"How does NAIR model the immune repertoire as a network?","title":"Network Analysis of Immune Repertoire","text":"cell (single-cell data) clone (bulk data) modeled node (vertex) network node, consider corresponding receptor sequence (nucleotide amino acid) pair nodes, measure similarity receptor sequences (using Hamming Levenshtein distance) single-cell data, sequences two chains (e.g., alpha chain beta chain) can jointly used determine similarity cells, considering cells similar sequences chains similar (.e., distance chain threshold) Many clustering algorithms available, seeking identify “best” configuration clusters according different graph criteria Network statistics characterize repertoire terms local global structural properties graph Customized visual plots network graph generated, nodes colored according desired metadata (e.g., disease status, sample, cluster, clonal abundance, etc.)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Network Analysis of Immune Repertoire","text":"install latest release version NAIR, use following command: install latest development version NAIR source (requires compilation), use following command:","code":"install.packages(\"NAIR\") devtools::install_github(   \"mlizhangx/Network-Analysis-for-Repertoire-Sequencing-\",   dependencies = TRUE,    build_vignettes = TRUE )"},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"main-function","dir":"","previous_headings":"","what":"Main Function","title":"Network Analysis of Immune Repertoire","text":"General network analysis AIRR-Seq data performed using buildRepSeqNetwork() convenient alias buildNet(). function following: Filters AIRR-Seq data according user specifications Builds network graph immune repertoire Cluster analysis Network properties Customizable visual plots network graph network graph (igraph adjacency matrix) Metadata network Metadata nodes network Metadata clusters network Plots network graph See vignette tutorial.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"searching-for-associated-clusters","dir":"","previous_headings":"","what":"Searching for Associated Clusters","title":"Network Analysis of Immune Repertoire","text":"Given multiple samples bulk AIRR-Seq data, NAIR can used search TCR/BCR clusters associated binary variable interest, disease condition, treatment clinical outcome. See article tutorial.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"searching-for-public-clusters","dir":"","previous_headings":"","what":"Searching for Public Clusters","title":"Network Analysis of Immune Repertoire","text":"NAIR package includes set functions facilitate searching public TCR/BCR clusters across multiple samples bulk AIRR-seq data. context, public cluster consists similar TCR/BCR clones (e.g., whose CDR3 amino acid sequences differ one amino acid) shared across samples (e.g., across individuals across time points single individual). See article tutorial.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"visualization","dir":"","previous_headings":"","what":"Visualization","title":"Network Analysis of Immune Repertoire","text":"article provides introduction creation customization network visualizations using NAIR.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"network-properties-and-cluster-analysis","dir":"","previous_headings":"","what":"Network Properties and Cluster Analysis","title":"Network Analysis of Immune Repertoire","text":"vignette provides introduction computing node-level network properties NAIR. vignette explains perform cluster analysis NAIR.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"supplementary-functions","dir":"","previous_headings":"","what":"Supplementary Functions","title":"Network Analysis of Immune Repertoire","text":"vignette provides overview NAIR utility functions supplement main function buildNet().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/NAIR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"NAIR: Network Analysis of Immune Repertoire — NAIR-package","title":"NAIR: Network Analysis of Immune Repertoire — NAIR-package","text":"learn NAIR package get started, visit package website, browse package vignettes offline: browseVignettes(package = \"NAIR\") following vignette good place start: vignette(\"NAIR\", package = \"NAIR\")","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/NAIR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NAIR: Network Analysis of Immune Repertoire — NAIR-package","text":"Brian Neal (Brian.Neal@ucsf.edu), Maintainer Hai Yang (Hai.Yang@ucsf.edu) Phi-Long Le (PhiLong.Le@ucsf.edu) Li Zhang (Li.Zhang@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Label Clusters in a Network Graph Plot — labelClusters","title":"Label Clusters in a Network Graph Plot — labelClusters","text":"Functions labeling clusters network graph plots cluster   IDs.   user can specify cluster-level property rank clusters,   labeling clusters specified rank.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label Clusters in a Network Graph Plot — labelClusters","text":"","code":"labelClusters(   net,   plots = NULL,   top_n_clusters = 20,   cluster_id_col = \"cluster_id\",   criterion = \"node_count\",   size = 5, color = \"black\",   greatest_values = TRUE )  addClusterLabels(   plot,   net,   top_n_clusters = 20,   cluster_id_col = \"cluster_id\",   criterion = \"node_count\",   size = 5,   color = \"black\",   greatest_values = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label Clusters in a Network Graph Plot — labelClusters","text":"net list network objects conforming output       buildRepSeqNetwork()       generateNetworkObjects().       See details. plots Specifies plots net$plots annotate.   Accepts character vector element names numeric vector element   position indices.   default NULL annotates plots. plot ggraph object containing network graph plot. top_n_clusters positive integer specifying number clusters label.   highest rank according criterion argument labeled. cluster_id_col Specifies column net$node_data containing   variable cluster membership.   Accepts character string containing column name. criterion Can used specify cluster-level network property rank   clusters. Non-default values ignored unless net$cluster_data exists   corresponds cluster membership variable specified cluster_id_col.   Accepts character string containing column name net$cluster_data.   property must quantitative ranking meaningful.   default, clusters ranked node count, computed based   cluster membership values necessary. size font size cluster ID labels. Passed size argument   geom_node_text(). color color cluster ID labels. Passed color argument   geom_node_text(). greatest_values Logical. Controls whether clusters ranked according greatest   least values property specified criterion argument.   TRUE, clusters greater values ranked   lower values, thereby receiving higher priority labeled.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label Clusters in a Network Graph Plot — labelClusters","text":"list net must contain named elements     igraph (class igraph),     adjacency_matrix (matrix     dgCMatrix encoding edge connections),     node_data (data.frame containing node metadata),     corresponding network. lists returned     buildRepSeqNetwork()     generateNetworkObjects()     examples valid inputs net argument.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label Clusters in a Network Graph Plot — labelClusters","text":"labelClusters() returns copy net specified plots   annotated.  addClusterLabels() returns annotated copy plot.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Label Clusters in a Network Graph Plot — labelClusters","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Label Clusters in a Network Graph Plot — labelClusters","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label Clusters in a Network Graph Plot — labelClusters","text":"","code":"set.seed(42) toy_data <- simulateToyData()  network <- buildRepSeqNetwork(   toy_data, \"CloneSeq\",   cluster_stats = TRUE,   color_nodes_by = \"cluster_id\",   color_scheme = \"turbo\",   color_legend = FALSE,   plot_title = NULL,   plot_subtitle = NULL,   size_nodes_by = 1 )  network <- labelClusters(network)  network$plots$cluster_id #> Warning: Removed 102 rows containing missing values or values outside the scale range #> (`geom_text()`)."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"Partition a Network Graph Into Clusters — addClusterMembership","title":"Partition a Network Graph Into Clusters — addClusterMembership","text":"Given list network objects returned     buildRepSeqNetwork()     generateNetworkObjects(),     partitions network graph clusters using specified clustering     algorithm, adding cluster membership variable node metadata.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partition a Network Graph Into Clusters — addClusterMembership","text":"","code":"addClusterMembership(   net,   cluster_fun = \"fast_greedy\",   cluster_id_name = \"cluster_id\",   overwrite = FALSE,   verbose = FALSE,   ...,   data = deprecated(),   fun = deprecated() )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partition a Network Graph Into Clusters — addClusterMembership","text":"net list network objects conforming output       buildRepSeqNetwork()       generateNetworkObjects().       See details.       Alternatively, argument accepts network       igraph, node metadata passed       data argument. However, alternative functionality       deprecated eventually removed. cluster_fun character string specifying clustering algorithm use.       See details. cluster_id_name character string specifying name cluster membership variable       added node metadata. overwrite Logical. variable specified cluster_id_name       overwritten already exists? verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr(). ... Named optional arguments function specified cluster_fun. data See net. fun Replaced cluster_fun.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partition a Network Graph Into Clusters — addClusterMembership","text":"list net must contain named elements     igraph (class igraph),     adjacency_matrix (matrix     dgCMatrix encoding edge connections),     node_data (data.frame containing node metadata),     corresponding network. lists returned     buildRepSeqNetwork()     generateNetworkObjects()     examples valid inputs net argument. Alternatively, igraph may passed net node     metadata data. However, alternative functionality     deprecated eventually removed. clustering algorithm used partition network graph clusters     (densely-connected subgraphs). cluster represents collection     clones/cells similar receptor sequences. method used partition     graph depends choice clustering algorithm, specified     using cluster_fun argument. available options cluster_fun listed . refers     igraph function implementing     particular clustering algorithm. Follow links learn     individual clustering algorithms.  \"edge_betweenness\" \"fast_greedy\" \"infomap\" \"label_prop\" \"leading_eigen\" \"leiden\" \"louvain\" \"optimal\" \"spinglass\" \"walktrap\" Optional arguments clustering algorithm can     values specified using ellipses (...) argument     addClusterMembership(). cluster assigned numeric cluster ID. cluster membership variable,     whose name specified cluster_id_name, added node     metadata, encoding cluster membership node row. cluster     membership encoded cluster ID number cluster node     belongs. overwrite argument controls whether overwrite pre-existing data.     variable specified cluster_id_name already present     node metadata, overwrite must set TRUE     order perform clustering overwrite variable new cluster     membership values. Alternatively, specifying value     cluster_id_name among variables node metadata,     new cluster membership variable can created preserving old     cluster membership variable. manner, clustering can performed     multiple times network using different clustering algorithms,     without losing results.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partition a Network Graph Into Clusters — addClusterMembership","text":"variable specified cluster_id_name present  net$node_data, returns copy net variable     added net$node_data encoding cluster membership network     node corresponding row. variable already present  overwrite = TRUE, values replaced new values     cluster membership. Additionally, net contains list named details,     following elements added net$details     already exist: clusters_in_network named numeric vector length 1. first entry's name         name clustering algorithm, value number clusters         resulting performing clustering network. cluster_id_variable named numeric vector length 1. first entry's name         name clustering algorithm, value name         corresponding cluster membership variable node metadata         (.e., value cluster_id_name). net$details already contains elements, updated     according whether cluster membership variable specified  cluster_id_name added net$node_data already exists overwritten.     former case (cluster membership variable already exist),     length vector     (clusters_in_network) (cluster_id_variable)     increased 1, new information appended new named entry     . latter case (cluster membership variable overwritten),     new information overwrites name value last entry     vector. event overwrite = FALSE net$node_data contains     variable name value cluster_id_name,     unaltered copy net returned message notifying user. alternative (deprecated) input format node metadata     passed data igraph passed net,     node metadata returned instead list network objects,     cluster membership variable added updated described .","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Partition a Network Graph Into Clusters — addClusterMembership","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Partition a Network Graph Into Clusters — addClusterMembership","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partition a Network Graph Into Clusters — addClusterMembership","text":"","code":"set.seed(42) toy_data <- simulateToyData()  net <- generateNetworkObjects(   toy_data, \"CloneSeq\" )  # Perform cluster analysis, # add cluster membership to net$node_data net <- addClusterMembership(net)  net$details$clusters_in_network #> fast_greedy  #>          20  net$details$cluster_id_variable #>  fast_greedy  #> \"cluster_id\"   # overwrite values in net$node_data$cluster_id # with cluster membership values obtained using \"cluster_leiden\" algorithm net <- addClusterMembership(   net,   cluster_fun = \"leiden\",   overwrite = TRUE )  net$details$clusters_in_network #> leiden  #>     53  net$details$cluster_id_variable #>       leiden  #> \"cluster_id\"   # perform clustering using \"cluster_louvain\" algorithm # saves cluster membership values to net$node_data$cluster_id_louvain # (net$node_data$cluster_id retains membership values from \"cluster_leiden\") net <- addClusterMembership(   net,   cluster_fun = \"louvain\",   cluster_id_name = \"cluster_id_louvain\", )  net$details$clusters_in_network #>  leiden louvain  #>      53      20  net$details$cluster_id_variable #>               leiden              louvain  #>         \"cluster_id\" \"cluster_id_louvain\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cluster-Level Network Properties — addClusterStats","title":"Compute Cluster-Level Network Properties — addClusterStats","text":"Given list network objects returned     buildRepSeqNetwork()     generateNetworkObjects(),     computes cluster-level network properties,     performing clustering first needed.     list network objects returned     cluster properties added data frame.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cluster-Level Network Properties — addClusterStats","text":"","code":"addClusterStats(   net,   cluster_id_name = \"cluster_id\",   seq_col = NULL,   count_col = NULL,   degree_col = \"degree\",   cluster_fun = \"fast_greedy\",   overwrite = FALSE,   verbose = FALSE,   ... )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cluster-Level Network Properties — addClusterStats","text":"net list network objects conforming output       buildRepSeqNetwork()       generateNetworkObjects().       See details. cluster_id_name character string specifying name cluster membership variable       net$node_data identifies cluster node belongs.       variable exist, added calling       addClusterMembership().       variable exist, values used       unless overwrite = TRUE,       case values overwritten new values used. seq_col Specifies column(s) net$node_data containing       receptor sequences upon whose similarity network based.       Accepts character numeric vector length 1 2,       containing either column names column indices.       provided, related cluster-level properties computed.       default NULL use value contained       net$details$seq_col exists valid. count_col Specifies column net$node_data containing       measure abundance (clone count UMI count).       Accepts character string containing column name       numeric scalar containing column index.       provided,  related cluster-level properties computed. degree_col Specifies column net$node_data containing       network degree node.       Accepts character string containing column name.       column exist, added. cluster_fun character string specifying clustering algorithm use       adding overwriting cluster membership variable       net$node_data specified cluster_id_name.       Passed addClusterMembership(). overwrite Logical. TRUE net already contains element named       cluster_data, overwritten. Similarly,       overwrite = TRUE net$node_data contains variable whose       name matches value cluster_id_name, values       overwritten new cluster membership values (obtained using       addClusterMembership()       specified value cluster_fun),       cluster properties computed based new values. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr(). ... Named optional arguments function specified cluster_fun.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Cluster-Level Network Properties — addClusterStats","text":"list net must contain named elements     igraph (class igraph),     adjacency_matrix (matrix     dgCMatrix encoding edge connections),     node_data (data.frame containing node metadata),     corresponding network. lists returned     buildRepSeqNetwork()     generateNetworkObjects()     examples valid inputs net argument. network graph previously partitioned clusters using     addClusterMembership() user     wishes compute network properties clusters, name     cluster membership variable net$node_data provided     cluster_id_name argument. value cluster_id_name name variable     net$node_data, clustering performed using     addClusterMembership()     specified value cluster_fun,     cluster membership values written net$node_data using     value cluster_id_name variable name.     overwrite = TRUE, done even variable already exists.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cluster-Level Network Properties — addClusterStats","text":"modified copy net, cluster properties contained element  cluster_data. data.frame containing   one row cluster network following variables: cluster_id cluster ID number. node_count number nodes cluster. mean_seq_length mean sequence length cluster.   present length(seq_col) == 1. A_mean_seq_length mean first sequence length cluster.   present length(seq_col) == 2. B_mean_seq_length mean second sequence length cluster.   present length(seq_col) == 2. mean_degree mean network degree cluster. max_degree maximum network degree cluster. seq_w_max_degree receptor sequence possessing maximum degree within cluster.   present length(seq_col) == 1. A_seq_w_max_degree first sequence node possessing maximum degree within cluster.   present length(seq_col) == 2. B_seq_w_max_degree second sequence node possessing maximum degree within cluster.   present length(seq_col) == 2. agg_count aggregate count among nodes cluster (based counts   count_col). max_count maximum count among nodes cluster (based counts   count_col). seq_w_max_count receptor sequence possessing maximum count within cluster.   present length(seq_col) == 1. A_seq_w_max_count first sequence node possessing maximum count within cluster.   present length(seq_col) == 2. B_seq_w_max_count second sequence node possessing maximum count within cluster.   present length(seq_col) == 2. diameter_length longest geodesic distance cluster, computed length   vector returned get_diameter(). assortativity assortativity coefficient cluster's graph, based degree   (minus one) node cluster (degree computed based   upon nodes within cluster). Computed using   assortativity_degree(). global_transitivity transitivity (.e., clustering coefficient) cluster's graph,   estimates probability adjacent vertices connected. Computed using   transitivity() type = \"global\". edge_density number edges cluster fraction maximum possible number   edges. Computed using edge_density(). degree_centrality_index centrality index cluster's graph based within-cluster network degree.   Computed centralization element output   centr_degree(). closeness_centrality_index centrality index cluster's graph based closeness,   .e., distance nodes cluster.   Computed using centralization(). eigen_centrality_index centrality index cluster's graph based eigenvector centrality scores,   .e., values first eigenvector adjacency matrix cluster.   Computed centralization element output   centr_eigen(). eigen_centrality_eigenvalue eigenvalue corresponding first eigenvector adjacency matrix   cluster. Computed value element output   eigen_centrality(). net$node_data previously contain variable whose name matches   value cluster_id_name, variable present   contain values cluster membership, obtained call  addClusterMembership() using clustering algorithm specified cluster_fun. net$node_data previously contain variable whose name matches   value cluster_id_name overwrite = TRUE,   values variable overwritten new values cluster membership,   obtained based cluster_fun. net$node_data previously contain variable whose name matches   value degree_col, variable present   contain values network degree. Additionally, net contains list named details,   following elements added net$details, overwritten   already exist: cluster_data_goes_with character string containing value cluster_id_name.       net$node_data contains multiple cluster membership variables       (e.g., applying different clustering methods),       cluster_data_goes_with allows user       distinguish variables corresponds       net$cluster_data. count_col_for_cluster_data character string containing value count_col.       net$node_data contains multiple count variables, allows       user distinguish variables corresponds       count-related properties net$cluster_data,       max_count.       count_col = NULL, value NA.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterStats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Cluster-Level Network Properties — addClusterStats","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Cluster-Level Network Properties — addClusterStats","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Cluster-Level Network Properties — addClusterStats","text":"","code":"set.seed(42) toy_data <- simulateToyData()  net <- generateNetworkObjects(   toy_data, \"CloneSeq\" )  net <- addClusterStats(   net,   count_col = \"CloneCount\" )  head(net$cluster_data) #>   cluster_id node_count eigen_centrality_eigenvalue eigen_centrality_index #> 1          1         14                    3.627940              0.6572455 #> 2          2         28                   11.831606              0.5524239 #> 3          3          9                    2.238772              0.6748055 #> 4          4          6                    2.278414              0.5237142 #> 5          5          6                    2.228328              0.5707806 #> 6          6         25                    5.885769              0.6291788 #>   closeness_centrality_index degree_centrality_index edge_density #> 1                  0.5584465               0.3076923    0.2307692 #> 2                  0.4703335               0.3333333    0.2962963 #> 3                  0.2311674               0.1250000    0.2500000 #> 4                  0.4266234               0.2000000    0.4000000 #> 5                  0.3301948               0.2000000    0.4000000 #> 6                  0.4012791               0.1983333    0.1766667 #>   global_transitivity assortativity diameter_length max_degree mean_degree #> 1           0.5454545   -0.13886606               5          9        3.36 #> 2           0.6084437   -0.05857037               6         18        8.43 #> 3           0.2727273   -0.68750000               7          4        2.22 #> 4           0.3750000   -0.50000000               4          9        3.33 #> 5           0.4285714   -0.09090909               5          3        2.17 #> 6           0.3435115   -0.14219251               6         10        4.60 #>   mean_seq_length seq_w_max_degree max_count agg_count seq_w_max_count #> 1           13.00    AAAAAAAAATTGC      4618     52760   AGAAGAAAATTGC #> 2           12.96    GGGGGGGAATTGG      6526    115851   GGGGGGGAATTGG #> 3           12.67     AGAAGAAAATTC      4422     28477   GAAATAGAATTCG #> 4           13.00    GGGGGGAAATTGG      5873     23120   AGGGGGAAATTGG #> 5           12.00     AGGGAGGAATTC      5728     24291    AGGGGGGAATTC #> 6           12.00     AAAAAAAAATTG      5393     89616    GAAAAAAAATTC net$details #> $seq_col #> [1] \"CloneSeq\" #>  #> $dist_type #> [1] \"hamming\" #>  #> $dist_cutoff #> [1] 1 #>  #> $drop_isolated_nodes #> [1] TRUE #>  #> $nodes_in_network #> [1] 122 #>  #> $clusters_in_network #> fast_greedy  #>          20  #>  #> $cluster_id_variable #>  fast_greedy  #> \"cluster_id\"  #>  #> $cluster_data_goes_with #> [1] \"cluster_id\" #>  #> $count_col_for_cluster_data #> [1] \"CloneCount\" #>   # won't change net since net$cluster_data exists net <- addClusterStats(   net,   count_col = \"CloneCount\",   cluster_fun = \"leiden\",   verbose = TRUE ) #> Obtaining cluster properties... #> ‘net$cluster_data’ already exists. #> To overwrite, call ‘addClusterStats()’ with ‘overwrite = TRUE’  # overwrites values in net$cluster_data # and cluster membership values in net$node_data$cluster_id # with values obtained using \"cluster_leiden\" algorithm net <- addClusterStats(   net,   count_col = \"CloneCount\",   cluster_fun = \"leiden\",   overwrite = TRUE )  net$details #> $seq_col #> [1] \"CloneSeq\" #>  #> $dist_type #> [1] \"hamming\" #>  #> $dist_cutoff #> [1] 1 #>  #> $drop_isolated_nodes #> [1] TRUE #>  #> $nodes_in_network #> [1] 122 #>  #> $clusters_in_network #> leiden  #>     57  #>  #> $cluster_id_variable #>       leiden  #> \"cluster_id\"  #>  #> $cluster_data_goes_with #> [1] \"cluster_id\" #>  #> $count_col_for_cluster_data #> [1] \"CloneCount\" #>   # overwrites existing values in net$cluster_data # with values obtained using \"cluster_louvain\" algorithm # saves cluster membership values to net$node_data$cluster_id_louvain # (net$node_data$cluster_id retains membership values from \"cluster_leiden\") net <- addClusterStats(   net,   count_col = \"CloneCount\",   cluster_fun = \"louvain\",   cluster_id_name = \"cluster_id_louvain\",   overwrite = TRUE )  net$details #> $seq_col #> [1] \"CloneSeq\" #>  #> $dist_type #> [1] \"hamming\" #>  #> $dist_cutoff #> [1] 1 #>  #> $drop_isolated_nodes #> [1] TRUE #>  #> $nodes_in_network #> [1] 122 #>  #> $clusters_in_network #>  leiden louvain  #>      57      19  #>  #> $cluster_id_variable #>               leiden              louvain  #>         \"cluster_id\" \"cluster_id_louvain\"  #>  #> $cluster_data_goes_with #> [1] \"cluster_id_louvain\" #>  #> $count_col_for_cluster_data #> [1] \"CloneCount\" #>   # perform clustering using \"cluster_fast_greedy\" algorithm, # save cluster membership values to net$node_data$cluster_id_greedy net <- addClusterMembership(   net,   cluster_fun = \"fast_greedy\",   cluster_id_name = \"cluster_id_greedy\" )  # compute cluster properties for the clusters from previous step # overwrites values in net$cluster_data net <- addClusterStats(   net,   cluster_id_name = \"cluster_id_greedy\",   overwrite = TRUE )  net$details #> $seq_col #> [1] \"CloneSeq\" #>  #> $dist_type #> [1] \"hamming\" #>  #> $dist_cutoff #> [1] 1 #>  #> $drop_isolated_nodes #> [1] TRUE #>  #> $nodes_in_network #> [1] 122 #>  #> $clusters_in_network #>      leiden     louvain fast_greedy  #>          57          19          20  #>  #> $cluster_id_variable #>               leiden              louvain          fast_greedy  #>         \"cluster_id\" \"cluster_id_louvain\"  \"cluster_id_greedy\"  #>  #> $cluster_data_goes_with #> [1] \"cluster_id_greedy\" #>  #> $count_col_for_cluster_data #> [1] NA #>"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Label Nodes in a Network Graph Plot — labelNodes","title":"Label Nodes in a Network Graph Plot — labelNodes","text":"Functions annotating graph plot add custom labels nodes.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label Nodes in a Network Graph Plot — labelNodes","text":"","code":"labelNodes(   net,   node_labels,   plots = NULL,   size = 5,   color = \"black\" )  addGraphLabels(   plot,   node_labels,   size = 5,   color = \"black\" )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label Nodes in a Network Graph Plot — labelNodes","text":"net list network objects conforming output       buildRepSeqNetwork()       generateNetworkObjects().       See details. plot ggraph object containing network graph plot. node_labels vector containing node labels, entry label   single node. length match number nodes plot. plots Specifies plots net$plots annotate.   Accepts character vector element names numeric vector element   position indices.   default NULL annotates plots. size font size node labels. Passed size argument   geom_node_text(). color color node labels. Passed size argument   geom_node_text().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label Nodes in a Network Graph Plot — labelNodes","text":"list net must contain named elements   igraph (class igraph),   adjacency_matrix (matrix   dgCMatrix encoding edge connections),   node_data (data.frame containing node metadata),   corresponding network. lists returned   buildRepSeqNetwork()   generateNetworkObjects()   examples valid inputs net argument. Labels added using   geom_node_text().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label Nodes in a Network Graph Plot — labelNodes","text":"labelNodes() returns copy net specified plots   annotated.  addGraphLabels() returns   ggraph object containing original plot annotated   node labels.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Label Nodes in a Network Graph Plot — labelNodes","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Label Nodes in a Network Graph Plot — labelNodes","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label Nodes in a Network Graph Plot — labelNodes","text":"","code":"set.seed(42) toy_data <-   simulateToyData(     samples = 1,     sample_size = 10,     prefix_length = 1   )  # Generate network network <-   buildNet(     toy_data,     seq_col = \"CloneSeq\",     plot_title = NULL,     plot_subtitle = NULL   )  # Label each node with its receptor sequence network <- labelNodes(network, \"CloneSeq\", size = 3)  network$plots[[1]]"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Node-Level Network Properties — addNodeNetworkStats","title":"Compute Node-Level Network Properties — addNodeNetworkStats","text":"Given node metadata igraph network,   computes specified set network properties network nodes.   node metadata returned   property added variable. function deprecated favor   addNodeStats()   NAIR 1.0.1.   new function accepts returns entire list network   objects returned buildRepSeqNetwork()   generateNetworkObjects().   can compute cluster membership add values node metadata.   additionally updates list element details   information linking node-level cluster-level metadata.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Node-Level Network Properties — addNodeNetworkStats","text":"","code":"addNodeNetworkStats(   data,   net,   stats_to_include = chooseNodeStats(),   cluster_fun = \"fast_greedy\",   cluster_id_name = \"cluster_id\",   overwrite = FALSE,   verbose = FALSE,   ... )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Node-Level Network Properties — addNodeNetworkStats","text":"data data frame containing node-level metadata network,       row corresponding network node. net network igraph. stats_to_include Specifies network properties compute.       Accepts vector created using       chooseNodeStats()       exclusiveNodeStats(),       character string \"\" compute network properties. cluster_fun character string specifying clustering algorithm use       computing cluster membership.       Applicable stats_to_include = \"\"       stats_to_include[\"cluster_id\"] TRUE.       Passed addClusterMembership(). cluster_id_name character string specifying name cluster membership variable       added data.       Applicable stats_to_include = \"\"       stats_to_include[\"cluster_id\"] TRUE.       Passed addClusterMembership(). overwrite Logical. TRUE data contains variable whose       name matches value cluster_id_name, values       overwritten new cluster membership values (obtained using       addClusterMembership()       specified value cluster_fun).       Applicable stats_to_include = \"\"       stats_to_include[\"cluster_id\"] TRUE. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr(). ... Named optional arguments function specified cluster_fun.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Node-Level Network Properties — addNodeNetworkStats","text":"Node-level network properties properties pertain individual   node network graph. local properties, meaning value given node depends   subset nodes network. One example network degree   given node, represents number nodes directly joined   given node edge connection. properties global properties, meaning value given node   depends nodes network. example authority score   node, computed using entire graph adjacency matrix (denote   matrix \\(\\), principal eigenvector \\(^T \\) represents   authority scores network nodes). See chooseNodeStats()   list available node-level network properties.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Node-Level Network Properties — addNodeNetworkStats","text":"copy data additional column   new network property computed.   See chooseNodeStats() network property names,   used column names,   except cluster membership variable,   whose name value cluster_id_name.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Node-Level Network Properties — addNodeNetworkStats","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Node-Level Network Properties — addNodeNetworkStats","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Node-Level Network Properties — addNodeNetworkStats","text":"","code":"set.seed(42) toy_data <- simulateToyData()  net <-   generateNetworkObjects(     toy_data,     \"CloneSeq\"   )  net$node_data <-   addNodeNetworkStats(     net$node_data,     net$igraph   ) #> Warning: `addNodeNetworkStats()` was deprecated in NAIR 1.0.1. #> ℹ Please use `addNodeStats()` instead."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Node-Level Network Properties — addNodeStats","title":"Compute Node-Level Network Properties — addNodeStats","text":"Given list network objects returned   buildRepSeqNetwork()   generateNetworkObjects(),   computes specified set network properties network nodes.   list network objects returned   property added variable node metadata.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Node-Level Network Properties — addNodeStats","text":"","code":"addNodeStats(   net,   stats_to_include = chooseNodeStats(),   cluster_fun = \"fast_greedy\",   cluster_id_name = \"cluster_id\",   overwrite = FALSE,   verbose = FALSE,   ... )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Node-Level Network Properties — addNodeStats","text":"net list network objects conforming output       buildRepSeqNetwork()       generateNetworkObjects().       See details. stats_to_include Specifies network properties compute.       Accepts vector created using       chooseNodeStats()       exclusiveNodeStats(),       character string \"\" compute network properties. cluster_fun character string specifying clustering algorithm use       computing cluster membership.       Applicable stats_to_include = \"\"       stats_to_include[\"cluster_id\"] TRUE.       Passed addClusterMembership(). cluster_id_name character string specifying name cluster membership variable       added node metadata.       Applicable stats_to_include = \"\"       stats_to_include[\"cluster_id\"] TRUE.       Passed addClusterMembership(). overwrite Logical. TRUE net$node_data contains variable whose       name matches value cluster_id_name, values       overwritten new cluster membership values (obtained using       addClusterMembership(),       values cluster_fun, overwrite).       Applicable stats_to_include = \"\"       stats_to_include[\"cluster_id\"] TRUE. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr(). ... Named optional arguments function specified cluster_fun.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Node-Level Network Properties — addNodeStats","text":"Node-level network properties properties pertain individual   node network graph. local properties, meaning value given node depends   subset nodes network. One example network degree   given node, represents number nodes directly joined   given node edge connection. properties global properties, meaning value given node   depends nodes network. example authority score   node, computed using entire graph adjacency matrix (denote   matrix \\(\\), principal eigenvector \\(^T \\) represents   authority scores network nodes). See chooseNodeStats()   list available node-level network properties. list net must contain named elements   igraph (class igraph),   adjacency_matrix (matrix   dgCMatrix encoding edge connections),   node_data (data.frame containing node metadata),   corresponding network. lists returned   buildRepSeqNetwork()   generateNetworkObjects()   examples valid inputs net argument.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Node-Level Network Properties — addNodeStats","text":"modified copy net,   net$node_data containing additional column   new network property computed.   See chooseNodeStats() network property names,   used column names,   except cluster membership variable,   whose name value cluster_id_name.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeStats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Node-Level Network Properties — addNodeStats","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Node-Level Network Properties — addNodeStats","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Node-Level Network Properties — addNodeStats","text":"","code":"set.seed(42) toy_data <- simulateToyData()  net <- generateNetworkObjects(   toy_data, \"CloneSeq\" )  # Add default set of node properties net <- addNodeStats(net)  # Modify default set of node properties net <- addNodeStats(   net,   stats_to_include =     chooseNodeStats(       closeness = TRUE,       page_rank = FALSE     ) )  # Add only the spepcified node properties net <- addNodeStats(   net,   stats_to_include =     exclusiveNodeStats(       degree = TRUE,       transitivity = TRUE     ) )  # Add all node-level network properties net <- addNodeStats(   net,   stats_to_include = \"all\" )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Plots of a Network Graph — addPlots","title":"Generate Plots of a Network Graph — addPlots","text":"Generates one   ggraph plots network graph according user   specifications. addPlots() accepts returns list network objects, adding   plots existing list contents. list already contains plots,   new plots created using coordinate layout   existing plots. generateNetworkGraphPlots() accepts network   igraph node metadata,   returns list containing plots.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Plots of a Network Graph — addPlots","text":"","code":"addPlots(   net,   print_plots = FALSE,   plot_title = NULL,   plot_subtitle = \"auto\",   color_nodes_by = NULL,   color_scheme = \"default\",   color_legend = \"auto\",   color_title = \"auto\",   edge_width = 0.1,   size_nodes_by = 0.5,   node_size_limits = NULL,   size_title = \"auto\",   verbose = FALSE )  generateNetworkGraphPlots(   igraph,   data,   print_plots = FALSE,   plot_title = NULL,   plot_subtitle = NULL,   color_nodes_by = NULL,   color_scheme = \"default\",   color_legend = \"auto\",   color_title = \"auto\",   edge_width = 0.1,   size_nodes_by = 0.5,   node_size_limits = NULL,   size_title = \"auto\",   layout = NULL,   verbose = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Plots of a Network Graph — addPlots","text":"net list network objects conforming output       buildRepSeqNetwork()       generateNetworkObjects().       See details. igraph igraph object containing network graph plotted. data data frame containing node metadata network, row   corresponding node. print_plots logical scalar; plots printed R plotting window? plot_title character string containing plot title. plot_subtitle character string containing plot subtitle. default value       \"auto\" generates subtitle describing settings used       construct network,       including distance type distance cutoff. color_nodes_by vector specifying one node metadata variables used encode   color nodes. One plot generated entry, plot   coloring nodes according variable corresponding entry.   argument accepts character vector entry   column name node metadata.   argument NULL, generates single plot uncolored nodes. color_scheme character string specifying color scale use plots,   character vector whose length matches color_nodes_by,   entry specifying color scale corresponding plot.   \"default\" specifies default   ggplot() color scale.   options one viridis color scales (e.g., \"plasma\",   \"\" valid inputs option argument   scale_color_viridis())   (discrete variables) palette   hcl.pals() (e.g., \"RdYlGn\").   viridis color scales can include suffix \"-1\"   reverse direction (e.g., \"plasma-1\" \"-1\"). color_legend logical scalar specifying whether display color legend plots.     default value \"auto\" shows color legend nodes colored     according continuous variable     according discrete variable 20 distinct values. color_title character string specifying title color legend plots,   character vector whose length matches color_nodes_by,   entry specifying title color legend corresponding plot.   applicable plots colored nodes.   value \"auto\" uses corresponding value color_nodes_by. edge_width numeric scalar specifying width graph edges plot.       Passed width argument       geom_edge_link0(). size_nodes_by numeric scalar specifying size nodes plots, column   name node metadata variable used encode size nodes   plots. Alternatively, argument value NULL uses default   ggraph size nodes. Passed size aesthetic   mapping geom_node_point(). node_size_limits numeric vector length 2, specifying minimum maximum node size.     applicable nodes sized according variable.     node_size_limits = NULL, default size scale used. size_title character string (NULL) specifying title size legend.     applicable nodes sized according variable.     value \"auto\" uses value size_nodes_by. layout matrix specifying coordinate layout network nodes,   one row node network two columns.   row specifies x y coordinates corresponding node.   NULL, layout matrix created using   [igraph:layout_components]{layout_components()}.   argument can used   create plots conforming layout previously-generated plots.   can also used generate plots custom layouts. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addPlots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Plots of a Network Graph — addPlots","text":"list net must contain named elements     igraph (class igraph),     adjacency_matrix (matrix     dgCMatrix encoding edge connections),     node_data (data.frame containing node metadata),     corresponding network. lists returned     buildRepSeqNetwork()     generateNetworkObjects()     examples valid inputs net argument. arguments color_nodes_by size_nodes_by accept     names variables node metadata.     addPlots(), data frame node_data     contained list provided net argument.     generateNetworkGraphPlots(), data frame provided     data argument. addPlots() adds generated plots list plots contained     list network objects provided net.     plots element created already exist.     plots already exist, new plots generated     coordinate layout existing plots.     plot named according variable used color nodes.     plot already exists name one new plots,     overwritten new plot.     plots list already contain element named     graph_layout, added. element contains coordinate     layout plots two-column matrix. calling generateNetworkGraphPlots(), one wishes plots     generated coordinate layout existing plot,     layout matrix existing plot must passed layout     argument. plots can printed pdf using     saveNetworkPlots().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Plots of a Network Graph — addPlots","text":"addPlots() returns modified copy net new plots   contained element named plots (list), addition   previously existing plots.  generateNetworkGraphPlots() returns list containing new plots. plot object class ggraph. Within list plots,   plot named variable used color nodes.   plot uncolored nodes, name uniform_color. list containing new plots also contains element named  graph_layout.   matrix specifying coordinate layout nodes plots.   contains one row node   network two columns. row specifies x y coordinates   corresponding node. matrix can used generate additional plots   layout plots returned list.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addPlots.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate Plots of a Network Graph — addPlots","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package Network Visualization article package website","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addPlots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Plots of a Network Graph — addPlots","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Plots of a Network Graph — addPlots","text":"","code":"set.seed(42) toy_data <- simulateToyData()  net <- buildNet(toy_data, \"CloneSeq\", node_stats = TRUE)  net <- addPlots(   net,   color_nodes_by =     c(\"SampleID\", \"transitivity\", \"coreness\"),   color_scheme =     c(\"Set 2\", \"mako-1\", \"plasma-1\"),   color_title =     c(\"\", \"Transitvity\", \"Coreness\"),   size_nodes_by = \"degree\",   node_size_limits = c(0.1, 1.5),   plot_subtitle = NULL,   print_plots = TRUE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","title":"Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"Given bulk Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data     clones indexed row, returns data frame containing one row     unique receptor sequence. Includes number clones sharing sequence,     well aggregate values clone count clone frequency across     clones sharing sequence. Clones can grouped according metadata,     case aggregation performed within (across) groups.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"","code":"aggregateIdenticalClones(   data,   clone_col,   count_col,   freq_col,   grouping_cols = NULL,   verbose = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"data data frame containing bulk AIRR-Seq data, clones indexed row. clone_col Specifies column data containing       receptor sequences.       Accepts character string containing column name       numeric scalar containing column index. count_col Specifies column data containing       clone counts.       Accepts character string containing column name       numeric scalar containing column index. freq_col Specifies column data containing       clone frequencies.       Accepts character string containing column name       numeric scalar containing column index. grouping_cols optional character vector column names       numeric vector column indices, specifying       one columns data used assign clones groups.       provided, aggregation occurs within groups, across groups.       See details. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"grouping_cols left unspecified, returned data frame contain   one row unique receptor sequence appearing data. one columns data specified using grouping_cols   argument, clone (row) data assigned group based   combination values columns. two clones share receptor sequence   belong different groups, receptor sequence appear multiple times   returned data frame, one row group sequence appears.   row, aggregate clone count, aggregate clone frequency, number   clones sharing sequence reported within group row.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"data frame whose first column contains receptor sequences     name column data specified clone_col. One     additional column present column data     specified using grouping_cols argument,     column name. remaining columns follows: AggregatedCloneCount aggregate clone count across clones (within     group, applicable) share receptor sequence row. AggregatedCloneFrequency aggregate clone frequency across clones     (within group, applicable) share receptor sequence row. UniqueCloneCount number clones (rows) data (within     group, applicable) possessing receptor sequence current row.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"","code":"my_data <- data.frame(   clone_seq = c(\"ATCG\", rep(\"ACAC\", 2), rep(\"GGGG\", 4)),   clone_count = rep(1, 7),   clone_freq = rep(1/7, 7),   time_point = c(\"t_0\", rep(c(\"t_0\", \"t_1\"), 3)),   subject_id = c(rep(1, 5), rep(2, 2)) ) my_data #>   clone_seq clone_count clone_freq time_point subject_id #> 1      ATCG           1  0.1428571        t_0          1 #> 2      ACAC           1  0.1428571        t_0          1 #> 3      ACAC           1  0.1428571        t_1          1 #> 4      GGGG           1  0.1428571        t_0          1 #> 5      GGGG           1  0.1428571        t_1          1 #> 6      GGGG           1  0.1428571        t_0          2 #> 7      GGGG           1  0.1428571        t_1          2  aggregateIdenticalClones(   my_data,   \"clone_seq\",   \"clone_count\",   \"clone_freq\", ) #>   clone_seq AggregatedCloneCount AggregatedCloneFrequency UniqueCloneCount #> 1      ACAC                    2                0.2857143                1 #> 2      ATCG                    1                0.1428571                1 #> 3      GGGG                    4                0.5714286                1  # group clones by time point aggregateIdenticalClones(   my_data,   \"clone_seq\",   \"clone_count\",   \"clone_freq\",   grouping_cols = \"time_point\" ) #>   clone_seq time_point AggregatedCloneCount AggregatedCloneFrequency #> 1      ACAC        t_0                    1                0.1428571 #> 2      ACAC        t_1                    1                0.1428571 #> 3      ATCG        t_0                    1                0.1428571 #> 4      GGGG        t_0                    2                0.2857143 #> 5      GGGG        t_1                    2                0.2857143 #>   UniqueCloneCount #> 1                1 #> 2                1 #> 3                1 #> 4                1 #> 5                1  # group clones by subject ID aggregateIdenticalClones(   my_data,   \"clone_seq\",   \"clone_count\",   \"clone_freq\",   grouping_cols = \"subject_id\" ) #>   clone_seq subject_id AggregatedCloneCount AggregatedCloneFrequency #> 1      ACAC          1                    2                0.2857143 #> 2      ATCG          1                    1                0.1428571 #> 3      GGGG          1                    2                0.2857143 #> 4      GGGG          2                    2                0.2857143 #>   UniqueCloneCount #> 1                1 #> 2                1 #> 3                1 #> 4                1  # group clones by time point and subject ID aggregateIdenticalClones(   my_data,   \"clone_seq\",   \"clone_count\",   \"clone_freq\",   grouping_cols =     c(\"subject_id\", \"time_point\") ) #>   clone_seq subject_id time_point AggregatedCloneCount AggregatedCloneFrequency #> 1      ACAC          1        t_0                    1                0.1428571 #> 2      ACAC          1        t_1                    1                0.1428571 #> 3      ATCG          1        t_0                    1                0.1428571 #> 4      GGGG          1        t_0                    1                0.1428571 #> 5      GGGG          1        t_1                    1                0.1428571 #> 6      GGGG          2        t_0                    1                0.1428571 #> 7      GGGG          2        t_1                    1                0.1428571 #>   UniqueCloneCount #> 1                1 #> 2                1 #> 3                1 #> 4                1 #> 5                1 #> 6                1 #> 7                1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Global Network of Associated TCR/BCR Clusters — buildAssociatedClusterNetwork","title":"Build Global Network of Associated TCR/BCR Clusters — buildAssociatedClusterNetwork","text":"Part workflow Searching Associated TCR/BCR Clusters. Intended use following findAssociatedClones(). Given data containing neighborhood similar clones around associated sequence, combines data global network performs network analysis cluster analysis.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Global Network of Associated TCR/BCR Clusters — buildAssociatedClusterNetwork","text":"","code":"buildAssociatedClusterNetwork(   file_list,   input_type = \"rds\",   data_symbols = \"data\", header = TRUE, sep,   read.args = list(row.names = 1),   seq_col,   min_seq_length = NULL,   drop_matches = NULL,   drop_isolated_nodes = FALSE,   node_stats = TRUE,   stats_to_include =     chooseNodeStats(cluster_id = TRUE),   cluster_stats = TRUE,   color_nodes_by = \"GroupID\",   output_name = \"AssociatedClusterNetwork\",   verbose = FALSE,   ... )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Global Network of Associated TCR/BCR Clusters — buildAssociatedClusterNetwork","text":"file_list character vector file paths, list containing   connections file paths.   element corresponds single file containing data   single sample.   Passed loadDataFromFileList(). input_type character string specifying file format neighborhood data files.   Options \"table\", \"txt\", \"tsv\", \"csv\",   \"rds\" \"rda\".   Passed loadDataFromFileList(). data_symbols Used input_type = \"rda\". Specifies name neighborhood's   data frame within respective Rdata file.  Passed   loadDataFromFileList(). header values input_type \"rds\" \"rda\",     argument used specify value header     argument read.table(),     read.csv(), etc. sep values input_type \"rds\" \"rda\",     argument can used specify non-default value sep     argument read.table(),     read.csv(), etc. read.args values input_type \"rds\" \"rda\",     argument used specify values optional     arguments read.table(),     read.csv(), etc.     Accepts named list argument values.     Values header sep     list take precedence values specified via header     sep arguments. seq_col Specifies column neighborhood's data frame containing     TCR/BCR sequences.     Accepts character string containing column name       numeric scalar containing column index. min_seq_length Passed buildRepSeqNetwork()   constructing global network. drop_matches Passed buildRepSeqNetwork()   constructing global network. drop_isolated_nodes Passed buildRepSeqNetwork()   constructing global network. node_stats Passed buildRepSeqNetwork()   constructing global network. stats_to_include Passed buildRepSeqNetwork()   constructing global network. cluster_stats Passed buildRepSeqNetwork()   constructing global network. color_nodes_by Passed buildRepSeqNetwork()   constructing global network. output_name Passed buildRepSeqNetwork()   constructing global network. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr(). ... arguments buildRepSeqNetwork()   constructing global network.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Global Network of Associated TCR/BCR Clusters — buildAssociatedClusterNetwork","text":"associated sequence's neighborhood contains clones (samples) TCR/BCR sequences similar associated sequence. neighborhoods assumed previously identified using findAssociatedClones(). neighborhood data associated sequences used construct single global network. Cluster analysis used partition global network clusters, considered associated TCR/BCR clusters. Network properties nodes clusters computed returned metadata. plot global network graph produced, nodes colored according binary variable interest. See Searching Associated TCR/BCR Clusters article package website details.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Global Network of Associated TCR/BCR Clusters — buildAssociatedClusterNetwork","text":"list network objects returned  buildRepSeqNetwork().     list returned invisibly.     input data contains combined total fewer two rows,     global network contains nodes, function returns NULL,     invisibly, warning.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build Global Network of Associated TCR/BCR Clusters — buildAssociatedClusterNetwork","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package Searching Associated TCR/BCR Clusters article package website","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build Global Network of Associated TCR/BCR Clusters — buildAssociatedClusterNetwork","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Global Network of Associated TCR/BCR Clusters — buildAssociatedClusterNetwork","text":"","code":"set.seed(42)  ## Simulate 30 samples from two groups (treatment/control) ## n_control <- n_treatment <- 15 n_samples <- n_control + n_treatment sample_size <- 30 # (seqs per sample) base_seqs <- # first five are associated with treatment   c(\"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\", \"CASSIEGQLSTDTQYF\",     \"CASSEEGQLSTDTQYF\", \"CASSPEGQLSTDTQYF\",     \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\") # Relative generation probabilities by control/treatment group pgen_c <- matrix(rep(c(rep(1, 5), rep(30, 3)), times = n_control),                  nrow = n_control, byrow = TRUE) pgen_t <- matrix(rep(c(1, 1, rep(1/3, 3), rep(2, 3)), times = n_treatment),                  nrow = n_treatment, byrow = TRUE) pgen <- rbind(pgen_c, pgen_t) simulateToyData(   samples = n_samples,   sample_size = sample_size,   prefix_length = 1,   prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, n_samples), rep(0, n_samples)),   affixes = base_seqs,   affix_probs = pgen,   num_edits = 0,   output_dir = tempdir(),   no_return = TRUE ) #> [1] TRUE  ## Step 1: Find Associated Sequences ## sample_files <-   file.path(tempdir(),             paste0(\"Sample\", 1:n_samples, \".rds\")   ) group_labels <- c(rep(\"reference\", n_control),                   rep(\"comparison\", n_treatment)) associated_seqs <-   findAssociatedSeqs(     file_list = sample_files,     input_type = \"rds\",     group_ids = group_labels,     seq_col = \"CloneSeq\",     min_seq_length = NULL,     drop_matches = NULL,     min_sample_membership = 0,     pval_cutoff = 0.1   ) head(associated_seqs[, 1:5]) #>        ReceptorSeq fisher_pvalue shared_by_n_samples samples_g0 samples_g1 #> 8   CSVDLGKGNNEQFF  1.052106e-05                  18          3         15 #> 7      CASSGAYEQYF  1.157316e-04                  17          3         14 #> 4 CASSEEGQLSTDTQYF  5.197401e-03                  10          1          9 #> 5 CASSIEGQLSTDTQYF  6.559548e-02                  16          5         11  ## Step 2: Find Associated Clones ## dir_step2 <- tempfile() findAssociatedClones(   file_list = sample_files,   input_type = \"rds\",   group_ids = group_labels,   seq_col = \"CloneSeq\",   assoc_seqs = associated_seqs$ReceptorSeq,   min_seq_length = NULL,   drop_matches = NULL,   output_dir = dir_step2 )  ## Step 3: Global Network of Associated Clusters ## associated_clusters <-   buildAssociatedClusterNetwork(     file_list = list.files(dir_step2,                            full.names = TRUE     ),     seq_col = \"CloneSeq\",     size_nodes_by = 1.5,     print_plots = TRUE   )   # \\dontshow{ # clean up temp directory file.remove(   file.path(tempdir(),             paste0(\"Sample\", 1:n_samples, \".rds\")   ) ) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE unlink(dir_step2, recursive = TRUE) # }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Global Network of Public TCR/BCR Clusters — buildPublicClusterNetwork","title":"Build Global Network of Public TCR/BCR Clusters — buildPublicClusterNetwork","text":"Part workflow Searching Public TCR/BCR Clusters. Intended use following findPublicClusters(). Given node-level metadata sample's filtered clusters, combines data global network performs network analysis cluster analysis.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Global Network of Public TCR/BCR Clusters — buildPublicClusterNetwork","text":"","code":"buildPublicClusterNetwork(    ## Input ##   file_list,   input_type = \"rds\",   data_symbols = \"ndat\",   header = TRUE, sep,   read.args = list(row.names = 1),   seq_col,    ## Network Settings ##   drop_isolated_nodes = FALSE,   node_stats = deprecated(),   stats_to_include = deprecated(),   cluster_stats = deprecated(),    ## Visualization ##   color_nodes_by = \"SampleID\",   color_scheme = \"turbo\",   plot_title = \"Global Network of Public Clusters\",    ## Output ##   output_dir = NULL,   output_name = \"PublicClusterNetwork\",   verbose = FALSE,    ...  )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Global Network of Public TCR/BCR Clusters — buildPublicClusterNetwork","text":"file_list character vector file paths, list containing   connections file paths.   element corresponds single file containing data   single sample.   loadDataFromFileList(). input_type character string specifying file format input files. Options   \"csv\", \"rds\" \"rda\". Passed   loadDataFromFileList(). data_symbols Used input_type = \"rda\". Specifies name data frame within   Rdata file. Passed   loadDataFromFileList(). header values input_type \"rds\" \"rda\",     argument can used specify non-default value header     argument read.table(),     read.csv(), etc. sep values input_type \"rds\" \"rda\",     argument can used specify non-default value sep     argument read.table(),     read.csv(), etc. read.args values input_type \"rds\" \"rda\",     argument can used specify non-default values optional     arguments read.table(),     read.csv(), etc.     Accepts named list argument values.     Values header sep     list take precedence values specified via header     sep arguments. seq_col Specifies column node-level metadata contains TCR/BCR     sequences.     Accepts character string containing column name       numeric scalar containing column index. drop_isolated_nodes Passed buildRepSeqNetwork()   constructing global network. node_stats network properties automatically computed. stats_to_include network properties automatically computed. cluster_stats network properties automatically computed. color_nodes_by Passed buildRepSeqNetwork()   constructing global network.   node-level network properties global network (see details)   included among valid options. color_scheme Passed addPlots()   constructing global network. plot_title Passed buildRepSeqNetwork()   constructing global network. output_dir Passed buildRepSeqNetwork()   constructing global network. output_name Passed buildRepSeqNetwork()   constructing global network. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr(). ... arguments buildRepSeqNetwork()   (including arguments addPlots())   constructing global network.   include   node_stats, stats_to_include, cluster_stats   cluster_id_name.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Global Network of Public TCR/BCR Clusters — buildPublicClusterNetwork","text":"node-level metadata filtered clusters samples combined global network constructed calling buildNet() node_stats = TRUE, stats_to_include = \"\", cluster_stats = TRUE cluster_id_name = \"ClusterIDPublic\". computed node-level network properties renamed reflect correspondence global network. done distinguish network properties correspond sample-level networks. names : ClusterIDPublic PublicNetworkDegree PublicTransitivity PublicCloseness PublicCentralityByCloseness PublicEigenCentrality PublicCentralityByEigen PublicBetweenness PublicCentralityByBetweenness PublicAuthorityScore PublicCoreness PublicPageRank See Searching Public TCR/BCR Clusters article package website.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Global Network of Public TCR/BCR Clusters — buildPublicClusterNetwork","text":"list network objects returned  buildRepSeqNetwork().     list returned invisibly.     input data contains combined total fewer two rows,     global network contains nodes, function returns NULL,     invisibly, warning.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build Global Network of Public TCR/BCR Clusters — buildPublicClusterNetwork","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package Searching Public TCR/BCR Clusters article package website","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build Global Network of Public TCR/BCR Clusters — buildPublicClusterNetwork","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Global Network of Public TCR/BCR Clusters — buildPublicClusterNetwork","text":"","code":"set.seed(42)  ## Simulate 30 samples with a mix of public/private sequences ## samples <- 30 sample_size <- 30 # (seqs per sample) base_seqs <- c(   \"CASSIEGQLSTDTQYF\", \"CASSEEGQLSTDTQYF\", \"CASSSVETQYF\",   \"CASSPEGQLSTDTQYF\", \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\",   \"CASSLTSGYNEQFF\", \"CASSETGYNEQFF\", \"CASSLTGGNEQFF\", \"CASSYLTGYNEQFF\",   \"CASSLTGNEQFF\", \"CASSLNGYNEQFF\", \"CASSFPWDGYGYTF\", \"CASTLARQGGELFF\",   \"CASTLSRQGGELFF\", \"CSVELLPTGPLETSYNEQFF\", \"CSVELLPTGPSETSYNEQFF\",   \"CVELLPTGPSETSYNEQFF\", \"CASLAGGRTQETQYF\", \"CASRLAGGRTQETQYF\",   \"CASSLAGGRTETQYF\", \"CASSLAGGRTQETQYF\", \"CASSRLAGGRTQETQYF\",   \"CASQYGGGNQPQHF\", \"CASSLGGGNQPQHF\", \"CASSNGGGNQPQHF\", \"CASSYGGGGNQPQHF\",   \"CASSYGGGQPQHF\", \"CASSYKGGNQPQHF\", \"CASSYTGGGNQPQHF\",   \"CAWSSQETQYF\", \"CASSSPETQYF\", \"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\") # Relative generation probabilities pgen <- cbind(   stats::toeplitz(0.6^(0:(sample_size - 1))),   matrix(1, nrow = samples, ncol = length(base_seqs) - samples) ) simulateToyData(   samples = samples,   sample_size = sample_size,   prefix_length = 1,   prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, samples), rep(0, samples)),   affixes = base_seqs,   affix_probs = pgen,   num_edits = 0,   output_dir = tempdir(),   no_return = TRUE ) #> [1] TRUE   ## 1. Find Public Clusters in Each Sample sample_files <-   file.path(tempdir(),             paste0(\"Sample\", 1:samples, \".rds\")   ) findPublicClusters(   file_list = sample_files,   input_type = \"rds\",   seq_col = \"CloneSeq\",   count_col = \"CloneCount\",   min_seq_length = NULL,   drop_matches = NULL,   top_n_clusters = 3,   min_node_count = 5,   min_clone_count = 15000,   output_dir = tempdir() )  ## 2. Build Global Network of Public Clusters public_clusters <-   buildPublicClusterNetwork(     file_list =       list.files(         file.path(tempdir(), \"node_meta_data\"),         full.names = TRUE       ),     seq_col = \"CloneSeq\",     count_col = \"CloneCount\",     plot_title = NULL,     plot_subtitle = NULL,     print_plots = TRUE   )    # \\dontshow{ # Clean up temporary files file.remove(   file.path(tempdir(),             paste0(\"Sample\", 1:samples, \".rds\")   ) ) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE unlink(   file.path(tempdir(), c(\"node_meta_data\", \"cluster_meta_data\")),   recursive = TRUE ) # }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Global Network of Public TCR/BCR Clusters Using Representative Clones — buildPublicClusterNetworkByRepresentative","title":"Build Global Network of Public TCR/BCR Clusters Using Representative Clones — buildPublicClusterNetworkByRepresentative","text":"Alternative step workflow Searching Public TCR/BCR Clusters. Intended use following findPublicClusters() cases buildPublicClusterNetwork() practically used due size full global network. Given cluster-level metadata sample's filtered clusters, selects representative TCR/BCR cluster, combines representatives global network performs network analysis cluster analysis.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Global Network of Public TCR/BCR Clusters Using Representative Clones — buildPublicClusterNetworkByRepresentative","text":"","code":"buildPublicClusterNetworkByRepresentative(    ## Input ##   file_list,   input_type = \"rds\",   data_symbols = \"cdat\",   header, sep, read.args,   seq_col = \"seq_w_max_count\",   count_col = \"agg_count\",    ## Network Settings ##   dist_type = \"hamming\",   dist_cutoff = 1,   cluster_fun = \"fast_greedy\",    ## Visualization ##   plots = TRUE,   print_plots = FALSE,   plot_title = \"auto\",   plot_subtitle = \"auto\",   color_nodes_by = \"SampleID\",   color_scheme = \"turbo\",   ...,    ## Output ##   output_dir = NULL,   output_type = \"rds\",   output_name = \"PubClustByRepresentative\",   pdf_width = 12,   pdf_height = 10,   verbose = FALSE  )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Global Network of Public TCR/BCR Clusters Using Representative Clones — buildPublicClusterNetworkByRepresentative","text":"file_list vector file paths file contains cluster-level metadata   one sample's filtered clusters.   Passed loadDataFromFileList(). input_type character string specifying file format input files. Options   \"csv\", \"rds\" \"rda\". Passed   loadDataFromFileList(). data_symbols Used input_type = \"rda\". Specifies name data frame   within Rdata file.   Passed loadDataFromFileList(). header values input_type \"rds\" \"rda\",     argument can used specify non-default value header     argument read.table(),     read.csv(), etc. sep values input_type \"rds\" \"rda\",     argument can used specify non-default value sep     argument read.table(),     read.csv(), etc. read.args values input_type \"rds\" \"rda\",     argument can used specify non-default values optional     arguments read.table(),     read.csv(), etc.     Accepts named list argument values.     Values header sep     list take precedence values specified via header     sep arguments. seq_col Specifies column cluster-level metadata contains     representative TCR/BCR sequence cluster.     Accepts character string containing column name       numeric scalar containing column index.     default, uses sequence maximum clone     count cluster. count_col Specifies column cluster-level metadata contains aggregate     clone count cluster.     Accepts character string containing column name       numeric scalar containing column index. dist_type Passed buildRepSeqNetwork()     constructing global network. dist_cutoff Passed buildRepSeqNetwork()     constructing global network. cluster_fun Passed buildRepSeqNetwork()     performing cluster analysis global network. plots Logical. plots global network graph produced? print_plots Logical. plots global network graph produced,     printed R plotting window? plot_title Passed addPlots() producing plots     global network graph. plot_subtitle Passed addPlots() producing plots     global network graph. color_nodes_by Passed addPlots() producing plots     global network graph. Valid options include default \"SampleID\",     well node-level properties (see addNodeNetworkStats)     sample-level cluster properties (see getClusterStats),     correspond representative TCRs/BCRs original sample-level clusters     represent, respectively. color_scheme Passed addPlots() producing plots     global network graph. ... arguments addPlots() producing plots     global network graph. output_dir Passed saveNetwork() constructing global network. output_type Passed saveNetwork() constructing global network. output_name Passed saveNetwork() constructing global network. pdf_width Passed saveNetwork() constructing global network.     applicable plots = TRUE. pdf_height Passed saveNetwork() constructing global network.     applicable plots = TRUE. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Global Network of Public TCR/BCR Clusters Using Representative Clones — buildPublicClusterNetworkByRepresentative","text":"filtered cluster sample's network, representative TCR/BCR selected. default, sequence greatest clone count cluster. representatives clusters samples used construct single global network. Cluster analysis used partition global network clusters. Network properties nodes clusters computed returned metadata. plot global network graph produced, nodes colored according sample ID. Within network, clusters containing nodes multiple samples can considered skeletons complete public clusters. filtered cluster data sample can subset keep sample-level clusters whose representative TCR/BCRs belong skeletons public clusters. subsetting manner, buildPublicClusterNetwork() can used construct global network complete public clusters. See Searching Public TCR/BCR Clusters article package website.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Global Network of Public TCR/BCR Clusters Using Representative Clones — buildPublicClusterNetworkByRepresentative","text":"input data contains combined total fewer two rows,     global network contains nodes, function returns NULL,     invisibly, warning. Otherwise, invisibly returns     list network objects returned  buildRepSeqNetwork().     global cluster membership variable data frame node_data named ClusterIDPublic. data frame cluster_data includes following variables     represent properties clusters global network representative     TCR/BCRs: cluster_id global cluster ID number. node_count number global network nodes global cluster. TotalSampleLevelNodes representative TCR/BCR global cluster, record number     nodes sample-level cluster representative TCR/BCR.     sum node counts across representative TCR/BCRs     global cluster. TotalCloneCount representative TCR/BCR global cluster, record     aggregate clone count nodes sample-level cluster     representative TCR/BCR. sum aggregate clone counts     across representative TCR/BCRs global cluster. MeanOfMeanSeqLength representative TCR/BCR global cluster, record mean     sequence length clones (nodes) sample-level cluster     representative TCR/BCR. average mean sequence lengths     representative TCR/BCRs global cluster. MeanDegreeInPublicNet representative TCR/BCR global cluster, record mean     network degree nodes sample-level cluster     representative TCR/BCR. average mean degree values     representative TCR/BCRs global cluster. MaxDegreeInPublicNet representative TCR/BCR global cluster, record maximum     network degree across nodes sample-level cluster     representative TCR/BCR. take maximum maximum degree     values representative TCR/BCRs global cluster. SeqWithMaxDegree representative TCR/BCR global cluster, record maximum     network degree across nodes sample-level cluster     representative TCR/BCR. identify representative TCR/BCR     maximum value maximum degrees representative TCR/BCRs     global cluster. TCR/BCR sequence identified representative     TCR/BCR recorded variable. MaxCloneCount representative TCR/BCR global cluster, record maximum     clone count across clones (nodes) sample-level cluster     representative TCR/BCR. take maximum maximum     clone counts representative TCR/BCRs global cluster. SampleWithMaxCloneCount representative TCR/BCR global cluster, record maximum     clone count across clones (nodes) sample-level cluster     representative TCR/BCR. identify representative TCR/BCR     maximum value maximum clone counts representative     TCR/BCRs global cluster. sample identified representative     TCR/BCR belongs recorded variable. SeqWithMaxCloneCount representative TCR/BCR global cluster, record maximum     clone count across clones (nodes) sample-level cluster     representative TCR/BCR. identify representative TCR/BCR     maximum value maximum clone counts representative     TCR/BCRs global cluster. TCR/BCR sequence identified     representative TCR/BCR recorded variable. MaxAggCloneCount representative TCR/BCR global cluster, record     aggregate clone count across clones (nodes) sample-level cluster     representative TCR/BCR. take maximum     aggregate clone counts representative TCR/BCRs global     cluster. SampleWithMaxAggCloneCount representative TCR/BCR global cluster, record     aggregate clone count across clones (nodes) sample-level cluster     representative TCR/BCR. identify representative     TCR/BCR maximum value aggregate clone counts     representative TCR/BCRs global cluster. sample     identified representative TCR/BCR belongs recorded variable. SeqWithMaxAggCloneCount representative TCR/BCR global cluster, record     aggregate clone count across clones (nodes) sample-level cluster     representative TCR/BCR. identify representative     TCR/BCR maximum value aggregate clone counts     representative TCR/BCRs global cluster. TCR/BCR sequence     identified representative TCR/BCR recorded variable. DiameterLength See getClusterStats.     Based edge connections representative TCR/BCRs global cluster. Assortativity See getClusterStats.     Based edge connections representative TCR/BCRs global cluster. GlobalTransitivity See getClusterStats.     Based edge connections representative TCR/BCRs global cluster. EdgeDensity See getClusterStats.     Based edge connections representative TCR/BCRs global cluster. DegreeCentralityIndex See getClusterStats.     Based edge connections representative TCR/BCRs global cluster. ClosenessCentralityIndex See getClusterStats.   Based edge connections representative TCR/BCRs global cluster. EigenCentralityIndex See getClusterStats.     Based edge connections representative TCR/BCRs global cluster. EigenCentralityEigenvalue See getClusterStats.     Based edge connections representative TCR/BCRs global cluster.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build Global Network of Public TCR/BCR Clusters Using Representative Clones — buildPublicClusterNetworkByRepresentative","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package Searching Public TCR/BCR Clusters article package website","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build Global Network of Public TCR/BCR Clusters Using Representative Clones — buildPublicClusterNetworkByRepresentative","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Global Network of Public TCR/BCR Clusters Using Representative Clones — buildPublicClusterNetworkByRepresentative","text":"","code":"set.seed(42)  ## Simulate 30 samples with a mix of public/private sequences ## samples <- 30 sample_size <- 30 # (seqs per sample) base_seqs <- c(   \"CASSIEGQLSTDTQYF\", \"CASSEEGQLSTDTQYF\", \"CASSSVETQYF\",   \"CASSPEGQLSTDTQYF\", \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\",   \"CASSLTSGYNEQFF\", \"CASSETGYNEQFF\", \"CASSLTGGNEQFF\", \"CASSYLTGYNEQFF\",   \"CASSLTGNEQFF\", \"CASSLNGYNEQFF\", \"CASSFPWDGYGYTF\", \"CASTLARQGGELFF\",   \"CASTLSRQGGELFF\", \"CSVELLPTGPLETSYNEQFF\", \"CSVELLPTGPSETSYNEQFF\",   \"CVELLPTGPSETSYNEQFF\", \"CASLAGGRTQETQYF\", \"CASRLAGGRTQETQYF\",   \"CASSLAGGRTETQYF\", \"CASSLAGGRTQETQYF\", \"CASSRLAGGRTQETQYF\",   \"CASQYGGGNQPQHF\", \"CASSLGGGNQPQHF\", \"CASSNGGGNQPQHF\", \"CASSYGGGGNQPQHF\",   \"CASSYGGGQPQHF\", \"CASSYKGGNQPQHF\", \"CASSYTGGGNQPQHF\",   \"CAWSSQETQYF\", \"CASSSPETQYF\", \"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\") # Relative generation probabilities pgen <- cbind(   stats::toeplitz(0.6^(0:(sample_size - 1))),   matrix(1, nrow = samples, ncol = length(base_seqs) - samples) ) simulateToyData(   samples = samples,   sample_size = sample_size,   prefix_length = 1,   prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, samples), rep(0, samples)),   affixes = base_seqs,   affix_probs = pgen,   num_edits = 0,   output_dir = tempdir(),   no_return = TRUE ) #> [1] TRUE   ## 1. Find Public Clusters in Each Sample sample_files <-   file.path(tempdir(),             paste0(\"Sample\", 1:samples, \".rds\")   ) findPublicClusters(   file_list = sample_files,   input_type = \"rds\",   seq_col = \"CloneSeq\",   count_col = \"CloneCount\",   min_seq_length = NULL,   drop_matches = NULL,   top_n_clusters = 3,   min_node_count = 5,   min_clone_count = 15000,   output_dir = tempdir() )  ## 2. Build Public Cluster Network by Representative TCR/BCRs buildPublicClusterNetworkByRepresentative(   file_list =     list.files(       file.path(tempdir(), \"cluster_meta_data\"),       full.names = TRUE     ),   size_nodes_by = 1,   print_plots = TRUE )   # \\dontshow{ # Clean up temporary files file.remove(   file.path(tempdir(),             paste0(\"Sample\", 1:samples, \".rds\")   ) ) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE unlink(   file.path(tempdir(), c(\"node_meta_data\", \"cluster_meta_data\")),   recursive = TRUE ) # }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Network Analysis of Immune Repertoire — buildRepSeqNetwork","title":"Network Analysis of Immune Repertoire — buildRepSeqNetwork","text":"Given Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data, builds     network graph immune repertoire based sequence similarity,     computes specified network properties generates customized visualizations. buildNet() identical buildRepSeqNetwork(), existing     alias convenience.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network Analysis of Immune Repertoire — buildRepSeqNetwork","text":"","code":"buildRepSeqNetwork(    ## Input ##   data,   seq_col,   count_col = NULL,   subset_cols = NULL,   min_seq_length = 3,   drop_matches = NULL,    ## Network ##   dist_type = \"hamming\",   dist_cutoff = 1,   drop_isolated_nodes = TRUE,   net_build_method = \"default\",   node_stats = FALSE,   stats_to_include = chooseNodeStats(),   cluster_stats = FALSE,   cluster_fun = \"fast_greedy\",   cluster_id_name = \"cluster_id\",    ## Visualization ##   plots = TRUE,   print_plots = FALSE,   plot_title = \"auto\",   plot_subtitle = \"auto\",   color_nodes_by = \"auto\",   ...,    ## Output ##   output_dir = NULL,   output_type = \"rds\",   output_name = \"MyRepSeqNetwork\",   pdf_width = 12,   pdf_height = 10,   verbose = FALSE  )  # Alias for buildRepSeqNetwork() buildNet(   data,   seq_col,   count_col = NULL,   subset_cols = NULL,   min_seq_length = 3,   drop_matches = NULL,   dist_type = \"hamming\",   dist_cutoff = 1,   drop_isolated_nodes = TRUE,   net_build_method = \"default\",   node_stats = FALSE,   stats_to_include = chooseNodeStats(),   cluster_stats = FALSE,   cluster_fun = \"fast_greedy\",   cluster_id_name = \"cluster_id\",   plots = TRUE,   print_plots = FALSE,   plot_title = \"auto\",   plot_subtitle = \"auto\",   color_nodes_by = \"auto\",   ...,   output_dir = NULL,   output_type = \"rds\",   output_name = \"MyRepSeqNetwork\",   pdf_width = 12,   pdf_height = 10,   verbose = FALSE  )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network Analysis of Immune Repertoire — buildRepSeqNetwork","text":"data data frame containing AIRR-Seq data, variables indexed column     observations (e.g., clones cells) indexed row. seq_col Specifies column(s) data containing     receptor sequences used basis similarity rows.     Accepts character string containing column name       numeric scalar containing column index.     Also accepts vector length 2 specifying distinct sequence columns     (e.g., alpha chain beta chain), case     similarity rows depends similarity sequence columns     (see details). count_col Optional. Specifies column data containing measure abundance,     e.g., clone count unique molecular identifier (UMI) count. Accepts either     column name column index. provided, data rows NA count     values removed prior network building. Count values used     compute certain cluster properties cluster_stats = TRUE; see     addClusterStats() details. subset_cols Specifies columns AIRR-Seq data included output.     Accepts vector column names vector column indices. default     NULL includes columns. receptor sequence column always     included regardless argument's value.     Passed filterInputData(). min_seq_length numeric scalar, NULL. Observations whose receptor sequences     fewer min_seq_length characters removed prior network analysis. drop_matches Optional. Passed filterInputData().     Accepts character string     containing regular expression (see regex).     Checks receptor sequences pattern match using grep().     returning match removed prior network analysis. dist_type Specifies function used quantify similarity sequences.     similarity two sequences determines pairwise distance     respective nodes network graph, greater similarity corresponding     shorter distance. Valid options \"hamming\" (default),     uses hamDistBounded(),     \"levenshtein\", uses     levDistBounded(). dist_cutoff nonnegative scalar. Specifies maximum pairwise distance (based     dist_type) edge connection exist two nodes. Pairs     nodes whose distance less equal value joined     edge connection network graph. Controls stringency network     construction affects number density edges network. lower     cutoff value requires greater similarity sequences order     respective nodes joined edge connection. value 0     requires two sequences identical order nodes joined     edge. drop_isolated_nodes logical scalar. TRUE, removes node joined     edge connection node network graph. net_build_method Passed method argument generateAdjacencyMatrix(). Specifies algorithm used compute network adjacency matrix. node_stats logical scalar. Specifies whether node-level network properties computed. stats_to_include named logical vector returned     chooseNodeStats()     exclusiveNodeStats().     Specifies node-level network properties     compute. Also accepts value \"\".     relevant node_stats = TRUE. cluster_stats logical scalar. Specifies whether compute cluster-level network properties. cluster_fun Passed addClusterMembership().     Specifies clustering algorithm     used cluster analysis performed. Cluster analysis performed     cluster_stats = TRUE node_stats = TRUE     cluster_id property enabled via stats_to_include argument. cluster_id_name Passed addClusterMembership().     Specifies name cluster membership variable added node metadata     cluster analysis performed (see cluster_fun). plots logical scalar. Specifies whether generate plots network graph. print_plots logical scalar. plots = TRUE, specifies whether plots     printed R plotting window. plot_title character string NULL. plots = TRUE, title     used plot. default value \"auto\" generates title based     value output_name argument. plot_subtitle character string NULL. plots = TRUE, subtitle     used plot. default value \"auto\" generates subtitle based     values dist_type dist_cutoff arguments. color_nodes_by Optional. Specifies variable used metadata coloring nodes     network graph plot. Accepts character string. can column     name data (node_stats = TRUE) name computed     node-level network property (based stats_to_include). Also accepts     character vector specifying multiple variables, case one plot     generated variable. default value \"auto\" attempts use     one several potential variables color nodes, depending     available. value NULL leaves nodes uncolored. ... named arguments addPlots(). output_dir file path specifying directory saving output. directory   created exist. NULL, output returned   saved. output_type character string specifying file format use saving output.   default value \"individual\" saves element returned list   individual uncompressed file, data frames saved csv format.   better compression, values \"rda\" \"rds\" save returned   list single file using rda rds format, respectively (former   case, list named net within rda file). Regardless   argument value, plots generated saved pdf file containing one plot   per page. output_name character string. files saved file names beginning value. pdf_width Sets width plot writing pdf.     Passed saveNetwork(). pdf_height Sets height plot writing pdf.     Passed saveNetwork(). verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Network Analysis of Immune Repertoire — buildRepSeqNetwork","text":"construct immune repertoire network, TCR/BCR clone (bulk data) cell (single-cell data) modeled node network graph, corresponding single row AIRR-Seq data. node, corresponding receptor sequence considered. nucleotide amino acid sequences supported purpose. receptor sequence used basis similarity distance nodes network. Similarity sequences measured using either Hamming distance Levenshtein (edit) distance. similarity determines pairwise distance nodes network graph. similar two sequences , shorter distance respective nodes. Two nodes graph joined edge distance sufficiently small, .e., receptor sequences sufficiently similar. single-cell data, edge connections nodes can based similarity alpha chain beta chain sequences. done providing vector length 2 seq_cols specifying two sequence columns data. distance two nodes greater two distances sequences corresponding chains. Two nodes joined edge alpha chain sequences sufficiently similar beta chain sequences sufficiently similar. See buildRepSeqNetwork package vignette details. vignette can accessed offline using vignette(\"buildRepSeqNetwork\").","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network Analysis of Immune Repertoire — buildRepSeqNetwork","text":"constructed network contains nodes, function return  NULL, invisibly, warning. Otherwise, function invisibly     returns list containing following items: details list containing information network     settings used construction. igraph object class igraph containing     list nodes edges network graph. adjacency_matrix network graph adjacency matrix, stored sparse     matrix class dgCMatrix Matrix package.     See dgCMatrix-class. node_data data frame containing containing metadata network     nodes, row corresponds node network graph. data     frame contains variables data (unless otherwise specified via     subset_cols) addition computed node-level network properties     node_stats = TRUE. row's name name corresponding     row data. cluster_data data frame containing network properties clusters,     row corresponds cluster network graph. included     cluster_stats = TRUE. plots list containing one element plot generated     well additional element matrix specifies graph layout.     plot object class ggraph. included     plots = TRUE.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Network Analysis of Immune Repertoire — buildRepSeqNetwork","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package buildRepSeqNetwork vignette","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Network Analysis of Immune Repertoire — buildRepSeqNetwork","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Network Analysis of Immune Repertoire — buildRepSeqNetwork","text":"","code":"set.seed(42) toy_data <- simulateToyData()  # Simple call network = buildNet(   toy_data,   seq_col = \"CloneSeq\",   print_plots = TRUE )   # Customized: network <- buildNet(   toy_data, \"CloneSeq\",   dist_type = \"levenshtein\",   node_stats = TRUE,   cluster_stats = TRUE,   cluster_fun = \"louvain\",   cluster_id_name = \"cluster_membership\",   count_col = \"CloneCount\",   color_nodes_by = c(\"SampleID\", \"cluster_membership\", \"coreness\"),   color_scheme = c(\"default\", \"Viridis\", \"plasma-1\"),   size_nodes_by = \"degree\",   node_size_limits = c(0.1, 1.5),   plot_title = NULL,   plot_subtitle = NULL,   print_plots = TRUE,   verbose = TRUE ) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... #>  Done. 200 rows remaining. #> Computing network edges based on a max levenshtein distance of 1... #>  Done. #> Network contains 124 nodes (after removing isolated nodes). #> Network objects and node metadata stored in a list #> Obtaining cluster properties... #> Partitioning the network graph into clusters... #>  Done. #> Cluster membership variable ‘cluster_membership’ added to node metadata. #> Data frame ‘cluster_data’ added to list of network objects. #> Generating graph plot with nodes colored by SampleID... #>  Done. #> Generating graph plot with nodes colored by cluster_membership...  #>  Done. #> Generating graph plot with nodes colored by coreness...  #>  Done. #> New plots added to ‘net$plots’ #> ‘output_dir’ is “NULL”. Output will not be saved.   typeof(network) #> [1] \"list\"  names(network) #> [1] \"details\"          \"igraph\"           \"adjacency_matrix\" \"node_data\"        #> [5] \"cluster_data\"     \"plots\"             network$details #> $seq_col #> [1] \"CloneSeq\" #>  #> $dist_type #> [1] \"levenshtein\" #>  #> $dist_cutoff #> [1] 1 #>  #> $drop_isolated_nodes #> [1] TRUE #>  #> $nodes_in_network #> [1] 124 #>  #> $clusters_in_network #> louvain  #>      21  #>  #> $cluster_id_variable #>              louvain  #> \"cluster_membership\"  #>  #> $cluster_data_goes_with #> [1] \"cluster_membership\" #>  #> $count_col_for_cluster_data #> [1] \"CloneCount\" #>  #> $min_seq_length #> [1] 3 #>  #> $drop_matches #> [1] \"NULL\" #>   head(network$node_data) #>         CloneSeq CloneFrequency CloneCount SampleID degree transitivity #> 2  GGAGATGAATCGG    0.007777102       3057  Sample1      1          NaN #> 5  GAAAGAGAATTCG    0.009336593       3670  Sample1      3    0.3333333 #> 8  GGGGAGAAATTGG    0.006220155       2445  Sample1      2    1.0000000 #> 11 GGGGGAGAATTGC    0.012969469       5098  Sample1      4    0.6666667 #> 12 GGGGGGGAATTGC    0.009079646       3569  Sample1     10    0.3555556 #> 13 AGGGGGAAATTGG    0.014941093       5873  Sample1      5    0.1000000 #>    eigen_centrality centrality_by_eigen betweenness centrality_by_betweenness #> 2        0.00000000          0.00000000    0.000000                  0.000000 #> 5        0.00000000          0.00000000   48.619048                 48.619048 #> 8        0.04558284          0.04558284    0.000000                  0.000000 #> 11       0.15054597          0.15054597    2.156593                  2.156593 #> 12       0.52695160          0.52695160  111.034076                111.034076 #> 13       0.14681104          0.14681104   77.439560                 77.439560 #>    authority_score coreness   page_rank cluster_membership #> 2     5.280244e-19        1 0.008064516                  1 #> 5     6.266760e-18        2 0.009136977                  2 #> 8     4.558284e-02        2 0.003869458                  3 #> 11    1.505460e-01        4 0.004979346                  3 #> 12    5.269516e-01        6 0.011562784                  3 #> 13    1.468110e-01        3 0.008554352                  4  head(network$cluster_data) #>   cluster_id node_count eigen_centrality_eigenvalue eigen_centrality_index #> 1          1          2                    1.000000                    NaN #> 2          2          7                    2.342923              0.5678500 #> 3          3         26                   11.819166              0.5216029 #> 4          4          3                    1.414214              0.5857864 #> 5          5          2                    1.000000                    NaN #> 6          6          5                    3.086130              0.3046233 #>   closeness_centrality_index degree_centrality_index edge_density #> 1                        NaN               0.0000000    1.0000000 #> 2                  0.3650918               0.1666667    0.3333333 #> 3                  0.4808997               0.3446154    0.3353846 #> 4                  1.0000000               0.3333333    0.6666667 #> 5                        NaN               0.0000000    1.0000000 #> 6                  0.6000000               0.3000000    0.7000000 #>   global_transitivity assortativity diameter_length max_degree mean_degree #> 1                 NaN           NaN               2          1        1.00 #> 2           0.3333333   -0.16666667               6          3        2.29 #> 3           0.6223539   -0.09412785               6         18        8.96 #> 4           0.0000000   -1.00000000               3          5        2.33 #> 5                 NaN           NaN               2          1        1.00 #> 6           0.8000000   -0.55555556               3          7        3.60 #>   mean_seq_length seq_w_max_degree max_count agg_count seq_w_max_count #> 1           13.00    GGAGATGAATCGG      5242      8299   GGAGCTGAATCGG #> 2           12.86    GAAAGAGAATTCG      4422     23255   GAAATAGAATTCG #> 3           13.00    GGGGGGGAATTGG      6526    104676   GGGGGGGAATTGG #> 4           13.00    AGGGGGAAATTGG      5873     12596   AGGGGGAAATTGG #> 5           13.00    GGTTAGGAATTCG      4553      7630   GGTTAGGAATTCG #> 6           13.00    AGGGGAGAATTGG      4422     17971   AGCGGAGAATTGG"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify Node-level Network Properties to Compute — chooseNodeStats","title":"Specify Node-level Network Properties to Compute — chooseNodeStats","text":"Create vector specifying node-level network properties compute.     Intended use buildRepSeqNetwork()     addNodeNetworkStats. node_stat_settings() deprecated equivalent     chooseNodeStats().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify Node-level Network Properties to Compute — chooseNodeStats","text":"","code":"chooseNodeStats(   degree = TRUE,   cluster_id = FALSE,   transitivity = TRUE,   closeness = FALSE,   centrality_by_closeness = FALSE,   eigen_centrality = TRUE,   centrality_by_eigen = TRUE,   betweenness = TRUE,   centrality_by_betweenness = TRUE,   authority_score = TRUE,   coreness = TRUE,   page_rank = TRUE,   all_stats = FALSE )  exclusiveNodeStats(   degree = FALSE,   cluster_id = FALSE,   transitivity = FALSE,   closeness = FALSE,   centrality_by_closeness = FALSE,   eigen_centrality = FALSE,   centrality_by_eigen = FALSE,   betweenness = FALSE,   centrality_by_betweenness = FALSE,   authority_score = FALSE,   coreness = FALSE,   page_rank = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify Node-level Network Properties to Compute — chooseNodeStats","text":"degree Logical. Whether compute network degree. cluster_id Logical. Whether perform cluster analysis record cluster     membership node.     See addClusterMembership(). transitivity Logical. Whether compute node-level network transitivity using     transitivity()     type = \"local\". local     transitivity node number triangles connected node     relative number triples centered node. closeness Logical. Whether compute network closeness using     closeness(). centrality_by_closeness Logical. Whether compute network centrality closeness. values     entries res element list returned     centr_clo(). eigen_centrality Logical. Whether compute eigenvector centrality scores node network     positions. scores entries vector element list     returned eigen_centrality()     weights = NA.     centrality scores correspond values first eigenvector     adjacency matrix cluster graph. centrality_by_eigen Logical. Whether compute node-level network centrality scores based     eigenvector centrality scores. scores entries vector     element list returned centr_eigen(). betweenness Logical. Whether compute network betweenness using     betweenness(). centrality_by_betweenness Logical. Whether compute network centrality scores betweenness.     scores entires res element list returned     centr_betw(). authority_score Logical. Whether compute authority score using     authority_score(). coreness Logical. Whether compute network coreness using     coreness(). page_rank Logical. Whether compute page rank. page rank values entries     vector element list returned     page_rank(). all_stats Logical. TRUE, argument values overridden set     TRUE.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify Node-level Network Properties to Compute — chooseNodeStats","text":"functions return vector can passed stats_to_include     argument addNodeStats()     (buildRepSeqNetwork(),     node_stats = TRUE)     order specify node-level network properties compute. chooseNodeStats exclusiveNodeStats default     argument values suited different use case,     order reduce number argument values must set manually. chooseNodeStats arguments TRUE default.     best suited including majority available properties.     can called all_stats = TRUE set values TRUE. exclusiveNodeStats arguments set FALSE     default. best suited including properties.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify Node-level Network Properties to Compute — chooseNodeStats","text":"named logical vector one entry function's arguments     (except all_stats).     entry name corresponding argument, value     matches argument's value.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Specify Node-level Network Properties to Compute — chooseNodeStats","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Specify Node-level Network Properties to Compute — chooseNodeStats","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify Node-level Network Properties to Compute — chooseNodeStats","text":"","code":"set.seed(42) toy_data <- simulateToyData()  net <- generateNetworkObjects(   toy_data, \"CloneSeq\" )  # Add default set of node properties net <- addNodeStats(net)  # Modify default set of node properties net <- addNodeStats(   net,   stats_to_include =     chooseNodeStats(       closeness = TRUE,       page_rank = FALSE     ) )  # Add only the spepcified node properties net <- addNodeStats(   net,   stats_to_include =     exclusiveNodeStats(       degree = TRUE,       transitivity = TRUE     ) )  # Add all node-level network properties net <- addNodeStats(   net,   stats_to_include = \"all\" )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and Combine Data From Multiple Samples — combineSamples","title":"Load and Combine Data From Multiple Samples — combineSamples","text":"Given multiple data frames stored separate files,     loadDataFromFileList()     loads combines single data frame. combineSamples() default behavior     loadDataFromFileList(),     possesses additional arguments allow data frames filtered,     subsetted augmented sample-level variables combined.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and Combine Data From Multiple Samples — combineSamples","text":"","code":"loadDataFromFileList(   file_list,   input_type,   data_symbols = NULL,   header, sep, read.args )  combineSamples(   file_list,   input_type,   data_symbols = NULL,   header, sep, read.args,   seq_col = NULL,   min_seq_length = NULL,   drop_matches = NULL,   subset_cols = NULL,   sample_ids = NULL,   subject_ids = NULL,   group_ids = NULL,   verbose = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and Combine Data From Multiple Samples — combineSamples","text":"file_list character vector file paths, list containing     connections file paths.     element corresponds single file containing data     single sample. input_type character string specifying file format sample data files.     Options \"rds\", \"rda\", \"csv\",     \"csv2\", \"tsv\", \"table\".     See details. data_symbols Used input_type = \"rda\". Specifies name sample's     data frame within respective Rdata file. Accepts character vector     length file_list. Alternatively, single character string     can used data frames name. header values input_type \"rds\" \"rda\",     argument can used specify non-default value header     argument read.table(),     read.csv(), etc. sep values input_type \"rds\" \"rda\",     argument can used specify non-default value sep     argument read.table(),     read.csv(), etc. read.args values input_type \"rds\" \"rda\",     argument can used specify non-default values optional     arguments read.table(),     read.csv(), etc.     Accepts named list argument values.     Values header sep     list take precedence values specified via header     sep arguments. seq_col provided, sample's data filtered based values     min_seq_length drop_matches.     Passed filterInputData() sample. min_seq_length Passed filterInputData() sample. drop_matches Passed filterInputData() sample. subset_cols Passed filterInputData() sample. sample_ids character numeric vector sample IDs, whose length matches   file_list. subject_ids optional character numeric vector subject IDs, whose length matches   file_list. Used assign subject ID sample. group_ids character numeric vector group IDs whose length matches   file_list. Used assign sample group. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load and Combine Data From Multiple Samples — combineSamples","text":"file assumed contain data single sample,     observations indexed row, columns across samples. Valid options input_type (corresponding function used     load file) include:  \"rds\": readRDS() \"rds\": readRDS() \"rda\": load() \"csv\": read.csv() \"csv2\": read.csv2() \"tsv\": read.delim() \"table\": read.table() input_type = \"rda\", data_symbols argument specifies     name data frame within respective file. calling combineSamples(), sample_ids,     subject_ids group_ids non-null, corresponding     variable added combined data frame; variables named     SampleID, SubjectID GroupID.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and Combine Data From Multiple Samples — combineSamples","text":"data frame containing combined data rows files.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Load and Combine Data From Multiple Samples — combineSamples","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load and Combine Data From Multiple Samples — combineSamples","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and Combine Data From Multiple Samples — combineSamples","text":"","code":"# Generate example data set.seed(42) samples <- simulateToyData(sample_size = 5) sample_1 <- subset(samples, SampleID == \"Sample1\") sample_2 <- subset(samples, SampleID == \"Sample2\")  # RDS format rdsfiles <- tempfile(c(\"sample1\", \"sample2\"), fileext = \".rds\") saveRDS(sample_1, rdsfiles[1]) saveRDS(sample_2, rdsfiles[2])  loadDataFromFileList(   rdsfiles,   input_type = \"rds\" ) #>               CloneSeq CloneFrequency CloneCount SampleID #> file1.1  TTGAGGAAATTGC   0.1064411838        428  Sample1 #> file1.2  GGAGATGAATTGG   0.2467047998        992  Sample1 #> file1.3  GTCGGGTAATTGG   0.1178811241        474  Sample1 #> file1.4   GCCGGGTAATTC   0.4794827157       1928  Sample1 #> file1.5  GAAAGAGAATCGG   0.0494901766        199  Sample1 #> file2.6  AAACACGAATTCG   0.3801916933       1428  Sample2 #> file2.7   ACAAAAGAATTC   0.0002662407          1  Sample2 #> file2.8   AGGAAAGAATTG   0.1589456869        597  Sample2 #> file2.9  CGAGAAGAATTGC   0.0878594249        330  Sample2 #> file2.10  GAAAAAAAATTC   0.3727369542       1400  Sample2  # With filtering and subsetting combineSamples(   rdsfiles,   input_type = \"rds\",   seq_col = \"CloneSeq\",   min_seq_length = 13,   drop_matches = \"GGG\",   subset_cols = \"CloneSeq\",   sample_ids = c(\"id01\", \"id02\"),   verbose = TRUE ) #> Loading sample 1... #> Input data contains 5 rows. #> Removing sequences with length fewer than 13 characters... #>  Done. 4 rows remaining. #> Removing sequences containing matches to “GGG”... #>  Done. 3 rows remaining. #> Loading sample 2... #> Input data contains 5 rows. #> Removing sequences with length fewer than 13 characters... #>  Done. 2 rows remaining. #> Removing sequences containing matches to “GGG”... #>  Done. 2 rows remaining. #>             CloneSeq SampleID #> id01.1 TTGAGGAAATTGC     id01 #> id01.2 GGAGATGAATTGG     id01 #> id01.5 GAAAGAGAATCGG     id01 #> id02.6 AAACACGAATTCG     id02 #> id02.9 CGAGAAGAATTGC     id02  # RData, different data frame names rdafiles <- tempfile(c(\"sample1\", \"sample2\"), fileext = \".rda\") save(sample_1, file = rdafiles[1]) save(sample_2, file = rdafiles[2]) loadDataFromFileList(   rdafiles,   input_type = \"rda\",   data_symbols = c(\"sample_1\", \"sample_2\") ) #>               CloneSeq CloneFrequency CloneCount SampleID #> file1.1  TTGAGGAAATTGC   0.1064411838        428  Sample1 #> file1.2  GGAGATGAATTGG   0.2467047998        992  Sample1 #> file1.3  GTCGGGTAATTGG   0.1178811241        474  Sample1 #> file1.4   GCCGGGTAATTC   0.4794827157       1928  Sample1 #> file1.5  GAAAGAGAATCGG   0.0494901766        199  Sample1 #> file2.6  AAACACGAATTCG   0.3801916933       1428  Sample2 #> file2.7   ACAAAAGAATTC   0.0002662407          1  Sample2 #> file2.8   AGGAAAGAATTG   0.1589456869        597  Sample2 #> file2.9  CGAGAAGAATTGC   0.0878594249        330  Sample2 #> file2.10  GAAAAAAAATTC   0.3727369542       1400  Sample2  # RData, same data frame names df <- sample_1 save(df, file = rdafiles[1]) df <- sample_2 save(df, file = rdafiles[2]) loadDataFromFileList(   rdafiles,   input_type = \"rda\",   data_symbols = \"df\" ) #>               CloneSeq CloneFrequency CloneCount SampleID #> file1.1  TTGAGGAAATTGC   0.1064411838        428  Sample1 #> file1.2  GGAGATGAATTGG   0.2467047998        992  Sample1 #> file1.3  GTCGGGTAATTGG   0.1178811241        474  Sample1 #> file1.4   GCCGGGTAATTC   0.4794827157       1928  Sample1 #> file1.5  GAAAGAGAATCGG   0.0494901766        199  Sample1 #> file2.6  AAACACGAATTCG   0.3801916933       1428  Sample2 #> file2.7   ACAAAAGAATTC   0.0002662407          1  Sample2 #> file2.8   AGGAAAGAATTG   0.1589456869        597  Sample2 #> file2.9  CGAGAAGAATTGC   0.0878594249        330  Sample2 #> file2.10  GAAAAAAAATTC   0.3727369542       1400  Sample2  # comma-separated values with header row; row names in first column csvfiles <- tempfile(c(\"sample1\", \"sample2\"), fileext = \".csv\") utils::write.csv(sample_1, csvfiles[1], row.names = TRUE) utils::write.csv(sample_2, csvfiles[2], row.names = TRUE) loadDataFromFileList(   csvfiles,   input_type = \"csv\",   read.args = list(row.names = 1) ) #>               CloneSeq CloneFrequency CloneCount SampleID #> file1.1  TTGAGGAAATTGC   0.1064411838        428  Sample1 #> file1.2  GGAGATGAATTGG   0.2467047998        992  Sample1 #> file1.3  GTCGGGTAATTGG   0.1178811241        474  Sample1 #> file1.4   GCCGGGTAATTC   0.4794827157       1928  Sample1 #> file1.5  GAAAGAGAATCGG   0.0494901766        199  Sample1 #> file2.6  AAACACGAATTCG   0.3801916933       1428  Sample2 #> file2.7   ACAAAAGAATTC   0.0002662407          1  Sample2 #> file2.8   AGGAAAGAATTG   0.1589456869        597  Sample2 #> file2.9  CGAGAAGAATTGC   0.0878594249        330  Sample2 #> file2.10  GAAAAAAAATTC   0.3727369542       1400  Sample2  # semicolon-separated values with decimals as commas; # header row, row names in first column utils::write.csv2(sample_1, csvfiles[1], row.names = TRUE) utils::write.csv2(sample_2, csvfiles[2], row.names = TRUE) loadDataFromFileList(   csvfiles,   input_type = \"csv2\",   read.args = list(row.names = 1) ) #>               CloneSeq CloneFrequency CloneCount SampleID #> file1.1  TTGAGGAAATTGC   0.1064411838        428  Sample1 #> file1.2  GGAGATGAATTGG   0.2467047998        992  Sample1 #> file1.3  GTCGGGTAATTGG   0.1178811241        474  Sample1 #> file1.4   GCCGGGTAATTC   0.4794827157       1928  Sample1 #> file1.5  GAAAGAGAATCGG   0.0494901766        199  Sample1 #> file2.6  AAACACGAATTCG   0.3801916933       1428  Sample2 #> file2.7   ACAAAAGAATTC   0.0002662407          1  Sample2 #> file2.8   AGGAAAGAATTG   0.1589456869        597  Sample2 #> file2.9  CGAGAAGAATTGC   0.0878594249        330  Sample2 #> file2.10  GAAAAAAAATTC   0.3727369542       1400  Sample2  # tab-separated values with header row and decimals as commas tsvfiles <- tempfile(c(\"sample1\", \"sample2\"), fileext = \".tsv\") utils::write.table(sample_1, tsvfiles[1], sep = \"\\t\", dec = \",\") utils::write.table(sample_2, tsvfiles[2], sep = \"\\t\", dec = \",\") loadDataFromFileList(   tsvfiles,   input_type = \"tsv\",   header = TRUE,   read.args = list(dec = \",\") ) #>               CloneSeq CloneFrequency CloneCount SampleID #> file1.1  TTGAGGAAATTGC   0.1064411838        428  Sample1 #> file1.2  GGAGATGAATTGG   0.2467047998        992  Sample1 #> file1.3  GTCGGGTAATTGG   0.1178811241        474  Sample1 #> file1.4   GCCGGGTAATTC   0.4794827157       1928  Sample1 #> file1.5  GAAAGAGAATCGG   0.0494901766        199  Sample1 #> file2.6  AAACACGAATTCG   0.3801916933       1428  Sample2 #> file2.7   ACAAAAGAATTC   0.0002662407          1  Sample2 #> file2.8   AGGAAAGAATTG   0.1589456869        597  Sample2 #> file2.9  CGAGAAGAATTGC   0.0878594249        330  Sample2 #> file2.10  GAAAAAAAATTC   0.3727369542       1400  Sample2  # space-separated values with header row and NAs encoded as as \"No Value\" txtfiles <- tempfile(c(\"sample1\", \"sample2\"), fileext = \".txt\") utils::write.table(sample_1, txtfiles[1], na = \"No Value\") utils::write.table(sample_2, txtfiles[2], na = \"No Value\") loadDataFromFileList(   txtfiles,   input_type = \"table\",   read.args = list(     header = TRUE,     na.strings = \"No Value\"   ) ) #>               CloneSeq CloneFrequency CloneCount SampleID #> file1.1  TTGAGGAAATTGC   0.1064411838        428  Sample1 #> file1.2  GGAGATGAATTGG   0.2467047998        992  Sample1 #> file1.3  GTCGGGTAATTGG   0.1178811241        474  Sample1 #> file1.4   GCCGGGTAATTC   0.4794827157       1928  Sample1 #> file1.5  GAAAGAGAATCGG   0.0494901766        199  Sample1 #> file2.6  AAACACGAATTCG   0.3801916933       1428  Sample2 #> file2.7   ACAAAAGAATTC   0.0002662407          1  Sample2 #> file2.8   AGGAAAGAATTG   0.1589456869        597  Sample2 #> file2.9  CGAGAAGAATTGC   0.0878594249        330  Sample2 #> file2.10  GAAAAAAAATTC   0.3727369542       1400  Sample2  # custom value separator and row names in first column utils::write.table(sample_1, txtfiles[1],                    sep = \"@\", row.names = TRUE, col.names = FALSE ) utils::write.table(sample_2, txtfiles[2],                    sep = \"@\", row.names = TRUE, col.names = FALSE ) loadDataFromFileList(   txtfiles,   input_type = \"table\",   sep = \"@\",   read.args = list(     row.names = 1,     col.names = c(\"rownames\",                   \"CloneSeq\", \"CloneFrequency\",                   \"CloneCount\", \"SampleID\"     )   ) ) #>               CloneSeq CloneFrequency CloneCount SampleID #> file1.1  TTGAGGAAATTGC   0.1064411838        428  Sample1 #> file1.2  GGAGATGAATTGG   0.2467047998        992  Sample1 #> file1.3  GTCGGGTAATTGG   0.1178811241        474  Sample1 #> file1.4   GCCGGGTAATTC   0.4794827157       1928  Sample1 #> file1.5  GAAAGAGAATCGG   0.0494901766        199  Sample1 #> file2.6  AAACACGAATTCG   0.3801916933       1428  Sample2 #> file2.7   ACAAAAGAATTC   0.0002662407          1  Sample2 #> file2.8   AGGAAAGAATTG   0.1589456869        597  Sample2 #> file2.9  CGAGAAGAATTGC   0.0878594249        330  Sample2 #> file2.10  GAAAAAAAATTC   0.3727369542       1400  Sample2  # same as previous example # (value of sep in read.args overrides value in sep argument) loadDataFromFileList(   txtfiles,   input_type = \"table\",   sep = \"\\t\",   read.args = list(     sep = \"@\",     row.names = 1,     col.names = c(\"rownames\",                   \"CloneSeq\", \"CloneFrequency\",                   \"CloneCount\", \"SampleID\"     )   ) ) #>               CloneSeq CloneFrequency CloneCount SampleID #> file1.1  TTGAGGAAATTGC   0.1064411838        428  Sample1 #> file1.2  GGAGATGAATTGG   0.2467047998        992  Sample1 #> file1.3  GTCGGGTAATTGG   0.1178811241        474  Sample1 #> file1.4   GCCGGGTAATTC   0.4794827157       1928  Sample1 #> file1.5  GAAAGAGAATCGG   0.0494901766        199  Sample1 #> file2.6  AAACACGAATTCG   0.3801916933       1428  Sample2 #> file2.7   ACAAAAGAATTC   0.0002662407          1  Sample2 #> file2.8   AGGAAAGAATTG   0.1589456869        597  Sample2 #> file2.9  CGAGAAGAATTGC   0.0878594249        330  Sample2 #> file2.10  GAAAAAAAATTC   0.3727369542       1400  Sample2  # \\dontshow{   # clean up temp directory   unlink(c(rdsfiles, rdafiles, csvfiles, tsvfiles, txtfiles)) # }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/extractLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Coordinate Layout From Graph Plot — extractLayout","title":"Get Coordinate Layout From Graph Plot — extractLayout","text":"Given ggraph plot, extract coordinate layout   graph nodes two-column matrix.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/extractLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Coordinate Layout From Graph Plot — extractLayout","text":"","code":"extractLayout(plot)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/extractLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Coordinate Layout From Graph Plot — extractLayout","text":"plot object class ggraph.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/extractLayout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Coordinate Layout From Graph Plot — extractLayout","text":"Equivalent .matrix(plot$data[c(\"x\", \"y\")]).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/extractLayout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Coordinate Layout From Graph Plot — extractLayout","text":"matrix two columns one row per network node. row contains   Cartesian coordinates corresponding node.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/extractLayout.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Coordinate Layout From Graph Plot — extractLayout","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/extractLayout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Coordinate Layout From Graph Plot — extractLayout","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/extractLayout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Coordinate Layout From Graph Plot — extractLayout","text":"","code":"set.seed(42) toy_data <- simulateToyData() net <- buildRepSeqNetwork(toy_data, \"CloneSeq\", print_plots = TRUE)   my_layout <- extractLayout(net$plots[[1]])  # same as `graph_layout` element in the plot list all.equal(my_layout, net$plots$graph_layout, check.attributes = FALSE) #> [1] TRUE"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Data Rows and Subset Data Columns — filterInputData","title":"Filter Data Rows and Subset Data Columns — filterInputData","text":"Given data frame column containing receptor sequences, filter data     rows sequence length sequence content. Keep data columns choose     columns keep.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Data Rows and Subset Data Columns — filterInputData","text":"","code":"filterInputData(   data,   seq_col,   min_seq_length = NULL,   drop_matches = NULL,   subset_cols = NULL,   count_col = NULL,   verbose = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Data Rows and Subset Data Columns — filterInputData","text":"data data frame. seq_col Specifies column(s) data containing     receptor sequences.     Accepts character numeric vector length 1 2,       containing either column names column indices.     column specified coerced     character vector. Data rows containing value NA     specified columns dropped. min_seq_length Observations whose receptor sequences fewer min_seq_length     characters dropped. drop_matches Accepts character string containing regular expression     (see regex). Checks values receptor sequence     column pattern match using grep().     Rows match found dropped. subset_cols Specifies columns AIRR-Seq data included output.     Accepts character vector column names     numeric vector column indices.     default     NULL includes columns. receptor sequence column always     included regardless argument's value. count_col Optional. Specifies column data containing measure abundance,     e.g., clone count unique molecular identifier (UMI) count. Accepts either     column name character string numeric column index.     provided, data rows NA count values removed. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Data Rows and Subset Data Columns — filterInputData","text":"data frame.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filter Data Rows and Subset Data Columns — filterInputData","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter Data Rows and Subset Data Columns — filterInputData","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Data Rows and Subset Data Columns — filterInputData","text":"","code":"set.seed(42) raw_data <- simulateToyData()  # Remove sequences shorter than 13 characters, # as well as sequences containing the subsequence \"GGGG\". # Keep variables for clone sequence, clone frequency and sample ID filterInputData(   raw_data,   seq_col = \"CloneSeq\",   min_seq_length = 13,   drop_matches = \"GGGG\",   subset_cols =     c(\"CloneSeq\", \"CloneFrequency\", \"SampleID\"),   verbose = TRUE ) #> Input data contains 200 rows. #> Removing sequences with length fewer than 13 characters... #>  Done. 136 rows remaining. #> Removing sequences containing matches to “GGGG”... #>  Done. 105 rows remaining. #>          CloneSeq CloneFrequency SampleID #> 1   TTGAGGAAATTCG    0.007873775  Sample1 #> 2   GGAGATGAATCGG    0.007777102  Sample1 #> 3   GTCGGGTAATTGG    0.009094910  Sample1 #> 4   GCCGGGTAATTCG    0.010160859  Sample1 #> 5   GAAAGAGAATTCG    0.009336593  Sample1 #> 6   AGGTGGGAATTCG    0.010369470  Sample1 #> 7   GCGCAGCAATTGG    0.007939920  Sample1 #> 9   AGGGACAAATTGG    0.008362229  Sample1 #> 10  GAGGAAGAATCGG    0.012432679  Sample1 #> 14  GGTTAGGAATTCG    0.011582972  Sample1 #> 16  CAAGGGAAATTCG    0.012557336  Sample1 #> 19  TCGATGGAATTGG    0.014465359  Sample1 #> 20  TAGAGAGAATCGG    0.011305673  Sample1 #> 21  GGGAAAGAATTGG    0.010964773  Sample1 #> 22  CGGAGAGAATCGG    0.011819567  Sample1 #> 23  AAGGGATAATTGG    0.008166339  Sample1 #> 26  GAGAATAAATTGC    0.008418198  Sample1 #> 27  GGAATAGAATTGG    0.013554596  Sample1 #> 29  GGAAAGAAATTGG    0.011921328  Sample1 #> 30  GGGCGGGAATCGG    0.010537376  Sample1 #> 37  GGGAGGGAATTGG    0.006339725  Sample1 #> 38  GAGGCGGAATCGG    0.007074950  Sample1 #> 39  AGTAGAGAATCGG    0.014307629  Sample1 #> 42  GGGAAGGAATCGG    0.012397062  Sample1 #> 45  GGGCGGGAATTGC    0.006779842  Sample1 #> 46  TGGTCGGAATTGG    0.012854988  Sample1 #> 47  GGGTGAAAATTGG    0.010926612  Sample1 #> 48  ATGGGAGAATTCG    0.008573384  Sample1 #> 50  GGGCGATAATTGG    0.009135615  Sample1 #> 53  GGGTGGGAATTGG    0.013697062  Sample1 #> 54  GAGACGGAATTGG    0.011175927  Sample1 #> 56  AGCGGAGAATTGG    0.011249704  Sample1 #> 57  GGAGCTGAATCGG    0.013335810  Sample1 #> 64  TGAGGGAAATTGG    0.004574167  Sample1 #> 66  GGATAGGAATCGG    0.006746770  Sample1 #> 68  AGGTCGGAATTGG    0.008301173  Sample1 #> 69  GTGAGGAAATTGG    0.012079058  Sample1 #> 70  GTGTGGGAATCGG    0.005960664  Sample1 #> 71  CGAGGGAAATTGG    0.010135419  Sample1 #> 73  GTGGTGGAATTGG    0.008352053  Sample1 #> 75  GGATAGGAATTCG    0.007827983  Sample1 #> 76  AGTGGAGAATTGG    0.008003521  Sample1 #> 79  AGGGTGAAATTCG    0.007204695  Sample1 #> 82  GGAGGCGAATCGG    0.012758315  Sample1 #> 84  TAGGGCCAATTGG    0.009295889  Sample1 #> 85  GAGAGCAAATCGG    0.009331505  Sample1 #> 87  AGGGAGGAATTGG    0.009099998  Sample1 #> 88  GGGAGATAATCGG    0.009171231  Sample1 #> 90  AGAGGAGAATTGG    0.008303717  Sample1 #> 92  GAAGGGAAATTGG    0.012023090  Sample1 #> 93  GAGGCTGAATCGG    0.011318393  Sample1 #> 95  GGATGAGAATCGG    0.011381994  Sample1 #> 96  AGGAGGAAATTGG    0.008306261  Sample1 #> 98  GGAACGAAATTGG    0.009013501  Sample1 #> 99  GGAGGGAAATTGC    0.007718589  Sample1 #> 100 AGAGCTGAATTGG    0.007046965  Sample1 #> 102 AAAATAAAATTGG    0.011245432  Sample2 #> 104 AAAACAAAATTGG    0.009633772  Sample2 #> 106 AAGTAGGAATTGC    0.010566252  Sample2 #> 107 AAAAAAGAATTGC    0.012219664  Sample2 #> 111 GGAGAGAAATTGC    0.012035952  Sample2 #> 113 TAAAGGAAATTGC    0.014154213  Sample2 #> 115 GGAAAAAAATTGG    0.013889778  Sample2 #> 117 CTGGCAAAATTGC    0.012369975  Sample2 #> 119 AAAAACTAATTGC    0.011498732  Sample2 #> 120 TGAAAAGAATTGG    0.007715925  Sample2 #> 121 AAAAGAAAATTCG    0.009733979  Sample2 #> 124 AAGATAAAATTGC    0.003908066  Sample2 #> 127 AGAAGAAAATTGC    0.006833548  Sample2 #> 128 GGAGGAAAATTCG    0.007493243  Sample2 #> 129 AAAAGAGAATTCG    0.007888503  Sample2 #> 130 AAAAGAGAATCGG    0.010104187  Sample2 #> 132 AGAGAAAAATCGG    0.005962306  Sample2 #> 134 AAAAATAAATTGC    0.005619932  Sample2 #> 136 AAGCAGAAATTGG    0.009703360  Sample2 #> 139 TAAAAAAAATTGC    0.008868303  Sample2 #> 140 CAGTAAAAATTCG    0.005539210  Sample2 #> 141 ACAGGACAATTGG    0.004926835  Sample2 #> 142 AGATAGAAATTCG    0.009060366  Sample2 #> 146 AGGATGTAATCGG    0.014257203  Sample2 #> 148 AAGGAAAAATTGC    0.014524421  Sample2 #> 149 AAAAATAAATCGG    0.014911331  Sample2 #> 150 GAAAAAAAATTGC    0.012589873  Sample2 #> 152 AGAAAAAAATCGG    0.007958091  Sample2 #> 153 AAAAAAAAATTGC    0.007571182  Sample2 #> 155 ACAAAAGAATTGC    0.012208530  Sample2 #> 156 GAAATAGAATTCG    0.012308737  Sample2 #> 160 AGAAAAGAATTGC    0.012266984  Sample2 #> 162 AGAGAAGAATTGG    0.010986564  Sample2 #> 163 GAAAAAGAATTCG    0.007799430  Sample2 #> 166 AAAATGGAATTCG    0.013664313  Sample2 #> 168 AAGAAGGAATTGG    0.005739624  Sample2 #> 169 AGAAGAAAATTCG    0.010374189  Sample2 #> 172 AGAGCAAAATTGG    0.007610151  Sample2 #> 175 GAAATTAAATTGC    0.014028954  Sample2 #> 176 GGGTAAAAATTGC    0.006410453  Sample2 #> 179 AAGAAGAAATTGG    0.013230083  Sample2 #> 181 AGAAGAAAATTGC    0.012854308  Sample2 #> 183 AAAAACAAATTGC    0.009338719  Sample2 #> 185 AAATAAAAATCGG    0.013355342  Sample2 #> 189 GAAGAACAATTGC    0.009104903  Sample2 #> 192 CAAAATAAATTCG    0.012854308  Sample2 #> 196 AAAAAGAAATTGC    0.011674094  Sample2 #> 197 AGAAGAAAATTGC    0.012768018  Sample2 #> 200 AAAAGAAAATTGC    0.010546767  Sample2"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify TCR/BCR Clones in a Neighborhood Around Each Associated Sequence — findAssociatedClones","title":"Identify TCR/BCR Clones in a Neighborhood Around Each Associated Sequence — findAssociatedClones","text":"Part workflow Searching Associated TCR/BCR Clusters. Intended use following findAssociatedSeqs() prior buildAssociatedClusterNetwork(). Given multiple samples bulk Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data vector associated sequences, identifies associated sequence global \"neighborhood\" comprised clones TCR/BCR sequences similar associated sequence.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify TCR/BCR Clones in a Neighborhood Around Each Associated Sequence — findAssociatedClones","text":"","code":"findAssociatedClones(    ## Input ##   file_list, input_type,   data_symbols = NULL,   header, sep, read.args,   sample_ids =     paste0(\"Sample\", 1:length(file_list)),   subject_ids = NULL,   group_ids,   seq_col,   assoc_seqs,    ## Neighborhood Criteria ##   nbd_radius = 1,   dist_type = \"hamming\",   min_seq_length = 6,   drop_matches = NULL,    ## Output ##   subset_cols = NULL,   output_dir,   output_type = \"rds\",   verbose = FALSE  )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify TCR/BCR Clones in a Neighborhood Around Each Associated Sequence — findAssociatedClones","text":"file_list character vector file paths, list containing   connections file paths.   element corresponds single file containing data   single sample.   Passed loadDataFromFileList(). input_type character string specifying file format sample data files. Options   \"table\", \"txt\", \"tsv\", \"csv\", \"rds\"   \"rda\".   Passed loadDataFromFileList(). data_symbols Used input_type = \"rda\". Specifies name sample's data   frame within respective Rdata file.   Passed loadDataFromFileList(). header values input_type \"rds\" \"rda\",     argument can used specify non-default value header     argument read.table(),     read.csv(), etc. sep values input_type \"rds\" \"rda\",     argument can used specify non-default value sep     argument read.table(),     read.csv(), etc. read.args values input_type \"rds\" \"rda\",     argument can used specify non-default values optional     arguments read.table(),     read.csv(), etc.     Accepts named list argument values.     Values header sep     list take precedence values specified via header     sep arguments. sample_ids character numeric vector sample IDs, whose length matches   file_list. entry assigned sample ID corresponding   entry file_list. subject_ids optional character numeric vector subject IDs, whose length matches   file_list. Used assign subject ID sample. group_ids character numeric vector group IDs whose length matches   file_list. Used assign sample group. two groups   represent levels binary variable interest. seq_col Specifies column sample's data frame containing TCR/BCR     sequences.     Accepts character string containing column name       numeric scalar containing column index. assoc_seqs character vector containing TCR/BCR sequences associated     binary variable interest. nbd_radius maximum distance (based dist_type) associated sequence     TCR/BCR sequences belonging neighborhood. Lower values require     sequences similar associated sequence order belong     neighborhood. dist_type Specifies function used quantify similarity sequences.     similarity two sequences determines pairwise distance,     greater similarity corresponding shorter distance. Valid options     \"hamming\" (default),     uses hamDistBounded(),     \"levenshtein\", uses     levDistBounded(). min_seq_length Clones TCR/BCR sequences length removed. Passed     filterInputData() loading sample. drop_matches Passed filterInputData().     Accepts character string containing regular expression     (see regex).     Checks TCR/BCR sequences pattern match using grep().     returning match dropped.     default, sequences containing characters *, |     _ dropped. subset_cols Controls columns AIRR-Seq data sample included     output.     Accepts character vector column names     numeric vector column indices.     default NULL includes columns. Passed     filterInputData(). output_dir file path directory saving output. valid output directory   required, since output returned R. specified directory   created already exist. output_type character string specifying file format use saving output.   Valid options   \"rda\", \"csv\", \"csv2\", \"tsv\" \"table\".   \"rda\", data frames named data R environment.   remaining options, write.table()   called row.names = TRUE. verbose Logical. TRUE, generates messages tasks   performed progress, well relevant properties intermediate   outputs. Messages sent stderr().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify TCR/BCR Clones in a Neighborhood Around Each Associated Sequence — findAssociatedClones","text":"associated sequence, neighborhood defined include clones TCR/BCR sequences sufficiently similar associated sequence. arguments dist_type nbd_radius control similarity measured degree similarity required neighborhood membership. associated sequence, data frame saved individual file. data frame contains one row clone associated sequence's neighborhood (samples). includes variables sample ID, group ID (provided) subject ID, well variables AIRR-Seq data. files saved function intended use buildAssociatedClusterNetwork(). See Searching Associated TCR/BCR Clusters article package website details.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify TCR/BCR Clones in a Neighborhood Around Each Associated Sequence — findAssociatedClones","text":"Returns TRUE, invisibly. function called side effects.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Identify TCR/BCR Clones in a Neighborhood Around Each Associated Sequence — findAssociatedClones","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package Searching Associated TCR/BCR Clusters article package website","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify TCR/BCR Clones in a Neighborhood Around Each Associated Sequence — findAssociatedClones","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify TCR/BCR Clones in a Neighborhood Around Each Associated Sequence — findAssociatedClones","text":"","code":"set.seed(42)  ## Simulate 30 samples from two groups (treatment/control) ## n_control <- n_treatment <- 15 n_samples <- n_control + n_treatment sample_size <- 30 # (seqs per sample) base_seqs <- # first five are associated with treatment   c(\"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\", \"CASSIEGQLSTDTQYF\",     \"CASSEEGQLSTDTQYF\", \"CASSPEGQLSTDTQYF\",     \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\") # Relative generation probabilities by control/treatment group pgen_c <- matrix(rep(c(rep(1, 5), rep(30, 3)), times = n_control),                  nrow = n_control, byrow = TRUE) pgen_t <- matrix(rep(c(1, 1, rep(1/3, 3), rep(2, 3)), times = n_treatment),                  nrow = n_treatment, byrow = TRUE) pgen <- rbind(pgen_c, pgen_t) simulateToyData(   samples = n_samples,   sample_size = sample_size,   prefix_length = 1,   prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, n_samples), rep(0, n_samples)),   affixes = base_seqs,   affix_probs = pgen,   num_edits = 0,   output_dir = tempdir(),   no_return = TRUE ) #> [1] TRUE  ## Step 1: Find Associated Sequences ## sample_files <-   file.path(tempdir(),             paste0(\"Sample\", 1:n_samples, \".rds\")   ) group_labels <- c(rep(\"reference\", n_control),                   rep(\"comparison\", n_treatment)) associated_seqs <-   findAssociatedSeqs(     file_list = sample_files,     input_type = \"rds\",     group_ids = group_labels,     seq_col = \"CloneSeq\",     min_seq_length = NULL,     drop_matches = NULL,     min_sample_membership = 0,     pval_cutoff = 0.1   ) head(associated_seqs[, 1:5]) #>        ReceptorSeq fisher_pvalue shared_by_n_samples samples_g0 samples_g1 #> 8   CSVDLGKGNNEQFF  1.052106e-05                  18          3         15 #> 7      CASSGAYEQYF  1.157316e-04                  17          3         14 #> 4 CASSEEGQLSTDTQYF  5.197401e-03                  10          1          9 #> 5 CASSIEGQLSTDTQYF  6.559548e-02                  16          5         11  ## Step 2: Find Associated Clones ## dir_step2 <- tempfile() findAssociatedClones(   file_list = sample_files,   input_type = \"rds\",   group_ids = group_labels,   seq_col = \"CloneSeq\",   assoc_seqs = associated_seqs$ReceptorSeq,   min_seq_length = NULL,   drop_matches = NULL,   output_dir = dir_step2 )  ## Step 3: Global Network of Associated Clusters ## associated_clusters <-   buildAssociatedClusterNetwork(     file_list = list.files(dir_step2,                            full.names = TRUE     ),     seq_col = \"CloneSeq\",     size_nodes_by = 1.5,     print_plots = TRUE   )   # \\dontshow{ # clean up temp directory file.remove(   file.path(tempdir(),             paste0(\"Sample\", 1:n_samples, \".rds\")   ) ) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE unlink(dir_step2, recursive = TRUE) # }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify TCR/BCR Sequences Associated With a Binary Variable — findAssociatedSeqs","title":"Identify TCR/BCR Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"Part workflow Searching Associated TCR/BCR Clusters. Given multiple samples bulk Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data binary variable interest disease condition, treatment clinical outcome, identify receptor sequences exhibit statistically significant difference frequency two levels binary variable. findAssociatedSeqs() designed use sample stored separate file. findAssociatedSeqs2() designed use single data frame containing samples.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify TCR/BCR Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"","code":"findAssociatedSeqs(   ## Input ##   file_list,   input_type,   data_symbols = NULL,   header, sep, read.args,   sample_ids = deprecated(),   subject_ids = NULL,   group_ids,   groups = deprecated(),   seq_col,   freq_col = NULL,    ## Search Criteria ##   min_seq_length = 7,   drop_matches = \"[*|_]\",   min_sample_membership = 5,   pval_cutoff = 0.05,    ## Output ##   outfile = NULL,   verbose = FALSE )   findAssociatedSeqs2(   ## Input ##   data,   seq_col,   sample_col,   subject_col = sample_col,   group_col,   groups = deprecated(),   freq_col = NULL,    ## Search Criteria ##   min_seq_length = 7,   drop_matches = \"[*|_]\",   min_sample_membership = 5,   pval_cutoff = 0.05,    ## Ouptut ##   outfile = NULL,   verbose = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify TCR/BCR Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"file_list character vector file paths, list containing   connections file paths.   element corresponds single file containing data   single sample.   Passed loadDataFromFileList(). input_type character string specifying file format sample data files.   Options \"table\", \"txt\", \"tsv\", \"csv\",   \"rds\" \"rda\".   Passed loadDataFromFileList(). data_symbols Used input_type = \"rda\". Specifies name sample's data   frame within respective Rdata file.  Passed   loadDataFromFileList(). header values input_type \"rds\" \"rda\",     argument can used specify non-default value header     argument read.table(),     read.csv(), etc. sep values input_type \"rds\" \"rda\",     argument can used specify non-default value sep     argument read.table(),     read.csv(), etc. read.args values input_type \"rds\" \"rda\",     argument can used specify non-default values optional     arguments read.table(),     read.csv(), etc.     Accepts named list argument values.     Values header sep     list take precedence values specified via header     sep arguments. sample_ids nothing. subject_ids character numeric vector subject IDs, whose length matches   file_list. relevant binary variable interest   subject-specific multiple samples belong subject. group_ids character numeric vector group IDs containing exactly two unique values   length matching file_list. two groups correspond   two values binary variable interest. groups nothing. seq_col Specifies column sample's data frame containing TCR/BCR sequences.     Accepts character string containing column name       numeric scalar containing column index. freq_col Optional. Specifies column sample's data frame containing clone     frequency (.e., clone count divided sum clone counts across     clones sample).     Accepts character string containing column name       numeric scalar containing column index.         argument specified, maximum clone frequency (across samples)     associated sequence included content label     variable returned data frame. min_seq_length Controls minimum TCR/BCR sequence length considered searching     associated sequences. Passed filterInputData(). drop_matches Passed filterInputData().     Accepts character string containing     regular expression (see regex). Checks TCR/BCR sequences     pattern match using grep(). returning match     excluded consideration associated sequences. recommended     filter sequences containing special characters invalid use     file names. default, sequences containing characters     *, | _ dropped. min_sample_membership Controls minimum number samples TCR/BCR sequence must     present order considered searching associated sequences.     Setting value NULL bypasses check. pval_cutoff Controls P-value cutoff association detected Fisher's     exact test (see details). outfile file path saving output (using write.csv()). verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr(). data data frame containing combined AIRR-seq data samples. sample_col column data containing sample IDs.     Accepts character string containing column name       numeric scalar containing column index. subject_col Optional. column data containing subject IDs.     Accepts character string containing column name       numeric scalar containing column index.     relevant binary variable interest     subject-specific multiple samples belong subject. group_col column data containing group IDs.     Accepts character string containing column name       numeric scalar containing column index.       groups correspond two values binary variable     interest. Thus exactly two unique values column.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify TCR/BCR Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"TCR/BCR sequences samples first filtered according minimum sequence length sequence content based specified values min_seq_length drop_matches, respectively. sequences filtered based sample membership, removing sequences appearing fewer min_sample_membership samples. remaining TCR/BCR sequence, P-value computed Fisher's exact test independence binary variable interest presence sequence within repertoire. samples/subjects divided two groups based levels binary variable. subject IDs provided, test based number subjects group sequence appears one samples. Without subject IDs, test based number samples possessing sequence group. Fisher's exact test performed using fisher.test(). TCR/BCR sequences \\(P\\)-value pval_cutoff sorted \\(P\\)-value returned along additional information. returned ouput intended use findAssociatedClones() function. See Searching Associated TCR/BCR Clusters article package website.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify TCR/BCR Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"data frame containing TCR/BCR sequences found associated     binary variable using Fisher's exact test (see details). row corresponds     unique TCR/BCR sequence includes following variables: ReceptorSeq unique receptor sequence. fisher_pvalue P-value Fisher's exact test independence receptor     sequence binary variable interest. shared_by_n_samples number samples sequence observed. samples_g0 samples sequence observed, number samples     belonging first group. samples_g1 samples sequence observed, number samples     belonging second group. shared_by_n_subjects number subjects sequence observed (present     subject IDs specified). subjects_g0 subjects sequence observed, number subjects     belonging first group (present subject IDs specified). subjects_g1 subjects sequence observed, number subjects     belonging second group (present subject IDs specified). max_freq maximum clone frequency across samples.     present freq_col non-null. label character string summarizing information. Also includes     maximum -sample clone frequency across samples, available.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Identify TCR/BCR Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package Searching Associated TCR/BCR Clusters article package website","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify TCR/BCR Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify TCR/BCR Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"","code":"set.seed(42)  ## Simulate 30 samples from two groups (treatment/control) ## n_control <- n_treatment <- 15 n_samples <- n_control + n_treatment sample_size <- 30 # (seqs per sample) base_seqs <- # first five are associated with treatment   c(\"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\", \"CASSIEGQLSTDTQYF\",     \"CASSEEGQLSTDTQYF\", \"CASSPEGQLSTDTQYF\",     \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\") # Relative generation probabilities by control/treatment group pgen_c <- matrix(rep(c(rep(1, 5), rep(30, 3)), times = n_control),                  nrow = n_control, byrow = TRUE) pgen_t <- matrix(rep(c(1, 1, rep(1/3, 3), rep(2, 3)), times = n_treatment),                  nrow = n_treatment, byrow = TRUE) pgen <- rbind(pgen_c, pgen_t) simulateToyData(   samples = n_samples,   sample_size = sample_size,   prefix_length = 1,   prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, n_samples), rep(0, n_samples)),   affixes = base_seqs,   affix_probs = pgen,   num_edits = 0,   output_dir = tempdir(),   no_return = TRUE ) #> [1] TRUE  ## Step 1: Find Associated Sequences ## sample_files <-   file.path(tempdir(),             paste0(\"Sample\", 1:n_samples, \".rds\")   ) group_labels <- c(rep(\"reference\", n_control),                   rep(\"comparison\", n_treatment)) associated_seqs <-   findAssociatedSeqs(     file_list = sample_files,     input_type = \"rds\",     group_ids = group_labels,     seq_col = \"CloneSeq\",     min_seq_length = NULL,     drop_matches = NULL,     min_sample_membership = 0,     pval_cutoff = 0.1   ) head(associated_seqs[, 1:5]) #>        ReceptorSeq fisher_pvalue shared_by_n_samples samples_g0 samples_g1 #> 8   CSVDLGKGNNEQFF  1.052106e-05                  18          3         15 #> 7      CASSGAYEQYF  1.157316e-04                  17          3         14 #> 4 CASSEEGQLSTDTQYF  5.197401e-03                  10          1          9 #> 5 CASSIEGQLSTDTQYF  6.559548e-02                  16          5         11  ## Step 2: Find Associated Clones ## dir_step2 <- tempfile() findAssociatedClones(   file_list = sample_files,   input_type = \"rds\",   group_ids = group_labels,   seq_col = \"CloneSeq\",   assoc_seqs = associated_seqs$ReceptorSeq,   min_seq_length = NULL,   drop_matches = NULL,   output_dir = dir_step2 )  ## Step 3: Global Network of Associated Clusters ## associated_clusters <-   buildAssociatedClusterNetwork(     file_list = list.files(dir_step2,                            full.names = TRUE     ),     seq_col = \"CloneSeq\",     size_nodes_by = 1.5,     print_plots = TRUE   )   # \\dontshow{ # clean up temp directory file.remove(   file.path(tempdir(),             paste0(\"Sample\", 1:n_samples, \".rds\")   ) ) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE unlink(dir_step2, recursive = TRUE) # }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Public Clusters Among RepSeq Samples — findPublicClusters","title":"Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"Part workflow Searching Public TCR/BCR Clusters. Given multiple samples bulk Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data, construct repertoire network sample. Within sample's network, perform cluster analysis filter clusters based node count aggregate clone count.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"","code":"findPublicClusters(    ## Input ##   file_list,   input_type,   data_symbols = NULL,   header, sep, read.args,   sample_ids =     paste0(\"Sample\", 1:length(file_list)),   seq_col,   count_col = NULL,    ## Search Criteria ##   min_seq_length = 3,   drop_matches = \"[*|_]\",   top_n_clusters = 20,   min_node_count = 10,   min_clone_count = 100,    ## Optional Visualization ##   plots = FALSE,   print_plots = FALSE,   plot_title = \"auto\",   color_nodes_by = \"cluster_id\",    ## Output ##   output_dir,   output_type = \"rds\",    ## Optional Output ##   output_dir_unfiltered = NULL,   output_type_unfiltered = \"rds\",    verbose = FALSE,    ...  )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"file_list character vector file paths, list containing   connections file paths.   element corresponds single file containing data   single sample.   Passed loadDataFromFileList(). input_type character string specifying file format sample data files. Options   \"table\", \"txt\", \"tsv\", \"csv\", \"rds\"   \"rda\". Passed loadDataFromFileList(). data_symbols Used input_type = \"rda\". Specifies name sample's data   frame within respective Rdata file.   Passed loadDataFromFileList(). header values input_type \"rds\" \"rda\",     argument can used specify non-default value header     argument read.table(),     read.csv(), etc. sep values input_type \"rds\" \"rda\",     argument can used specify non-default value sep     argument read.table(),     read.csv(), etc. read.args values input_type \"rds\" \"rda\",     argument can used specify non-default values optional     arguments read.table(),     read.csv(), etc.     Accepts named list argument values.     Values header sep     list take precedence values specified via header     sep arguments. sample_ids character numeric vector sample IDs, whose length matches   file_list. values valid use filenames   avoid using forward slash backslash characters (/ \\). seq_col Specifies column sample's data frame containing TCR/BCR     sequences.     Accepts character string containing column name       numeric scalar containing column index. count_col Specifies column sample's data frame containing clone count     (measure clonal abundance).     Accepts character string containing column name       numeric scalar containing column index.     NULL, clusters sample's network selected solely     based upon node count. min_seq_length Passed buildRepSeqNetwork()   constructing network   sample. drop_matches Passed buildRepSeqNetwork()   constructing network   sample. Accepts character string containing regular expression   (see regex).   Checks TCR/BCR sequences pattern match using grep().   returning match dropped.   default, sequences containing characters *, |   _ dropped. top_n_clusters number clusters sample automatically included among     filtered clusters, based greatest node count. min_node_count Clusters least many nodes included among filtered     clusters. min_clone_count Clusters aggregate clone count least value included     among filtered clusters. value NULL ignores criterion     select additional clusters based clone count. plots Passed buildRepSeqNetwork()   constructing network sample. print_plots Passed buildRepSeqNetwork()   constructing network sample. plot_title Passed buildRepSeqNetwork()   constructing network sample. color_nodes_by Passed buildRepSeqNetwork()   constructing network sample. output_dir file path directory saving output. directory     created already exist. output_type character string specifying file format use saving output.   Valid options include \"csv\", \"rds\" \"rda\". output_dir_unfiltered optional directory saving unfiltered network data sample.     default, filtered results saved. output_type_unfiltered character string specifying file format use saving unfiltered     network data sample. applicable output_dir_unfiltered     non-null. Passed buildRepSeqNetwork()     constructing network sample. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr(). ... arguments buildRepSeqNetwork constructing network     sample, including node_stats, stats_to_include,     cluster_stats, cluster_id_name output_name     (see details).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"sample's network constructed using individual call buildNet() node_stats = TRUE, stats_to_include = \"\", cluster_stats = TRUE cluster_id_name = \"ClusterIDInSample\". node-level properties renamed reflect correspondence sample-level network. Specifically, properties named: SampleLevelNetworkDegree SampleLevelTransitivity SampleLevelCloseness SampleLevelCentralityByCloseness SampleLevelCentralityByEigen SampleLevelEigenCentrality SampleLevelBetweenness SampleLevelCentralityByBetweenness SampleLevelAuthorityScore SampleLevelCoreness SampleLevelPageRank variable SampleID added node-level cluster-level meta data sample. clusters sample filtered, node-level cluster-level metadata saved respective subdirectories node_meta_data cluster_meta_data output directory specified output_dir. unfiltered network results sample can also saved supplying directory output_dir_unfiltered, results desired downstream analysis. sample's unfiltered network results saved subdirectory created within directory. files containing node-level metadata filtered clusters can supplied buildPublicClusterNetwork() order construct global network public clusters. full global network large practically construct, files containing cluster-level meta data filtered clusters can supplied buildPublicClusterNetworkByRepresentative() build global network using single representative sequence cluster. allows prominent public clusters still identified. See Searching Public TCR/BCR Clusters article package website.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"Returns TRUE, invisibly.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package Searching Public TCR/BCR Clusters vignette","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"","code":"set.seed(42)  ## Simulate 30 samples with a mix of public/private sequences ## samples <- 30 sample_size <- 30 # (seqs per sample) base_seqs <- c(   \"CASSIEGQLSTDTQYF\", \"CASSEEGQLSTDTQYF\", \"CASSSVETQYF\",   \"CASSPEGQLSTDTQYF\", \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\",   \"CASSLTSGYNEQFF\", \"CASSETGYNEQFF\", \"CASSLTGGNEQFF\", \"CASSYLTGYNEQFF\",   \"CASSLTGNEQFF\", \"CASSLNGYNEQFF\", \"CASSFPWDGYGYTF\", \"CASTLARQGGELFF\",   \"CASTLSRQGGELFF\", \"CSVELLPTGPLETSYNEQFF\", \"CSVELLPTGPSETSYNEQFF\",   \"CVELLPTGPSETSYNEQFF\", \"CASLAGGRTQETQYF\", \"CASRLAGGRTQETQYF\",   \"CASSLAGGRTETQYF\", \"CASSLAGGRTQETQYF\", \"CASSRLAGGRTQETQYF\",   \"CASQYGGGNQPQHF\", \"CASSLGGGNQPQHF\", \"CASSNGGGNQPQHF\", \"CASSYGGGGNQPQHF\",   \"CASSYGGGQPQHF\", \"CASSYKGGNQPQHF\", \"CASSYTGGGNQPQHF\",   \"CAWSSQETQYF\", \"CASSSPETQYF\", \"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\") # Relative generation probabilities pgen <- cbind(   stats::toeplitz(0.6^(0:(sample_size - 1))),   matrix(1, nrow = samples, ncol = length(base_seqs) - samples) ) simulateToyData(   samples = samples,   sample_size = sample_size,   prefix_length = 1,   prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, samples), rep(0, samples)),   affixes = base_seqs,   affix_probs = pgen,   num_edits = 0,   output_dir = tempdir(),   no_return = TRUE ) #> [1] TRUE  sample_files <-   file.path(tempdir(),             paste0(\"Sample\", 1:samples, \".rds\")   ) findPublicClusters(   file_list = sample_files,   input_type = \"rds\",   seq_col = \"CloneSeq\",   count_col = \"CloneCount\",   min_seq_length = NULL,   drop_matches = NULL,   top_n_clusters = 3,   min_node_count = 5,   min_clone_count = 15000,   output_dir = tempdir() )  # \\dontshow{ # Clean up temporary files file.remove(   file.path(tempdir(),             c(paste0(\"Sample\", 1:samples, \".rds\"))   ) ) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE unlink(   file.path(tempdir(), c(\"node_meta_data\", \"cluster_meta_data\")),   recursive = TRUE ) # }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateAdjacencyMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Graph Adjacency Matrix for Immune Repertoire Network — generateAdjacencyMatrix","title":"Compute Graph Adjacency Matrix for Immune Repertoire Network — generateAdjacencyMatrix","text":"Given list receptor sequences, computes adjacency matrix network graph based sequence similarity. sparseAdjacencyMatFromSeqs() deprecated equivalent generateAdjacencyMatrix().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateAdjacencyMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Graph Adjacency Matrix for Immune Repertoire Network — generateAdjacencyMatrix","text":"","code":"generateAdjacencyMatrix(   seqs,   dist_type = \"hamming\",   dist_cutoff = 1,   drop_isolated_nodes = TRUE,   method = \"default\",   verbose = FALSE )  # Deprecated equivalent: sparseAdjacencyMatFromSeqs(   seqs,   dist_type = \"hamming\",   dist_cutoff = 1,   drop_isolated_nodes = TRUE,   method = \"default\",   verbose = FALSE,   max_dist = deprecated() )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateAdjacencyMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Graph Adjacency Matrix for Immune Repertoire Network — generateAdjacencyMatrix","text":"seqs character vector containing receptor sequences. dist_type Specifies function used quantify similarity sequences. similarity two sequences determines pairwise distance respective nodes network graph, greater similarity corresponding shorter distance. Valid options \"hamming\" (default), uses hamDistBounded, \"levenshtein\", uses levDistBounded. dist_cutoff nonnegative scalar. Specifies maximum pairwise distance (based dist_type) edge connection exist two nodes. Pairs nodes whose distance less equal value joined edge connection network graph. Controls stringency network construction affects number density edges network. lower cutoff value requires greater similarity sequences order respective nodes joined edge connection. value 0 requires two sequences identical order nodes joined edge. drop_isolated_nodes Logical. TRUE, removes node joined edge connection node network graph. method character string specifying algorithm use. Choices \"default\"  \"pattern\". \"pattern\" valid dist_cutoff < 3, tends faster \"default\" sparsely connected networks, cost greater memory usage (can cause crashes large densely-connected networks, particularly dist_cutoff = 2). default algorithm tends faster densely-connected networks long sequences. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr. max_dist Equivalent dist_cutoff.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateAdjacencyMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Graph Adjacency Matrix for Immune Repertoire Network — generateAdjacencyMatrix","text":"adjacency matrix graph \\(n\\) nodes symmetric \\(n \\times n\\) matrix entry \\((,j)\\) equal 1 nodes \\(\\) \\(j\\) connected edge network graph 0 otherwise. construct graph immune repertoire network, receptor sequence modeled node. similarity receptor sequences, measured using either Hamming Levenshtein distance, determines distance nodes network graph. similar two sequences , shorter distance respective nodes. Two nodes graph joined edge distance sufficiently small, .e., receptor sequences sufficiently similar.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateAdjacencyMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Graph Adjacency Matrix for Immune Repertoire Network — generateAdjacencyMatrix","text":"sparse matrix class dgCMatrix (see dgCMatrix-class). drop_isolated_nodes = TRUE, row column names matrix indicate receptor sequences seqs vector correspond row column matrix. row column names can accessed using dimnames. returns list containing two character vectors, one row names one column names. name \\(\\)th matrix row index seqs vector corresponding \\(\\)th row \\(\\)th column matrix.  name \\(j\\)th matrix column receptor sequence corresponding \\(j\\)th row \\(j\\)th column matrix.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateAdjacencyMatrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Graph Adjacency Matrix for Immune Repertoire Network — generateAdjacencyMatrix","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateAdjacencyMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Graph Adjacency Matrix for Immune Repertoire Network — generateAdjacencyMatrix","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateAdjacencyMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Graph Adjacency Matrix for Immune Repertoire Network — generateAdjacencyMatrix","text":"","code":"generateAdjacencyMatrix(   c(\"fee\", \"fie\", \"foe\", \"fum\", \"foo\") ) #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>   fee fie foe foo #> 1   1   1   1   . #> 2   1   1   1   . #> 3   1   1   1   1 #> 5   .   .   1   1  # No edge connections exist based on a Hamming distance of 1 # (returns a 0x0 sparse matrix) generateAdjacencyMatrix(   c(\"foo\", \"foobar\", \"fubar\", \"bar\") ) #> Warning: No edges exist using the specified distance cutoff #> 0 x 0 sparse Matrix of class \"dgCMatrix\" #> <0 x 0 matrix>  # Same as the above example, but keeping all nodes # (returns a 4x4 sparse matrix) generateAdjacencyMatrix(   c(\"foo\", \"foobar\", \"fubar\", \"bar\"),   drop_isolated_nodes = FALSE ) #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>              #> [1,] 1 . . . #> [2,] . 1 . . #> [3,] . . 1 . #> [4,] . . . 1  # Relaxing the edge criteria using a Hamming distance of 2 # (still results in no edge connections) generateAdjacencyMatrix(   c(\"foo\", \"foobar\", \"fubar\", \"bar\"),   dist_cutoff = 2 ) #> Warning: No edges exist using the specified distance cutoff #> 0 x 0 sparse Matrix of class \"dgCMatrix\" #> <0 x 0 matrix>  # Using a Levenshtein distance of 2, however, # does result in edge connections generateAdjacencyMatrix(   c(\"foo\", \"foobar\", \"fubar\", \"bar\"),   dist_type = \"levenshtein\",   dist_cutoff = 2 ) #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>   foobar fubar bar #> 2      1     1   . #> 3      1     1   1 #> 4      .     1   1  # Using a Hamming distance of 3 # also results in (different) edge connections generateAdjacencyMatrix(   c(\"foo\", \"foobar\", \"fubar\", \"bar\"),   dist_cutoff = 3 ) #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>   foo foobar bar #> 1   1      1   1 #> 2   1      1   . #> 4   1      .   1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the igraph for a Network Adjacency Matrix — generateNetworkGraph","title":"Generate the igraph for a Network Adjacency Matrix — generateNetworkGraph","text":"Given adjacency matrix undirected graph, returns corresponding   igraph containing list nodes edges. generateNetworkFromAdjacencyMat() deprecated equivalent   generateNetworkGraph().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the igraph for a Network Adjacency Matrix — generateNetworkGraph","text":"","code":"generateNetworkGraph(   adjacency_matrix )  # Deprecated equivalent: generateNetworkFromAdjacencyMat(   adjacency_matrix )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the igraph for a Network Adjacency Matrix — generateNetworkGraph","text":"adjacency_matrix symmetric matrix.     Passed     graph_from_adjacency_matrix().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the igraph for a Network Adjacency Matrix — generateNetworkGraph","text":"object class igraph,     containing list nodes edges corresponding adjacency_matrix.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate the igraph for a Network Adjacency Matrix — generateNetworkGraph","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate the igraph for a Network Adjacency Matrix — generateNetworkGraph","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the igraph for a Network Adjacency Matrix — generateNetworkGraph","text":"","code":"set.seed(42) toy_data <- simulateToyData(sample_size = 10)  adj_mat <-   generateAdjacencyMatrix(     toy_data$CloneSeq   )  igraph <-   generateNetworkGraph(     adj_mat   )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Basic Output for an Immune Repertoire Network — generateNetworkObjects","title":"Generate Basic Output for an Immune Repertoire Network — generateNetworkObjects","text":"Given Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data, builds     network graph immune repertoire based sequence similarity.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Basic Output for an Immune Repertoire Network — generateNetworkObjects","text":"","code":"generateNetworkObjects(   data,   seq_col,   dist_type = \"hamming\",   dist_cutoff = 1,   drop_isolated_nodes = TRUE,   method = \"default\",   verbose = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Basic Output for an Immune Repertoire Network — generateNetworkObjects","text":"data data frame containing AIRR-Seq data, variables indexed column     observations (e.g., clones cells) indexed row. seq_col Specifies column(s) data containing     receptor sequences used basis similarity rows.     Accepts character string containing column name       numeric scalar containing column index.     Also accepts vector length 2 specifying distinct sequence columns     (e.g., alpha chain beta chain), case     similarity rows depends similarity sequence columns     (see details). dist_type Specifies function used measure similarity sequences.     similarity two sequences determines pairwise distance     respective nodes network graph. Valid options \"hamming\"     (default),     uses hamDistBounded(),     \"levenshtein\", uses     levDistBounded(). dist_cutoff nonnegative scalar. Specifies maximum pairwise distance (based     dist_type) edge connection exist two nodes. Pairs     nodes whose distance less equal value joined     edge connection network graph. Controls stringency     network construction affects number density edges network.     lower cutoff value requires greater similarity sequences order     respective nodes joined edge connection. value 0     requires two sequences identical order nodes joined     edge. drop_isolated_nodes logical scalar. TRUE, removes node joined     edge connection node network graph. method Passed generateAdjacencyMatrix(). Specifies algorithm used compute network adjacency matrix. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Basic Output for an Immune Repertoire Network — generateNetworkObjects","text":"construct immune repertoire network, TCR/BCR clone (bulk data) cell (single-cell data) modeled node network graph, corresponding single row AIRR-Seq data. node, corresponding receptor sequence considered. nucleotide amino acid sequences supported purpose. receptor sequence used basis similarity distance nodes network. Similarity sequences measured using either Hamming distance Levenshtein (edit) distance. similarity determines pairwise distance nodes network graph. similar two sequences , shorter distance respective nodes. Two nodes joined edge receptor sequences sufficiently similar, .e., distance nodes sufficiently small. single-cell data, edge connections nodes can based similarity alpha chain beta chain sequences. done providing vector length 2 seq_cols specifying two sequence columns data. distance two nodes greater two distances sequences corresponding chains. Two nodes joined edge alpha chain sequences sufficiently similar beta chain sequences sufficiently similar. See buildRepSeqNetwork package vignette details. vignette can accessed offline using vignette(\"buildRepSeqNetwork\").","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Basic Output for an Immune Repertoire Network — generateNetworkObjects","text":"constructed network contains nodes, function return  NULL, invisibly, warning. Otherwise, function invisibly     returns list containing following items: igraph object class igraph containing list nodes     edges network graph. adjacency_matrix network graph adjacency matrix, stored sparse matrix class     dgCMatrix Matrix package. See     dgCMatrix-class. node_data data frame containing containing metadata network nodes,     row corresponds node network graph. data frame contains     variables data (unless otherwise specified via subset_cols)     addition computed node-level network properties     node_stats = TRUE. row's name name corresponding     row data.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate Basic Output for an Immune Repertoire Network — generateNetworkObjects","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package buildRepSeqNetwork vignette","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Basic Output for an Immune Repertoire Network — generateNetworkObjects","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Basic Output for an Immune Repertoire Network — generateNetworkObjects","text":"","code":"set.seed(42) toy_data <- simulateToyData()  net <-   generateNetworkObjects(     toy_data,     \"CloneSeq\"   )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cluster-Level Network Properties — getClusterStats","title":"Compute Cluster-Level Network Properties — getClusterStats","text":"Given node-level metadata adjacency matrix network graph   partitioned clusters, computes network properties clusters   returns data frame. addClusterStats()   preferred getClusterStats() situations.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cluster-Level Network Properties — getClusterStats","text":"","code":"getClusterStats(   data,   adjacency_matrix,   seq_col = NULL,   count_col = NULL,   cluster_id_col = \"cluster_id\",   degree_col = NULL,   cluster_fun = deprecated(),   verbose = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cluster-Level Network Properties — getClusterStats","text":"data data frame containing node-level metadata network,       row corresponding network node. adjacency_matrix adjacency matrix network. seq_col Specifies column(s) data containing       receptor sequences upon whose similarity network based.       Accepts character numeric vector length 1 2,       containing either column names column indices.       provided, related cluster-level properties computed. count_col Specifies column data containing       measure abundance (clone count UMI count).       Accepts character string containing column name       numeric scalar containing column index.       provided, related cluster-level properties computed. cluster_id_col Specifies column data containing cluster membership       variable identifies cluster node belongs.       Accepts character string containing column name       numeric scalar containing column index. degree_col Specifies column data containing       network degree node.       Accepts character string containing column name       numeric scalar containing column index.       column exist, network degree computed. cluster_fun nothing. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Cluster-Level Network Properties — getClusterStats","text":"use getClusterStats(),     network graph must first partitioned clusters,     can done using     addClusterMembership().     name cluster membership variable node metadata     must provided cluster_id_col argument     calling getClusterStats().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cluster-Level Network Properties — getClusterStats","text":"data frame containing one row cluster network     following variables: cluster_id cluster ID number. node_count number nodes cluster. mean_seq_length mean sequence length cluster.   present length(seq_col) == 1. A_mean_seq_length mean first sequence length cluster.   present length(seq_col) == 2. B_mean_seq_length mean second sequence length cluster.   present length(seq_col) == 2. mean_degree mean network degree cluster. max_degree maximum network degree cluster. seq_w_max_degree receptor sequence possessing maximum degree within cluster.   present length(seq_col) == 1. A_seq_w_max_degree first sequence node possessing maximum degree within cluster.   present length(seq_col) == 2. B_seq_w_max_degree second sequence node possessing maximum degree within cluster.   present length(seq_col) == 2. agg_count aggregate count among nodes cluster (based counts   count_col). max_count maximum count among nodes cluster (based counts   count_col). seq_w_max_count receptor sequence possessing maximum count within cluster.   present length(seq_col) == 1. A_seq_w_max_count first sequence node possessing maximum count within cluster.   present length(seq_col) == 2. B_seq_w_max_count second sequence node possessing maximum count within cluster.   present length(seq_col) == 2. diameter_length longest geodesic distance cluster, computed length   vector returned get_diameter(). assortativity assortativity coefficient cluster's graph, based degree   (minus one) node cluster (degree computed based   upon nodes within cluster). Computed using   assortativity_degree(). global_transitivity transitivity (.e., clustering coefficient) cluster's graph,   estimates probability adjacent vertices connected. Computed using   transitivity() type = \"global\". edge_density number edges cluster fraction maximum possible number   edges. Computed using edge_density(). degree_centrality_index centrality index cluster's graph based within-cluster network degree.   Computed centralization element output   centr_degree(). closeness_centrality_index centrality index cluster's graph based closeness,   .e., distance nodes cluster.   Computed using centralization(). eigen_centrality_index centrality index cluster's graph based eigenvector centrality scores,   .e., values first eigenvector adjacency matrix cluster.   Computed centralization element output   centr_eigen(). eigen_centrality_eigenvalue eigenvalue corresponding first eigenvector adjacency matrix   cluster. Computed value element output   eigen_centrality().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Cluster-Level Network Properties — getClusterStats","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Cluster-Level Network Properties — getClusterStats","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Cluster-Level Network Properties — getClusterStats","text":"","code":"set.seed(42) toy_data <- simulateToyData()  net <-   generateNetworkObjects(     toy_data, \"CloneSeq\"   )  net <- addClusterMembership(net)  net$cluster_data <-   getClusterStats(     net$node_data,     net$adjacency_matrix,     seq_col = \"CloneSeq\",     count_col = \"CloneCount\"   )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Cells or Clones in a Neighborhood Around a Target Sequence — getNeighborhood","title":"Identify Cells or Clones in a Neighborhood Around a Target Sequence — getNeighborhood","text":"Given Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data     target receptor sequence present within data, identifies     \"neighborhood\" comprised cells/clones receptor sequences sufficiently     similar target sequence.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Cells or Clones in a Neighborhood Around a Target Sequence — getNeighborhood","text":"","code":"getNeighborhood(     data,     seq_col,     target_seq,     dist_type = \"hamming\",     max_dist = 1 )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Cells or Clones in a Neighborhood Around a Target Sequence — getNeighborhood","text":"data data frame containing AIRR-Seq data. seq_col Specifies column data containing receptor sequences.     Accepts character string containing column name       numeric scalar containing column index. target_seq character string containing target receptor sequence. Must receptor     sequence possessed one clones/cells AIRR-Seq data. dist_type Specifies function used quantify similarity receptor     sequences. similarity two sequences determines pairwise     distance, greater similarity corresponding shorter distance. Valid     options \"hamming\" (default),     uses hamDistBounded(),     \"levenshtein\", uses     levDistBounded(). max_dist Determines whether cell/clone belongs neighborhood based     receptor sequence's distance target sequence. distance based     dist_type argument. max_dist specifies maximum     distance cell/clone belongs neighborhood. Lower values     require greater similarity target sequence receptor     sequences cells/clones neighborhood.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Cells or Clones in a Neighborhood Around a Target Sequence — getNeighborhood","text":"data frame containing rows data corresponding     cells/clones neighborhood. cell/clone AIRR-Seq data possesses target sequence     receptor sequence, value NULL returned.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Identify Cells or Clones in a Neighborhood Around a Target Sequence — getNeighborhood","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify Cells or Clones in a Neighborhood Around a Target Sequence — getNeighborhood","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Cells or Clones in a Neighborhood Around a Target Sequence — getNeighborhood","text":"","code":"set.seed(42) toy_data <- simulateToyData(sample_size = 500)  # Get neighborhood around first clone sequence nbd <-   getNeighborhood(     toy_data,     seq_col = \"CloneSeq\",     target_seq = \"GGGGGGGAATTGG\"   )  head(nbd) #>         CloneSeq CloneFrequency CloneCount SampleID #> 12  GGGGGGGAATTG    0.001783780       3518  Sample1 #> 24 GGGGGGGAATCGG    0.001824344       3598  Sample1 #> 30 GGGCGGGAATTGG    0.002689868       5305  Sample1 #> 31 GGGGGAGAATTGG    0.002538262       5006  Sample1 #> 35 GGGGGGGAATTGC    0.002619896       5167  Sample1 #> 37 GGGAGGGAATTGG    0.001884175       3716  Sample1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":null,"dir":"Reference","previous_headings":"","what":"Bounded Computation of Hamming Distance — hamDistBounded","title":"Bounded Computation of Hamming Distance — hamDistBounded","text":"Computes Hamming distance two strings subject specified upper bound.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bounded Computation of Hamming Distance — hamDistBounded","text":"","code":"hamDistBounded(a, b, k)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bounded Computation of Hamming Distance — hamDistBounded","text":"character string. b character string compared . k upper bound Hamming distance b.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bounded Computation of Hamming Distance — hamDistBounded","text":"two character strings equal length, Hamming distance measures total number character differences characters corresponding positions. , position one string, character position checked see whether differs character position string. two character strings different lengths, Hamming distance defined. However, hamDistBounded() accommodate strings different lengths, conservative fashion seeks yield meaningful result purpose checking whether two strings sufficiently similar. two strings differ length, placeholder characters appended shorter string length matches longer string. appended placeholder character treated different character corresponding position longer string. effectively truncating end longer string adding number deleted characters Hamming distance shorter string truncated longer string (actually done practice, computation faster). method used hamDistBounded() accommodate unequal string lengths results distance values whose meaning may questionable, depending context, two strings different lengths. decision append placeholder characters end shorter string (opposed prepending beginning) ad hoc somewhat arbitrary. effect, allows two strings different lengths considered sufficiently similar content shorter string sufficiently matches beginning content longer string difference string length great. comparing sequences different lengths, Levenshtein distance (see levDistBounded()) appropriate meaningful using hamDistBounded(), comes cost greater computational burden. Computation aborted early Hamming distance determined exceed specified upper bound. functionality designed cases distinguishing values upper bound meaningful, taking advantage fact reduce computational burden.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bounded Computation of Hamming Distance — hamDistBounded","text":"integer. Hamming distance exceeds specified upper bound k, value -1 returned. Otherwise, returns Hamming distance b.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bounded Computation of Hamming Distance — hamDistBounded","text":"computed value may invalid length either string close greater value INT_MAX compiler used build time (typically 2147483647).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bounded Computation of Hamming Distance — hamDistBounded","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bounded Computation of Hamming Distance — hamDistBounded","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bounded Computation of Hamming Distance — hamDistBounded","text":"","code":"# using an upper bound of 3 # (trivial since strings have length 3) hamDistBounded(\"foo\", \"foo\", 3) #> [1] 0 hamDistBounded(\"foo\", \"fee\", 3) #> [1] 2 hamDistBounded(\"foo\", \"fie\", 3) #> [1] 2 hamDistBounded(\"foo\", \"foe\", 3) #> [1] 1 hamDistBounded(\"foo\", \"fum\", 3) #> [1] 2 hamDistBounded(\"foo\", \"bar\", 3) #> [1] 3  # using an upper bound of 1 # (most distances exceed the upper bound) hamDistBounded(\"foo\", \"fee\", 1) #> [1] -1 hamDistBounded(\"foo\", \"fie\", 1) #> [1] -1 hamDistBounded(\"foo\", \"foe\", 1) #> [1] 1 hamDistBounded(\"foo\", \"fum\", 1) #> [1] -1 hamDistBounded(\"foo\", \"bar\", 1) #> [1] -1  # comparing strings of nonmatching length hamDistBounded(\"foo\", \"fubar\", 10) #> [1] 4 hamDistBounded(\"foo\", \"foobar\", 10) #> [1] 3 hamDistBounded(\"foo\", \"barfoo\", 10) #> [1] 6"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":null,"dir":"Reference","previous_headings":"","what":"Bounded Computation of Levenshtein Distance — levDistBounded","title":"Bounded Computation of Levenshtein Distance — levDistBounded","text":"Computes Levenshtein distance two strings subject specified upper bound.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bounded Computation of Levenshtein Distance — levDistBounded","text":"","code":"levDistBounded(a, b, k)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bounded Computation of Levenshtein Distance — levDistBounded","text":"character string. b character string compared . k integer specifying upper bound Levenshtein distance b.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bounded Computation of Levenshtein Distance — levDistBounded","text":"Levenshtein distance (sometimes referred edit distance) two character strings measures minimum number single-character edits (insertions, deletions transformations) needed transform one string . Compared Hamming distance (see hamDistBounded()), Levenshtein distance particularly useful comparing sequences different lengths, can account insertions deletions, whereas Hamming distance accounts single-character transformations. However, computational burden Levenshtein distance can significantly greater Hamming distance. Computation aborted early Levenshtein distance determined exceed specified upper bound. functionality designed cases distinguishing values upper bound meaningful, taking advantage fact reduce computational burden.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bounded Computation of Levenshtein Distance — levDistBounded","text":"integer. Levenshtein distance exceeds specified upper bound k, value -1 returned. Otherwise, returns Levenshtein distance b.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bounded Computation of Levenshtein Distance — levDistBounded","text":"computed value may invalid length either string close greater value INT_MAX compiler used build time (typically 2147483647).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bounded Computation of Levenshtein Distance — levDistBounded","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bounded Computation of Levenshtein Distance — levDistBounded","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bounded Computation of Levenshtein Distance — levDistBounded","text":"","code":"# equal string lengths, # character transmutations only levDistBounded(\"foo\", \"bar\", 3) #> [1] 3 hamDistBounded(\"foo\", \"bar\", 3) # agrees with Hamming distance #> [1] 3  # one insertion, one deletion levDistBounded(\"1234567\", \"1.23457\", 7) #> [1] 2 hamDistBounded(\"1234567\", \"1.23457\", 7) # compare to Hamming distance #> [1] 5  # same as above, but with a different lower bound levDistBounded(\"1234567\", \"1.23457\", 3) # within the bound #> [1] 2 hamDistBounded(\"1234567\", \"1.23457\", 3) # exceeds the bound #> [1] -1  # one deletion (last position) levDistBounded(\"1234567890\", \"123456789\", 10) #> [1] 1 hamDistBounded(\"1234567890\", \"123456789\", 10) #> [1] 1  # note the Hamming distance agrees with the Levenshtein distance # for the above example, since the deletion occurs in the final # character position. This is due to how hamDistBounded() handles # strings of different lengths. In the example below, however...  # one deletion (first position) levDistBounded(\"1234567890\", \"234567890\", 10) #> [1] 1 hamDistBounded(\"1234567890\", \"234567890\", 10) # compare to Hamming distance #> [1] 10  # one deletion, one transmutation levDistBounded(\"foobar\", \"fubar\", 6) #> [1] 2 hamDistBounded(\"foobar\", \"fubar\", 6) # compare to Hamming distance #> [1] 5"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","title":"Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"Given igraph immune repertoire network,   generates plot network graph according user specifications. Deprecated. Replaced addPlots().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"","code":"plotNetworkGraph(   igraph,   plot_title = NULL,   plot_subtitle = NULL,   color_nodes_by = NULL,   color_scheme = \"default\",   color_legend = \"auto\",   color_title = \"auto\",   edge_width = 0.1,   size_nodes_by = 0.5,   node_size_limits = NULL,   size_title = \"auto\",   outfile = NULL,   pdf_width = 12,   pdf_height = 8 )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"igraph object class igraph. plot_title character string containing plot title. Passed       labs(). plot_subtitle character string containing plot subtitle. Passed       labs(). color_nodes_by vector whose length matches number nodes network.       values used encode color node. argument value       NULL (default) leaves nodes uncolored. Passed color       aesthetic mapping geom_node_point(). color_scheme character string specifying color scale used color nodes.     \"default\" uses default ggplot() colors.     options one viridis color scales (e.g., \"plasma\",     \"\" valid inputs option argument     scale_color_viridis())     (discrete variables) palette     hcl.pals() (e.g., \"RdYlGn\").     viridis color scales can include suffix \"-1\"     reverse direction (e.g., \"plasma-1\" \"-1\"). color_legend logical scalar specifying whether display color legend plot.     default value \"auto\" shows color legend color_nodes_by     continuous variable discrete variable 20 distinct values. color_title character string (NULL) specifying title color legend.     applicable  color_nodes_by vector.     color_title = \"auto\" (default), title color legend     name vector provided color_nodes_by. edge_width numeric scalar specifying width graph edges plot.       Passed width argument       geom_edge_link0(). size_nodes_by numeric scalar specifying size nodes, numeric vector     positive entires encodes size node (whose length matches     number nodes network). Alternatively, argument value     NULL uses default ggraph() size     nodes.     Passed size aesthetic mapping     geom_node_point(). size_title character string (NULL) specifying title size legend.     applicable  size_nodes_by vector.     size_title = \"auto\" (default),  title color legend     name vector provided  size_nodes_by. node_size_limits numeric vector length 2, specifying minimum maximum node size.     applicable size_nodes_by vector.     node_size_limits = NULL, default size scale used. outfile optional file path saving plot pdf. NULL     (default), pdf saved. pdf_width Sets plot width writing pdf. Passed width argument     pdf(). pdf_height Sets plot height writing pdf. Passed height argument     pdf().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"ggraph object.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package Network Visualization article package website","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"","code":"set.seed(42) toy_data <- simulateToyData()  # Generate network for data net <- buildNet(toy_data, \"CloneSeq\")  # Plot network graph net_plot <- plotNetworkGraph(   net$igraph,   color_nodes_by =     net$node_data$SampleID,   color_title = NULL,   size_nodes_by =     net$node_data$CloneCount,   size_title = \"Clone Count\",   node_size_limits = c(0.5, 1.5)) #> Warning: `plotNetworkGraph()` was deprecated in NAIR 1.0.1. #> ℹ Please use `addPlots()` instead.  print(net_plot)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Save List of Network Objects — saveNetwork","title":"Save List of Network Objects — saveNetwork","text":"Given list network objects returned     buildRepSeqNetwork() generateNetworkObjects,     saves contents according specified file format scheme.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save List of Network Objects — saveNetwork","text":"","code":"saveNetwork(   net,   output_dir,   output_type = \"rds\",   output_name = \"MyRepSeqNetwork\",   pdf_width = 12,   pdf_height = 10,   verbose = FALSE,   output_filename = deprecated() )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save List of Network Objects — saveNetwork","text":"net list network objects returned       buildRepSeqNetwork()       generateNetworkObjects(). output_dir file path specifying directory write file(s). output_type character string specifying file format scheme use writing output   file. Valid options \"individual\", \"rds\" \"rda\".   See detials. output_name character string. files saved file names beginning value. pdf_width list contains plots, controls width plot writing     pdf. Passed width argument pdf     function. pdf_height list contains plots, controls height plot writing     pdf. Passed height argument pdf     function. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr(). output_filename Equivalent output_name.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save List of Network Objects — saveNetwork","text":"list net must contain named elements     igraph (class igraph),     adjacency_matrix (matrix     dgCMatrix encoding edge connections),     node_data (data.frame containing node metadata),     corresponding network. list returned     buildRepSeqNetwork()     generateNetworkObjects()     example valid input net argument. additional elements cluster_data (data.frame)     plots (list containing objects class     ggraph     possibly one matrix named graph_layout)     also saved, present. default, list net saved compressed data file     RDS format, plots present printed single pdf containing     one plot per page. name saved file begins value output_name.     output_type one \"rds\" \"rda\",     two files saved (rds/rda pdf); file,     output_name followed appropriate file extension. output_type = \"individual\", element net saved     separate file, output_name followed : _NodeMetadata.csv node_data _ClusterMetadata.csv cluster_data _EdgeList.txt igraph _AdjacencyMatrix.mtx adjacency_matrix _Plots.rda plots _GraphLayout.txt plots$graph_layout _Details.rds details node_data cluster_data saved using     write.csv(),     row.names TRUE node_data     FALSE cluster_data.     igraph saved using     write_graph() format = \"edgelist\".     adjacency matrix saved using writeMM().     graph layout saved using write()     ncolumns = 2.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save List of Network Objects — saveNetwork","text":"Returns TRUE output saved, otherwise returns FALSE (warning output_dir non-null specified directory exist created).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Save List of Network Objects — saveNetwork","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Save List of Network Objects — saveNetwork","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save List of Network Objects — saveNetwork","text":"","code":"set.seed(42) toy_data <- simulateToyData()  net <- buildRepSeqNetwork(   toy_data,   seq_col = \"CloneSeq\",   node_stats = TRUE,   cluster_stats = TRUE,   color_nodes_by = c(\"transitivity\", \"SampleID\") )  # save as single RDS file saveNetwork(   net,   output_dir = tempdir(),   verbose = TRUE ) #> List of network objects saved to file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork.rds #> Network graph plots printed to pdf file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork.pdf #> [1] TRUE  saveNetwork(   net,   output_dir = tempdir(),   output_type = \"individual\",   verbose = TRUE ) #> Network details saved to data file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork_Details.txt #> Node metadata saved to file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork_NodeMetadata.csv #> Cluster metadata saved to file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork_ClusterMetadata.csv #> Network igraph saved in edgelist format to file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork_EdgeList.txt #> Adjacency matrix saved to file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork_AdjacencyMatrix.mtx #> List of network graph plots named 'plots' saved to data file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork_Plots.rda #> List 'net' saved to file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork.rda #> Network graph plots printed to pdf file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork.pdf #> Graph layout for plots saved to file: #>   /tmp/RtmpjcbgNe/MyRepSeqNetwork_GraphLayout.txt #> [1] TRUE  # \\dontshow{ # clean up temp files file.remove(   file.path(     tempdir(),     c(\"MyRepSeqNetwork_NodeMetadata.csv\",       \"MyRepSeqNetwork_ClusterMetadata.csv\",       \"MyRepSeqNetwork_EdgeList.txt\",       \"MyRepSeqNetwork_AdjacencyMatrix.mtx\",       \"MyRepSeqNetwork_Details.txt\",       \"MyRepSeqNetwork_Plots.rda\",       \"MyRepSeqNetwork_GraphLayout.txt\",       \"MyRepSeqNetwork.pdf\",       \"MyRepSeqNetwork.rds\"     )   ) ) #> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE # }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Plots to a PDF — saveNetworkPlots","title":"Write Plots to a PDF — saveNetworkPlots","text":"Given list plots, write plots single pdf file containing one     plot per page, optionally save graph layout csv file.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Plots to a PDF — saveNetworkPlots","text":"","code":"saveNetworkPlots(   plotlist,   outfile,   pdf_width = 12,   pdf_height = 10,   outfile_layout = NULL,   verbose = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Plots to a PDF — saveNetworkPlots","text":"plotlist named list whose elements class ggraph. May     also contain element named graph_layout matrix specifying     graph layout. outfile connection character string containing file path     used save pdf. pdf_width Sets page width. Passed width argument     pdf(). pdf_height Sets page height. Passed height argument     pdf(). outfile_layout optional connection file path saving graph layout.     Passed     file argument write(),     called ncolumns = 2. verbose Logical. TRUE, generates messages tasks       performed progress, well relevant properties intermediate       outputs. Messages sent stderr().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Plots to a PDF — saveNetworkPlots","text":"Returns TRUE, invisibly.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Write Plots to a PDF — saveNetworkPlots","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. doi: 10.3389/fimmu.2023.1181825 Webpage NAIR package","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write Plots to a PDF — saveNetworkPlots","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Plots to a PDF — saveNetworkPlots","text":"","code":"set.seed(42) toy_data <- simulateToyData()  net <-   generateNetworkObjects(     toy_data,     \"CloneSeq\"   )  net <-   addPlots(     net,     color_nodes_by =       c(\"SampleID\", \"CloneCount\"),     print_plots = TRUE   )    saveNetworkPlots(   net$plots,   outfile =     file.path(tempdir(), \"network.pdf\"),   outfile_layout =     file.path(tempdir(), \"graph_layout.txt\") )  # Load saved graph layout graph_layout <- matrix(   scan(file.path(tempdir(), \"graph_layout.txt\"), quiet = TRUE),   ncol = 2 ) all.equal(graph_layout, net$plots$graph_layout) #> [1] \"Mean relative difference: 8.87687e-08\"   # \\dontshow{ # clean up temporary directory file.remove(   file.path(tempdir(), c(\"network.pdf\", \"graph_layout.txt\")) ) #> [1] TRUE TRUE # }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Toy AIRR-Seq Data — simulateToyData","title":"Generate Toy AIRR-Seq Data — simulateToyData","text":"Generates toy data can used test demonstrate behavior functions NAIR package.  Created lightweight tool use tests, examples vignettes. function intended simulate realistic data.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Toy AIRR-Seq Data — simulateToyData","text":"","code":"simulateToyData(   samples = 2,   chains = 1,   sample_size = 100,   prefix_length = 7,   prefix_chars = c(\"G\", \"A\", \"T\", \"C\"),   prefix_probs = rbind(     \"sample1\" = c(12, 4, 1, 1),     \"sample2\" = c(4, 12, 1, 1)),   affixes = c(\"AATTGG\", \"AATCGG\", \"AATTCG\",               \"AATTGC\", \"AATTG\", \"AATTC\"),   affix_probs = rbind(     \"sample1\" = c(10, 4, 2, 2, 1, 1),     \"sample2\" = c(1, 1, 1, 2, 2.5, 2.5)),   num_edits = 0,   edit_pos_probs = function(seq_length) {     stats::dnorm(seq(-4, 4, length.out = seq_length))   },   edit_ops = c(\"insertion\", \"deletion\", \"transmutation\"),   edit_probs = c(5, 1, 4),   new_chars = prefix_chars,   new_probs = prefix_probs,   output_dir = NULL,   no_return = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Toy AIRR-Seq Data — simulateToyData","text":"samples number distinct samples include data. chains number chains (either 1 2) generate receptor sequences. sample_size number observations generate per sample. prefix_length length random prefix generated observed sequence.     Specifically, number elements prefix_chars sampled     replacement concatenated form prefix. prefix_chars character vector containing characters strings sample     generating prefix observed sequence. prefix_probs numeric matrix whose column dimension matches length prefix_chars     row dimension matching value samples. \\(\\)th row     specifies relative probability weights assigned element     prefix_chars sampling form prefix sequence     \\(\\)th sample. affixes character vector containing characters strings sample     generating suffix observed sequence. affix_probs numeric matrix whose column dimension matches length affixes     row dimension matching value samples. \\(\\)th     row specifies relative probability weights assigned element     affixes sampling form suffix sequence     \\(\\)th sample. num_edits nonnegative integer specifying number random edit operations     perform observed sequence initial generation. edit_pos_probs function accepts nonnegative integer (character length     sequence) argument returns vector length containing     probability weights. time edit operation performed sequence,     character position perform operation randomly     determined according probabilities given function. edit_ops character vector specifying possible operations can performed     edit. default value includes valid operations (insertion,     deletion, transmutation). edit_probs numeric vector length edit_ops, specifying relative     probability weights assigned edit operation. new_chars character vector containing characters strings sample     performing insertion edit operation. new_probs numeric matrix whose column dimension matches length new_chars     row dimension matching value samples. \\(\\)th row     specifies, \\(\\)th sample, relative probability weights assigned     element new_chars performing transmutation insertion     random edit operation. output_dir optional character string specifying file directory save generated     data. One file generated per sample. no_return logical flag can used prevent function returning     generated data. TRUE, function instead return TRUE     processes complete.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Toy AIRR-Seq Data — simulateToyData","text":"observed sequence obtained separately generating prefix     suffix according specified settings, joining two performing     sequential rounds edit operations randomized according user's     specifications. Count data generated observation; note count data     generated independently observed sequences relationship     .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Toy AIRR-Seq Data — simulateToyData","text":"no_return = FALSE (default), data.frame whose contents depend     value chains argument. chains = 1, data frame contains following variables: CloneSeq \"receptor sequence\" observation. CloneFrequency \"clone frequency\" observation (clone count     proportion aggregate clone count within sample). CloneCount \"clone count\" observation. SampleID sample ID observation. chains = 2, data frame contains following variables: AlphaSeq \"alpha chain\" receptor sequence observation. AlphaSeq \"beta chain\" receptor sequence observation. UMIs \"unique molecular identifier count\" observation. Count \"count\" observation. SampleID sample ID observation. no_return = TRUE, function returns TRUE upon completion.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Toy AIRR-Seq Data — simulateToyData","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Toy AIRR-Seq Data — simulateToyData","text":"","code":"set.seed(42)  # Bulk data from two samples dat1 <- simulateToyData()  # Single-cell data with alpha and beta chain sequences dat2 <- simulateToyData(chains = 2)  # Write data to file, return nothing simulateToyData(sample_size = 500,                 num_edits = 10,                 no_return = TRUE,                 output_dir = tempdir()) #> [1] TRUE  # Example customization dat4 <-   simulateToyData(     samples = 5,     sample_size = 50,     prefix_length = 0,     prefix_chars = \"\",     prefix_probs = matrix(1, nrow = 5),     affixes = c(\"CASSLGYEQYF\", \"CASSLGETQYF\",                 \"CASSLGTDTQYF\", \"CASSLGTEAFF\",                 \"CASSLGGTEAFF\", \"CAGLGGRDQETQYF\",                 \"CASSQETQYF\", \"CASSLTDTQYF\",                 \"CANYGYTF\", \"CANTGELFF\",                 \"CSANYGYTF\"),     affix_probs = matrix(1, ncol = 11, nrow = 5),   )  ## Simulate 30 samples with a mix of public/private sequences ## samples <- 30 sample_size <- 30 # (seqs per sample) base_seqs <- c(   \"CASSIEGQLSTDTQYF\", \"CASSEEGQLSTDTQYF\", \"CASSSVETQYF\",   \"CASSPEGQLSTDTQYF\", \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\",   \"CASSLTSGYNEQFF\", \"CASSETGYNEQFF\", \"CASSLTGGNEQFF\", \"CASSYLTGYNEQFF\",   \"CASSLTGNEQFF\", \"CASSLNGYNEQFF\", \"CASSFPWDGYGYTF\", \"CASTLARQGGELFF\",   \"CASTLSRQGGELFF\", \"CSVELLPTGPLETSYNEQFF\", \"CSVELLPTGPSETSYNEQFF\",   \"CVELLPTGPSETSYNEQFF\", \"CASLAGGRTQETQYF\", \"CASRLAGGRTQETQYF\",   \"CASSLAGGRTETQYF\", \"CASSLAGGRTQETQYF\", \"CASSRLAGGRTQETQYF\",   \"CASQYGGGNQPQHF\", \"CASSLGGGNQPQHF\", \"CASSNGGGNQPQHF\", \"CASSYGGGGNQPQHF\",   \"CASSYGGGQPQHF\", \"CASSYKGGNQPQHF\", \"CASSYTGGGNQPQHF\",   \"CAWSSQETQYF\", \"CASSSPETQYF\", \"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\") # Relative generation probabilities pgen <- cbind(   stats::toeplitz(0.6^(0:(sample_size - 1))),   matrix(1, nrow = samples, ncol = length(base_seqs) - samples)) dat5 <-   simulateToyData(     samples = samples,     sample_size = sample_size,     prefix_length = 1,     prefix_chars = c(\"\", \"\"),     prefix_probs = cbind(rep(1, samples), rep(0, samples)),     affixes = base_seqs,     affix_probs = pgen,     num_edits = 0   )  ## Simulate 30 samples from two groups (treatment/control) ## samples_c <- samples_t <- 15 # Number of samples by control/treatment group samples <- samples_c + samples_t sample_size <- 30 # (seqs per sample) base_seqs <- # first five are associated with treatment   c(\"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\", \"CASSIEGQLSTDTQYF\",     \"CASSEEGQLSTDTQYF\", \"CASSPEGQLSTDTQYF\",     \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\") # Relative generation probabilities by control/treatment group pgen_c <- matrix(rep(c(rep(1, 5), rep(30, 3)), times = samples_c),                  nrow = samples_c, byrow = TRUE) pgen_t <- matrix(rep(c(1, 1, rep(1/3, 3), rep(2, 3)), times = samples_t),                  nrow = samples_t, byrow = TRUE) pgen <- rbind(pgen_c, pgen_t) dat6 <-   simulateToyData(     samples = samples,     sample_size = sample_size,     prefix_length = 1,     prefix_chars = c(\"\", \"\"),     prefix_probs =       cbind(rep(1, samples), rep(0, samples)),     affixes = base_seqs,     affix_probs = pgen,     num_edits = 0   )   # \\dontshow{ # clean up temp directory file.remove(   file.path(tempdir(), paste0(\"Sample\", 1:2, \".rds\")) ) #> [1] TRUE TRUE # }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-104","dir":"Changelog","previous_headings":"","what":"NAIR 1.0.4","title":"NAIR 1.0.4","text":"CRAN release: 2024-03-02","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"minor-changes-and-bug-fixes-1-0-4","dir":"Changelog","previous_headings":"","what":"Minor Changes and Bug Fixes","title":"NAIR 1.0.4","text":"Updated tests compatibility changes guides ggplot2 (thanks Teun van den Brand ggplot2 development team contributing updates) Saving network output using output_type = \"individual\" now also saves entire network list RData file (.rda).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-103","dir":"Changelog","previous_headings":"","what":"NAIR 1.0.3","title":"NAIR 1.0.3","text":"CRAN release: 2024-01-09","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"minor-changes-and-bug-fixes-1-0-3","dir":"Changelog","previous_headings":"","what":"Minor Changes and Bug Fixes","title":"NAIR 1.0.3","text":"Removed package test checked particular numbers clusters resulting specific applications clustering algorithms igraph package. test longer passes igraph version 1.6.0. Rather update test pass, removed avoid future occurrences issue.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-102","dir":"Changelog","previous_headings":"","what":"NAIR 1.0.2","title":"NAIR 1.0.2","text":"CRAN release: 2023-09-27","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"minor-changes-and-bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"Minor Changes and Bug Fixes","title":"NAIR 1.0.2","text":"Fixed bug levDistBounded() causes undefined behavior either string empty removing common prefix suffix. bug appear affect returned value. levDistBounded.cpp hamDistBounded.cpp now use string.h header instead strings.h","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-101","dir":"Changelog","previous_headings":"","what":"NAIR 1.0.1","title":"NAIR 1.0.1","text":"CRAN release: 2023-09-14","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"breaking-changes-1-0-1","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"NAIR 1.0.1","text":"getClusterStats() now requires cluster ID column specified present provided node metadata; longer compute cluster membership since return node metadata (membership values computed lost). addClusterMembership() now accepts returns list network objects instead accepting returning node metadata igraph additional input. first parameter data deprecated moved position, second parameter net becoming first parameter accepting list network objects instead just igraph. function still also supports old usage (now), long net data specified name (updated argument positions used). See section “Unified Primary Argument Across Functions” context. Functions longer save output file default. user must provide directory/file path appropriate parameter output saved. instances \"individual\" default value output_type changed \"rds\". \"rds\" preferred default since reduces file size/clutter list network objects can restored intact (list primary input/output core NAIR functions) name desired. \"rda\" used file transferred across machines (list restored name net), \"individual\" used output accessed outside R. output_type = \"individual\" now writes row names node metadata first column csv file. contain original row IDs input data. Default value output_type findAssociatedClones() input_type buildAssociatedClusterNetwork() changed \"csv\" \"rds\", since files intermediate outputs typically need access outside R another machine. buildPublicClusterNetworkByRepresentative() default value output_type changed \"rda\" \"rds\".","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"new-features-1-0-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"NAIR 1.0.1","text":"section covers general new features. new features grouped subject following sections. buildRepSeqNetwork() now convenient alias buildNet(). list returned buildRepSeqNetwork() now contains element details network metadata argument values used function call. Plots nodes colored according continuous variable now legends displayed using color bar instead discrete legend values, unless variable also used size nodes. cases invalid value supplied function argument meaningful default exists, instead raising error, argument’s value replaced default value warning raised.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"unified-primary-argument-across-functions-1-0-1","dir":"Changelog","previous_headings":"","what":"Unified Primary Argument Across Functions","title":"NAIR 1.0.1","text":"Several changes additions made favor using list network objects returned buildRepSeqNetwork() unified primary input output across core NAIR functions. Adopting convention offers several benefits: greatly simplifies usage, since users longer need know components list input function (function returns); eliminates task manually updating list network objects; results core functions working pipe operator; importantly, improves functionality within functions, since functions can read modify anything network list. instance, addPlots() can use coordinate layout existing plots ensure consistent layout across plots (longer guaranteed otherwise), addClusterStats() can add cluster membership values node metadata record details cluster properties correspond membership values (values different instance clustering using different algorithm). following changes encompass move toward using network list primary input/output: addClusterMembership() parameters return value changed. See Breaking Changes section details. addPlots() added preferred alternative generateNetworkGraphPlots() plotNetworkGraph() addClusterStats() added preferred alternative getClusterStats() addNodeStats() added preferred alternative addNodeNetworkStats() labelClusters() added preferred alternative addClusterLabels() labelNodes() added preferred alternative addGraphLabels() See new “Supplementary Functions” vignette examples.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"multiple-instances-of-clustering-1-0-1","dir":"Changelog","previous_headings":"","what":"Multiple Instances of Clustering","title":"NAIR 1.0.1","text":"following changes additions made facilitate multiple instances clustering network using different clustering algorithms. See new “Cluster Analysis” vignette examples. functions can perform clustering now parameter cluster_id_name can used specify custom name cluster membership variable added node metadata. time new cluster membership variable added node metadata, information added details recording clustering algorithm used name corresponding cluster membership variable. cluster properties computed addClusterStats(), information added details recording cluster membership variable corresponding cluster properties. labelClusters() addClusterLabels() now check details confirm cluster properties match specified cluster membership variable using node counts cluster properties. labelClusters() addClusterLabels() can now used without cluster properties; node count computed cluster membership values. labelClusters() can used label multiple plots . addClusterMembership(), addClusterStats() addNodeStats() now allow custom argument values optional parameters clustering algorithm ellipses (...) argument. may also interest future add functionality allowing network list contain multiple sets cluster properties corresponding different instances clustering.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"plots-and-graph-layout-1-0-1","dir":"Changelog","previous_headings":"","what":"Plots and Graph Layout","title":"NAIR 1.0.1","text":"Plotting functions longer fix random seed generating coordinate layout plot. order facilitate consistent layout across multiple plots network graph, following changes made. Multiple plots produced call buildRepSeqNetwork(), addPlots() generateNetworkGraphPlots() use common layout. Plot lists created buildRepSeqNetwork(), addPlots() generateNetworkGraphPlots() now include matrix graph_layout containing layout used plots. addPlots() automatically use graph_layout mentioned ensure new plots use layout existing plots. network list already contains plots graph_layout absent, addPlots() extract layout first plot use new plots. generateNetworkGraphPlots() new parameter layout can used specify layout. Can used generate new plots layout existing plots (though addPlots() easier). Can also used generate plots custom layout types default layout created using igraph::layout_components(). saveNetworkPlots() new parameter outfile_layout can used save graph layout. saveNetwork() automatically saves graph layout output_type = \"individual\". Essentially, generating new plots addPlots() ensure consistent layout initial plots. Fixing random seed calling buildRepSeqNetwork() (first call addPlots(), buildRepSeqNetwork() called plots = FALSE) allows layout reproduced across multiple executions code initial plots generated.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"improved-file-input-functionality-1-0-1","dir":"Changelog","previous_headings":"","what":"Improved File Input Functionality","title":"NAIR 1.0.1","text":"instances file_list argument now accept list containing connections file paths instead character vector file paths. allows greater variety data sources used. greater variety input data formats now supported. Instances input_type parameter accept text formats new parameter read.args accepts named list optional arguments read.table() variants read.csv(), etc. Dedicated arguments header sep still exist apart read.args backwards compatibility, defaults now match input_type (e.g., sep defaults \",\" input_type = \"csv\" \"\" input_type = \"table\"). input_type = \"tsv\" now reads files using read.delim() instead read.table(). instances input_type argument now also support value \"csv2\" reading files using read.csv2().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"lifecycle-changes-1-0-1","dir":"Changelog","previous_headings":"","what":"Lifecycle Changes","title":"NAIR 1.0.1","text":"Version 1.0.1 first major release NAIR package. Going forward, release version numbers follow format <major>.<minor>.<patch>, -development versions follow format <major>.<minor>.<patch>.<dev>. plotNetworkGraph() deprecated favor addPlots(). filterInputData() argument count_col deprecated. Rows NA counts longer dropped. getClusterFun() argument cluster_fun deprecated (see Breaking Changes) addNodeNetworkStats() deprecated favor addNodeStats() (see section “Unified Primary Argument Across Functions”) addClusterMembership() argument data deprecated (see section “Unified Primary Argument Across Functions”) addClusterMembership() argument fun deprecated favor cluster_fun consistency functions. sparseAdjacencyMatFromSeqs() argument max_dist deprecated favor dist_cutoff consistency functions. saveNetwork() argument output_filename deprecated favor output_name consistency functions. sparseAdjacencyMatFromSeqs() deprecated favor better-named twin generateAdjacencyMatrix(). generateNetworkFromAdjacencyMat() deprecated favor better-named twin generateNetworkGraph().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"minor-changes-and-bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Minor Changes and Bug Fixes","title":"NAIR 1.0.1","text":"output_type = \"individual\" now also saves list plots (present) RDS file. prevents ggraph objects containing plots lost, case user wishes modify plots future. instances output_name parameter now automatically replace potentially unsafe characters underscores removes leading trailing non-alphanumeric characters. Safe characters include alphanumeric characters, underscores hyphens. Package functions longer print messages console default. Functions now verbose argument can set TRUE enable printing console messages. logging purposes, messages now generated using message() rather cat(), send output std.err() rather std.(). buildRepSeqNetwork(), addPlots() generateNetworkGraphPlots() now print_plots set FALSE default (plots longer printed R plotting window unless manually specified). buildAssociatedClusterNetwork() now removes duplicate observations loading data neighborhoods. multiple associated sequences similar, clone given sample can belong multiple neighborhoods. Previously, occurrence resulted clone appearing multiple times global network. simulateToyData() argument seed_value removed. Users can set seed prior calling function desired. generateNetworkGraphPlots() now handles case color_nodes_by contains duplicate values removing duplicate values warning. color_scheme vector, corresponding entries color_scheme also removed. Previously, case resulted list plots containing two elements name. generateNetworkGraphPlots() called non-numeric variable specified size_nodes_by, function now defaults fixed node sizes warning. addClusterStats() buildRepSeqNetwork(cluster_stats = TRUE) now call sum() max() na.rm = TRUE computing abundance-based properties. change reflects fact buildRepSeqNetwork() longer drops input data rows NA NaN values count column. combineSamples() loadDataFromFileList() now preserve original row IDs input file, prepended combined data sample IDs (available) file number based order file_list.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"breaking-changes-0-0-9044","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"NAIR 0.0.9044","text":"installPythonModules() kmeansAtchley() adjacencyMatAtchleyFromSeqs() encodeTCRSeqsByAtchleyFactor() dist_type argument various package functions longer accepts value \"euclidean_on_atchley\".","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"new-features-0-0-9044","dir":"Changelog","previous_headings":"","what":"New Features","title":"NAIR 0.0.9044","text":"Unit tests added hamDistBounded(), levDistBounded(), sparseAdjacencyMatFromSeqs(), low-level argument checks. Argument checks expanded encompass user-facing package functions. functions appears, dist_type argument now accepts abbreviations \"hamming\" \"levenshtein\", \"ham\", \"lev\", \"h\" \"l\". fun argument addClusterMembership() now passed match.fun() called. change affects cluster_fun argument higher-level functions, allowing users specify clustering algorithms using syntax, e.g., cluster_fun = \"cluster_walktrap\" addition previously-accepted cluster_fun = cluster_walktrap.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"minor-changes-and-bug-fixes-0-0-9044","dir":"Changelog","previous_headings":"","what":"Minor Changes and Bug Fixes","title":"NAIR 0.0.9044","text":"internal C++ functions compute network adjacency matrices longer write temporary files current working directory, instead writing temporary directory current R session. findAssociatedClones() now cleans , removing temporary files directories creates within temporary directory performing tasks.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"lifecycle-changes-0-0-9044","dir":"Changelog","previous_headings":"","what":"Lifecycle Changes","title":"NAIR 0.0.9044","text":"lifecycle stage Experimental added package. functions arguments within package previously deprecated now signaling warnings handled lifecycle package functions.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"documentation-changes-0-0-9044","dir":"Changelog","previous_headings":"","what":"Documentation Changes","title":"NAIR 0.0.9044","text":"vignettes Searching Associated TCR/BCR Clusters, Searching Public TCR/BCR Clusters Network Visualization removed package now exist articles package’s website. done reduce size installed package. URLs documentation files vignettes curated conform CRAN’s policies. Specifically, URL redirected another URL replaced target redirection. Links package CRAN pages now canonical form. function reference files now run examples package built checked. examples expanded. Examples vignette code now remove files directories created temporary directory current R session. Added documentation file package (NAIR-package). function reference files now Value section, including functions return value. package Readme file now includes badge package lifecycle","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"backend-package-changes-0-0-9044","dir":"Changelog","previous_headings":"","what":"Backend Package Changes","title":"NAIR 0.0.9044","text":"Added R minimum version requirement 3.1.0 Depends field DESCRIPTION, since version 3.0.2 greater needed require specific minimum versions RcppArmadillo Rcpp LinkingTo field (requiring 3.1.0 since CRAN advises requiring R versions don’t 0 third value). Reintroduced compile flags OpenMP support Makevars (change applies MacOS Linux, compile flags never removed Makevars.win) Added lifecycle package Imports, imported deprecated() function copied lifecycle badge images package files. Functions arguments can now assigned lifecycle stages badges can used package documentation files. Removed reticulate package Imports removed associated scaffolding throughout package set integration python scripts.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"vignettes-0-0-9043","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"NAIR 0.0.9043","text":"Function names vignettes reformatted pkgdown builds package webpage articles vignettes, function names link webpages documentation files.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"readme-0-0-9043","dir":"Changelog","previous_headings":"","what":"Readme","title":"NAIR 0.0.9043","text":"Package README file updated","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"website-0-0-9043","dir":"Changelog","previous_headings":"","what":"Website","title":"NAIR 0.0.9043","text":"Custom index added reference topics. Topics now organized named sections, dramatically improving ability find particular topics functions interest.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"package-0-0-9043","dir":"Changelog","previous_headings":"","what":"Package","title":"NAIR 0.0.9043","text":"packageStartupMessage() added .onAttach(): loaded, package provide welcome message instructions getting started.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"package-functions-0-0-9042","dir":"Changelog","previous_headings":"","what":"Package Functions","title":"NAIR 0.0.9042","text":"variable SampleID created output data now forced type character. Previously, values argument sample_ids sometimes unintentionally converted character numeric, default values sample_ids, \"1\", \"2\", etc. causing variables treated continuous variables used color nodes network graph plot, resulted color scales depicted wrong format plot legend. sample_ids argument now coerced character vector. prevents error saving output occurred sample_ids used numeric values. Default value sample_ids now entries \"Sample1\", \"Sample2\", etc., instead \"1\", \"2\", etc. variables SampleID, SubjectID GroupID created output data now forced type character. Previously, values arguments sample_ids, subject_ids group_ids sometimes unintentionally converted character numeric, default values sample_ids, \"1\", \"2\", etc. causing variables treated continuous variables used color nodes network graph plot, resulted color scales depicted wrong format plot legend. sample_ids argument now coerced character vector. prevents error saving output occurred sample_ids used numeric values (previous default!). Default value sample_ids now entries \"Sample1\", \"Sample2\", etc., instead 1, 2, etc. Argument plot_title added default value \"Global Network Public Clusters\". Previously argument passed buildRepSeqNetwork ellipses ... argument, thus used default value \"auto\", resulted default plot title value output_name argument, \"PublicClusterNetwork\" default. Added arguments pdf_width pdf_height adjusting dimensions pdf saving function’s output directly using outfile argument. package functions use saveNetworkPlots saving plots created using plotNetworkGraph, absence arguments plotNetworkGraph function gone unnoticed previously. since function option save output directly pdf using outfile argument, appropriate also provide control pdf dimensions. Default values amino_col sample_col arguments removed previous defaults longer useful. originally designed based previous version associated clusters workflow. Default filenames pdfs heatmaps changed \"atchley_kmeans_TCR_fraction_per_cluster.pdf\" \"atchley_kmeans_correlation_heatmap.pdf\". previous values \"atchley_kmeans_cluster_relative_size_profiles_by_sample.pdf\" \"atchley_kmeans_corr_in_cluster_size_profile_between_samples.pdf\" longer potentially confusing meaning.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"vignettes-0-0-9042","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"NAIR 0.0.9042","text":"Completion major revisions Completion major revisions Minor content revisions Restructured sections minor content revisions","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"documentation-0-0-9042","dir":"Changelog","previous_headings":"","what":"Documentation","title":"NAIR 0.0.9042","text":"package documentation files revised updated.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"package-functions-0-0-9041","dir":"Changelog","previous_headings":"","what":"Package Functions","title":"NAIR 0.0.9041","text":"Now performs clustering analysis obtain cluster membership ID even user manually specifies compute cluster stats cluster_id network property. performing clustering obtaining cluster membership primary purpose function. still desirable user able prevent node-level properties well cluster-level properties computed desired, now interfere function accomplishing purpose. Fixed bug causing sample-level network node property SampleLevelCloseness left named closeness data frames filtered node-level data. bug turn causing property overwritten global network node property PublicCloseness calling buildPublicClusterNetwork.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"vignettes-0-0-9041","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"NAIR 0.0.9041","text":"Completion major revisions Completion major revisions Minor content revisions Restructured sections minor content revisions","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"package-functions-0-0-9040","dir":"Changelog","previous_headings":"","what":"Package Functions","title":"NAIR 0.0.9040","text":"Default value data_symbols argument changed NULL \"data\" order match output format findAssociatedClones findAssociatedClones called output_type = \"rda\". Note change affects case buildAssociatedClusterNetwork called input_type = \"rda\" Now performs clustering analysis obtain cluster membership ID even user manually specifies compute cluster stats cluster_id network property. performing clustering obtaining cluster membership primary purpose function. still desirable user able prevent node-level properties well cluster-level properties computed desired, now interfere function accomplishing purpose.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"vignettes-0-0-9040","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"NAIR 0.0.9040","text":"buildRepSeqNetwork saveNetwork, vignette now specifies R environment variable name output list saved Rdata file using output_type = \"rda\". Content added completely explain certain behavior arguments previously covered.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"package-webpage-0-0-9040","dir":"Changelog","previous_headings":"","what":"Package Webpage","title":"NAIR 0.0.9040","text":"GitHub Actions workflow added automate publication future webpage updates URL GitHub Pages hosted website added URL field DESCRIPTION file pkgdown.yaml","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"package-metadata-0-0-9039","dir":"Changelog","previous_headings":"","what":"Package Metadata","title":"NAIR 0.0.9039","text":"Updated authors DESCRIPTION Updated journal article citation Readme documentation files","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"vignettes-0-0-9039","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"NAIR 0.0.9039","text":"term “AIRR-Seq” now spelled full “Adaptive Immune Receptor Repertoire Sequencing” prior first instance abbreviation vignette appears Meaning cluster membership ID corresponding cluster_id network property now clearly explained Header levels document structure updated revisions/additions, including fixing remaining broken links, forthcoming","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"documentation-0-0-9039","dir":"Changelog","previous_headings":"","what":"Documentation","title":"NAIR 0.0.9039","text":"References/Authors updated across documentation files Many documentation files revised updated use wording clear, accurate consistent language used package vignettes. Updates remaining documentation files forthcoming.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"bug-fixes-0-0-9038","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"NAIR 0.0.9038","text":"Fixed bug filterInputData raised error count_col subset_cols arguments non-null","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"functions-0-0-9038","dir":"Changelog","previous_headings":"","what":"Functions","title":"NAIR 0.0.9038","text":"calling plotNetworkGraph directly vector provided color_nodes_by color_title = \"auto\" (default), function attempt use name vector color legend title. similar change applies respect arguments size_nodes_by size_title. buildPublicClusterNetwork arguments node_stats, stats_to_include cluster_stats now deprecated nothing. node-level cluster-level network properties now automatically computed. arguments remain order maintain backwards compatibility user code, raise warning notifying user deprecated state non-null value provided. Functions clustering algorithms imported igraph package (cluster_fast_greedy) now exported package NAMESPACE file available users. functions can now used inputs cluster_fun argument various NAIR package functions without need use igraph:: prefix. Documentation file added re-exported functions","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"vignettes-and-documentation-0-0-9038","dir":"Changelog","previous_headings":"","what":"Vignettes and Documentation","title":"NAIR 0.0.9038","text":"Utility Functions vignette (formerly titled Downstream Analysis) removed. content absorbed buildRepSeqNetwork Network Visualization vignettes buildRepSeqNetwork Network Visualization Searching Public Clusters help file plotNetworkGraph now recommends users prefer higher-level function generateNetworkGraphPlots plotNetworkGraph, since former arguments behave identically buildRepSeqNetwork supports generation multiple plots. plotNetworkGraph called generateNetworkGraphPlots, users need call plotNetworkGraph directly. However, plotNetworkGraph remains exported function available user order maintain backwards compatibility user code.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009037","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9037","title":"NAIR 0.0.9037","text":"groups argument still exists now deprecated longer used. Group labels now automatically determined unique values group_ids sample_ids argument still exists now deprecated longer used. Custom sample IDs play role findAssociatedSeqs; argument inherited previous function included functionality findAssociatedSeqs findAssociatedClones findPublicClusters now ignores plots = TRUE print_plots = FALSE output_dir_unfiltered = NULL. prevents unused plots generated buildAssociatedClusterNetwork now uses group ID default variable node colors buildPublicClusterNetwork buildPublicClusterNetworkByRepresentative now use sample ID default variable node colors buildPublicClusterNetworkByRepresentative default plot title subtitle updated better clarity buildRepSeqNetwork, generateNetworkObjects generateNetworkGraphPlots now use count_col default variable node colors available, followed priority cluster ID, network degree. cluster_id_col added permit use node data cluster ID variable custom name (e.g., output buildPublicClusterNetwork) greatest_values added, can set FALSE prioritize clusters label based least values criterion variable rather greatest values function exclusiveNodeStats added. function behaves manner chooseNodeStats, arguments set FALSE default. Useful user wishes specify small number node-level properties compute, properties excluded. NAIR: Network Analysis Immune Repertoire Searching Public TCR/BCR Clusters Searching Associated TCR/BCR Clusters buildRepSeqNetwork Network Visualization (incomplete, progress) particular note, associated clusters public clusters vignettes now simulate reasonable toy data demonstration purposes. Downstream Analysis vignette title renamed Utility Functions. revision vignette planned prior version 1.0. CXX_STD = CXX11 flag removed src/Makevars src/Makevars.win","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009036","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9036","title":"NAIR 0.0.9036","text":"buildRepSeqNetwork longer returns error dist_cutoff = 0 (fixed bug involving argument checks added version 0.0.9035).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009035","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9035","title":"NAIR 0.0.9035","text":"Argument checks added buildRepSeqNetwork coerces input data data frame coerces sequence column character coerces count column numeric, provided automatically drops data rows NA values sequence column, warning produced added optional count_col arg; provided, count column coerced numeric rows NA/NaN values count column dropped warning node_stat_settings function now duplicate less-confusing name chooseNodeStats; newer name now used place node_stat_settings defaults tutorials stats_to_include argument addNodeNetworkStats, buildRepSetNetwork, etc., now also accepts named logical vector named elements list previously required. list still work, backwards compatibility. chooseNodeStats / node_stat_settings now generate named logical vector rather list. dist_type argument now flexible values accept; example \"lev\" simply \"l\" now equivalent \"levenshtein\"","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009034","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9034","title":"NAIR 0.0.9034","text":"examples now use simulateToyData generate data","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009033","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9033","title":"NAIR 0.0.9033","text":"Added documentation simulateToyData examples now use simulateToyData generate data","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009032","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9032","title":"NAIR 0.0.9032","text":"Fixed instances tildes erroneously used place \\code{} environment","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009031","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9031","title":"NAIR 0.0.9031","text":"addGraphLabels addClusterLabels New vignette Dual-Chain Network Analysis dual-chain network analysis single-cell data cluster_fun argument (clustering algorithm) addClusterLabels function addClusterLabels function addClusterLabels function used label clusters","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009030","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9030","title":"NAIR 0.0.9030","text":"Added function addGraphLabels adding text labels nodes graph plot Added function addClusterLabels adding labels certain clusters graph plot","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009029","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9029","title":"NAIR 0.0.9029","text":"algorithm used identify clusters addClusterMembership() can now controlled via new argument fun. addNodeNetworkStats() getClusterStats() buildRepSeqNetwork() buildAssociatedClusterNetwork() findPublicClusters() buildPublicClusterNetwork() buildPublicClusterNetworkByRepresentative()","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009028","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9028","title":"NAIR 0.0.9028","text":"buildRepSeqNetwork() generateNetworkObjects() now return NULL warning constructed network contains edges.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009027","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9027","title":"NAIR 0.0.9027","text":"getClusterStats() now computes sequence-based statistics (e.g., sequence max count) dual-chain networks, including separate set statistics chain. max_clone_count changed max_count agg_clone_count changed agg_count","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009026","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9026","title":"NAIR 0.0.9026","text":"Added argument verbose findAssociatedClones() can optionally set TRUE order print additional console output reporting number clones neighborhood, sample total. Fixed bug whereby findAssociatedSeqs() correctly computing counts used Fisher’s exact test Fixed bug findPublicClones() involving identification top n clusters node count sample: one cluster possessed nth highest node count, clusters included top n clusters, resulting n clusters identified criterion. reverted behavior existed prior version 0.0.9018, whereby first n clusters selected sorting data rows descending node count using order function.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009025","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9025","title":"NAIR 0.0.9025","text":"Fixed bug filterInputData() preventing filtering minimum sequence length Removed BiocManager Suggests field DESCRIPTION, since longer used access demonstration data building vignettes.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009024","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9024","title":"NAIR 0.0.9024","text":"Converted package vignettes use data created simulateToyData() Additional detail added vignettes associated clones public clones workflows","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009023","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9023","title":"NAIR 0.0.9023","text":"Added user-level function simulateToyData generating example (toy) data, primarily use vignettes, examples tests. Converted README use simulateToyData","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009022","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9022","title":"NAIR 0.0.9022","text":"Numerous utility functions previously internal renamed exported available user. include generateNetworkObjects(), generateNetworkGraphPlots(), filterInputData(), getNeighborhood(), loadDataFromFileList(), combineSamples(), saveNetwork(), saveNetworkPlots(). Remaining documentation added user-level functions. package vignette content now split across multiple vignettes, package vignette serving overview hub linking vignettes. Removed previously user-facing utility functions package’s exported namespace redundant unnecessary expose user, including levAdjacencyMatSparse, hamAdjacencyMatSparse, generateNetworkFromSeqs, getSimilarClones filterClonesBySequenceLength.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009021","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9021","title":"NAIR 0.0.9021","text":"Minor bug fixes functions utils.R caused errors warnings rare cases","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009020","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9020","title":"NAIR 0.0.9020","text":"Internal function .saveNetwork changed user-facing function saveNetwork, use saving output downstream analysis","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009019","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9019","title":"NAIR 0.0.9019","text":"Bug fixes associated clones functions","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009018","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9018","title":"NAIR 0.0.9018","text":"Changed arguments functionality saving output. new output_type argument can used save output list rds rda file, rather default behavior saving item individual, uncompressed file. Rather specifying filename item individually, output_name argument accepts character string used common prefix files saved. items now saved, save_all argument removed. Changed name argument other_cols subset_cols accurately reflect current role (keeping certain input columns rather ) Changed name argument drop_chars drop_matches better imply takes regular expressions character strings Changed names arguments plot_width plot_height pdf_width pdf_height clearly indicate affect dimensions saved pdf file, plot R object level (ggplot) appears R plotting window. Added logical argument plots can used prevent plots generated. Many plotting arguments now passed generateNetworkGraphPlots via elipses (...) returned value now always list always contains igraph, adjacency matrix plots addition node data. return_all argument removed. computing cluster-level properties (cluster_stats = TRUE), corresponding data frame output list now named cluster_data (previously cluster_stats) Now invisibly returns output, can assigned printed function called without assigning output. Now invisibly returns NULL warning fewer 2 sequences exist filtering; previously returned error. buildRepSeqNetwork now supports dual-chain approach analyzing single-cell RepSeq data: two cells (nodes) considered adjacent possess similar receptor sequences two chains (e.g., alpha chain beta chain). done supplying vector two column references seq_col instead single column reference, two columns contain receptor sequence different chain (e.g., CDR3 sequences alpha beta chains) row corresponds unique cell. functionality can generally used perform network analysis similarity based two types sequences instead one. findPublicClusters now performs network analysis sample individually search public clusters buildPublicClusterNetwork combines public clusters across samples performs network analysis buildPublicClusterNetworkByRepresentative can used perform network analysis combined public clusters using single representative clone cluster optional step K-means clustering based numeric encoding TCR sequences now performed directly using kmeansAtchley function findAssociatedSeqs searches across samples associated clone sequences based sample membership Fisher’s exact test P-value findAssociatedClones searches across samples clones within neighborhood associated clone sequence buildAssociatedClusterNetwork combines neighborhoods performs network analysis clustering Building networks individual associated clusters/neighborhoods now done directly using buildRepSeqNetwork function desired subset output buildAssociatedClusterNetwork K-means clustering numerically encoded TCR sequences now done directly using kmeansAtchley function new function generateNetworkGraphPlots() added, capable generating multiple plots argument usage similar used buildRepSeqNetwork (e.g., multiple color-code variables can supplied, case color scheme color legend title arguments meaningfully accept either scalar vector valued argument) arguments renamed reordered conform arguments buildRepSeqNetwork() Now accepts argument show_color_legend = \"auto\", show color legend color_nodes_by continuous variable discrete variable 20 distinct values. getClusterStats() can now used seq_col = NULL, sequence variable used small number statistics; similar count_col = NULL, dependent statistics NA returned data frame, cluster properties still computed. buildRepSeqNetwork() high-level functions generate network sequences now coerce list sequences character vector already format (e.g., factors). buildRepSeqNetwork() top-level functions now skip automatic plot generation 1 million nodes present network. done avoid potential error calling ggplot occurs combined nodes edges exceed limitations. network generated returned, user can still attempt manually generate plot using plotNetworkGraph(); manner, potential error interfere completion building network.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009017","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9017","title":"NAIR 0.0.9017","text":"buildDualChainNetwork() function added","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009016","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9016","title":"NAIR 0.0.9016","text":"Package vignette added, includes introduction package tutorial buildRepSeqNetwork() function Package readme file updated findPublicClusters() now supports .rds .rda file types; csv_files argument replaced argument named file_type. Identified fixed error related filterClonesBySequenceLength() occurs input data single column; affecting higher-level functions including buildRepSeqNetwork() Identified fixed error getAssociatedClusters() occurred neighborhood_plots = FALSE return_all = TRUE (function tried include output related neighborhood plots none existed). findAssociatedClones() now returns informative error sequences pass filter minimum sample membership.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009015","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9015","title":"NAIR 0.0.9015","text":"Fixed minor bugs related changes 0.0.9014","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009014","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9014","title":"NAIR 0.0.9014","text":"clone_col seq_col clones seqs, (except embedClonesByAtchleyFactor(), changed cdr3_AA) edge_dist dist_cutoff generateNetworkFromClones generateNetworkFromSeqs sparseAdjacencyMatFromClones sparseAdjacencyMatFromSeqs adjacencyMatAtchleyFromClones adjacencyMatAtchleyFromSeqs embedClonesByAtchleyFactor embedTCRSeqsByAtchleyFactor getSimilarClones(): changed default value drop_chars argument NULL nucleo_col, amino_col clone_seq_type arguments replaced single seq_col argument; function longer requires nucleotide amino acid sequences data, longer distinguishes two default, graph plots now use fixed node sizes column arguments (freq_col, vgene_col, cdr3_length, etc.) removed; columns used anything specific pipeline, necessary dedicated argument. default, columns input data now carried output. columns desired, can specified using other_cols argument. Input columns longer renamed output data. option aggregate counts/frequencies identical clones removed; can done data preprocessing step, either manually using aggregateIdenticalClones() function. argument print_plots added allow option print plot(s) R. default TRUE, corresponds previous behavior (plots printed). findAssociatedClones(), getAssociatedClusters() findPublicClusters() arguments revised according changes buildRepSeqNetwork(). plotNetworkGraph sparseAdjacencyMatFromSeqs adjacencyMatAtchleyFromSeqs embedTCRSeqsByAtchleyFactor","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009013","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9013","title":"NAIR 0.0.9013","text":"aggregateIdenticalClones filterClonesBySequenceLength getSimilarClones generateNetworkFromClones generateNetworkFromAdjacencyMat addNodeNetworkStats node_stat_settings addClusterMembership getClusterStats Implemented -install testing package functions using package testthat","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009012","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9012","title":"NAIR 0.0.9012","text":"Package name changed NAIR (Network Analysis Immune Repertoire) Added findPublicClusters() buildClustersAroundSelectedClones() renamed getAssociatedClusters() getPotentialAssociatedClones() renamed findAssociatedClones() generateAtchleyCorrHeatmap() renamed kmeansAtchley() levAdjacencyMatSparse() hamAdjacencyMatSparse() new argument drop_isolated_nodes can set FALSE keep isolated nodes. argument added higher-level functions dispatch calls routines.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009011","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9011","title":"NAIR 0.0.9011","text":"Separate function embedClonesByAtchleyFactor() created perform embedding TCR CDR3 amino acid sequences Euclidean 30-space based Atchley factor representation; previously done within function adjacencyMatAtchleyFromClones(), now placed function general use New function analyzeDiseaseAssociatedClusters() created, used perform combined network analysis disease-associated clusters generated generateDiseaseAssociatedClusters() New function generateAtchleyCorrHeatmap() created graphics, reshape2, gplots, viridisLite RColorBrewer added package dependencies via Imports directive DESCRIPTION file","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009010","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9010","title":"NAIR 0.0.9010","text":"computeMetaForCandidateSeqs() (helper findDiseaseMotifsFromMergedSamples()) redesigned renamed findDiseaseAssociatedClones(); function now takes merged sample data input data, filters sequences set criteria (number samples shared minimum seq length) obtain list candidates conducting Fisher’s exact tests; previously list candidates obtained input data function. findDiseaseMotifsFromMergedSamples() redesigned use candidate sequence metadata input (previously computed metadata merged sample data) renamed generateDiseaseAssociatedClusters() generateNetworkWithStats() now automatically prints ggraph R called (previously user needed access variable graph_plot contained returned list) Added package dplyr dependency via Imports directive DESCRIPTION file","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009009","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9009","title":"NAIR 0.0.9009","text":"buildNetwork() renamed generateNetworkWithStats() adjacencyMatrix() renamed sparseAdjacencyMatFromClones() genNetworkGraph() renamed generateNetworkFromAdjacencyMat() aggregateCountsByAminoAcidSeq filterDataBySequenceLength generateNetworkFromClones computeNodeNetworkStats addClusterMembership computeClusterNetworkStats plotNetworkGraph adjacencyMatAtchleyFromClones computeMetaForCandidateSeqs subsetDataNearTargetMotif Added vignette generateNetworkWithStats()","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009008","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9008","title":"NAIR 0.0.9008","text":"Supports strings unequal length; longer string effectively truncated length shorter string, difference length added Hamming distance truncated version. equivalent extending shorter string length longer string appending placeholder characters differ counterparts longer string. New function hamAdjacencyMatSparse computing Hamming adjacency matrix C++ Now supports dist_type = \"hamming\" use Hamming distance determining network adjacency Original indices input sequences appear adjacency matrix stored row names output matrix; sequences stored column names (accessible via dimnames()) file col_ids.txt created C++ function computes adjacency matrix now deleted adjacencyMatrix() finished tasks. information file now stored row names output matrix file longer needed.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009007","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9007","title":"NAIR 0.0.9007","text":".genNetworkGraph() internal helper buildNetwork() renamed public version genNetworkGraph() use package functions users; moved new file utils.R used house shared helper functions used multiple package functions. Added inst/python/Atchley_factors.csv, stores Atchley factor amino acid embedding used BriseisEncoder.py","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009006","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9006","title":"NAIR 0.0.9006","text":"Python module tensorflow added installPythonModules() Config/reticulate field DESCRIPTION file. tensorflow required Python module keras.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009005","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9005","title":"NAIR 0.0.9005","text":"file zzz.R created .onUnload() directive unload package dll via call library.dynam.unload() package unloaded","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009004","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9004","title":"NAIR 0.0.9004","text":"Reintroduced reticulate package dependency well R .onLoad() directives R functions related python integration, dependency management module installation Added Python source code BriseisEncoder h5 trained encoder file Removed $(SHLIB_OPENMP_CXXFLAGS) PKG_CXXFLAGS PKG_LIBS Makevars OpenMP supported MacOS (still enabled Makevars.win). Added comments instructions Linux users enable OpenMP desired, added corresponding note main Readme file’s installation section Linux users.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009003","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9003","title":"NAIR 0.0.9003","text":"Removed Python source code (previously used compute adjacency matrix) Removed reticulate package dependency (previously used manage python dependencies) Removed R functions involved Python management calling Python scripts Changed internal helper R function .createAdjacencyMatrix() public function adjacencyMatrix() switched calls Python scripts building matrix call corresponding new C++ version added 0.0.9002 (currently Levenshtein distance implemented; Hamming distance implemented future update) Changed buildNetwork() function use adjacencyMatrix() instead previous function .createAdjacencyMatrix() Removed levAdjacencyMatDense favor always using levAdjacencyMatSparse Enabled ARMA_64BIT_WORD accommodate larger matrices using C++ function levAdjacencyMatSparse; specifically, #define ARMA_64BIT_WORD=1 added beginning .cpp source file, -DARMA_64BIT_WORD=1 added PKG_CXXFLAGS definition Makevars Makevars.win","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009002","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9002","title":"NAIR 0.0.9002","text":"Added internal support Rcpp Added C++ routine bounded Levenshtein distance (levDistBounded) Added C++ routine dense Levenshtein adjacency matrix (levAdjacencyMatDense) Added C++ routine sparse Levenshtein adjacency matrix (levAdjacencyMatSparse)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"nair-009001","dir":"Changelog","previous_headings":"","what":"NAIR 0.0.9001","title":"NAIR 0.0.9001","text":"Initial (-development) version","code":""}]
