[{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"nair-network-analysis-of-immune-repertoire","dir":"Articles","previous_headings":"","what":"NAIR: Network Analysis of Immune Repertoire","title":"Introduction to the NAIR package","text":"introduce NAIR package, powerful tool analyzing adaptive immune repertoire using network analysis based similarities among receptor sequences, implements methods following paper: Hai Yang, Jason Cham, Zenghua Fan, Brian Neal, Tao Li Zhang. NAIR: Network Analysis Immune Repertoire. Frontiers Immunology (forthcoming). immune repertoire analysis tool allows users perform various network analysis tasks Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data. includes computing local global network properties nodes clusters, can provide insights structural organization immune repertoire network. addition, tool enables users search across multiple AIRR-Seq samples clones/clusters associated subject characteristics, disease conditions clinical outcomes, well identify public clones/clusters. can help researchers identify potentially important TCR/BCR clones. aid visualization interpretation immune repertoire network, tool also allows customized visualizations network. Furthermore, tool enables users perform downstream analysis immune repertoire data, clustering analysis differential abundance testing. downstream analyses can provide additional insights immune response.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"what-data-does-nair-support","dir":"Articles","previous_headings":"NAIR: Network Analysis of Immune Repertoire","what":"What data does NAIR support?","title":"Introduction to the NAIR package","text":"NAIR supports bulk single-cell immune repertoire sequence data T-cell B-cell receptors (TCR BCR). Single-cell data: row single cell Bulk data: row distinct TCR/BCR clone (unique combination V-D-J genes nucleotide sequence) typically includes corresponding measurement clonal abundance (e.g., clone count clone frequency/fraction)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"how-does-nair-model-and-analyze-the-adaptive-immune-receptor-repertoire-as-a-network","dir":"Articles","previous_headings":"NAIR: Network Analysis of Immune Repertoire","what":"How does NAIR model and analyze the adaptive immune receptor repertoire as a network?","title":"Introduction to the NAIR package","text":"cell (single-cell data) clone (bulk data) modeled node (vertex) network node, consider corresponding receptor sequence (nucleotide amino acid) pair nodes, measure similarity receptor sequences (using Hamming Levenshtein distance) single-cell data, sequences two chains (e.g., alpha chain beta chain) can jointly used determine similarity cells, considering cells similar sequences chains similar (.e., distance chain threshold) Many clustering algorithms available, seeking identify “best” configuration clusters according different graph criteria Network statistics characterize repertoire terms local global structural properties graph Customized visual plots network graph generated, nodes colored according desired meta-data (e.g., disease status, sample ID, cluster ID, clone count, etc.)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"the-buildrepseqnetwork-function","dir":"Articles","previous_headings":"","what":"The buildRepSeqNetwork function","title":"Introduction to the NAIR package","text":"General network analysis AIRR-Seq data performed using buildRepSeqNetwork function. function following: Filters input AIRR-Seq data according user specifications Builds network graph immune repertoire Cluster analysis Computation network properties Generates customized visual plot network graph using ggraph Meta-data nodes network, including network properties Meta-data clusters network Network graph plot (returned ggraph object saved pdf) Network adjacency matrix sparse matrix format igraph object containing list edges network graph See vignette tutorial function’s usage output.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Introduction to the NAIR package","text":"buildRepSeqNetwork function includes various arguments facilitate customization network visualization. See vignette overview.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"searching-for-associated-clusters","dir":"Articles","previous_headings":"","what":"Searching for Associated Clusters","title":"Introduction to the NAIR package","text":"Given multiple samples AIRR-Seq data, NAIR package can used search TCR/BCR clusters associated binary variable interest, disease condition, treatment clinical outcome. See vignette detailed tutorial.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/NAIR.html","id":"searching-for-public-clusters","dir":"Articles","previous_headings":"","what":"Searching for Public Clusters","title":"Introduction to the NAIR package","text":"NAIR package includes set functions facilitate searching public TCR/BCR clusters across multiple samples AIRR-seq data. context, public cluster consists similar TCR/BCR clones (e.g., whose CDR3 amino acid sequences differ one amino acid) shared across samples (e.g., across individuals across time points single individual). See vignette detailed tutorial.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Searching for Associated TCR/BCR Clusters","text":"Given multiple samples Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data, NAIR package can used search TCR/BCR clusters associated binary variable interest, disease condition, treatment clinical outcome. first provide brief conceptual overview, followed demonstration explain process greater detail.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"overview-of-process","dir":"Articles","previous_headings":"Introduction","what":"Overview of Process","title":"Searching for Associated TCR/BCR Clusters","text":"Identify associated sequences. Divide subjects two groups based two levels binary variable. Identify TCR/BCR sequences exhibit statistically significant difference frequency two groups using Fisher’s exact test. Identify clones sequences similar associated sequences. associated sequence, sequences fall within certain distance (e.g., differ one amino acid) comprise neighborhood. samples, identify clones whose sequences belong neighborhood. Construct global network using identified clones perform clustering. Combine clones neighborhoods single global network. Perform cluster analysis assign membership global clusters. clusters considered associated clusters.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"simulate-data-for-demonstration","dir":"Articles","previous_headings":"Introduction","what":"Simulate Data for Demonstration","title":"Searching for Associated TCR/BCR Clusters","text":"simulate toy data demonstration. binary variable interest, consider single treatment factor two levels, labeled treatment control. two groups, simulate 15 samples, containing 30 observations. generation probabilities possible sequences fixed within group. order simulate treatment effect, generation probabilities certain sequences differ substantially two groups. sample saved separate file using .rds file format. files named “Sample1.rds”, “Sample2.rds”, etc. file path directory saved R environment variable dir_input_samples later reference. first rows data first sample appear follows:","code":"# Use temp dir data_dir <- tempdir()  # Directory to store input files dir_input_samples <- file.path(data_dir, \"input_samples\") dir.create(dir_input_samples, showWarnings = FALSE)  # Number of samples by control/treatment group samples_c <- samples_t <- 15  samples <- samples_c + samples_t sample_size <- 30 # (seqs per sample)            # sequences (first five are chosen to be associated with treatment) base_seqs <- c(\"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\",                 \"CASSIEGQLSTDTQYF\",                 \"CASSEEGQLSTDTQYF\",                \"CASSPEGQLSTDTQYF\",                \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\")   # relative generation probabilities by control/treatment group pgen_c <- matrix(rep(c(rep(1, 5), rep(30, 3)), times = samples_c),                   nrow = samples_c, byrow = TRUE) pgen_t <- matrix(rep(c(1, 1, rep(1/3, 3), rep(2, 3)), times = samples_t),                   nrow = samples_t, byrow = TRUE) pgen <- rbind(pgen_c, pgen_t)  # Simulate the data library(NAIR) simulateToyData(       samples = samples, sample_size = sample_size,   prefix_length = 1, prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, samples), rep(0, samples)),   affixes = base_seqs, affix_probs = pgen, num_edits = 0,   output_dir = dir_input_samples, no_return = TRUE) #> [1] TRUE # View first few rows of data for sample 1 head(readRDS(file.path(dir_input_samples, \"Sample1.rds\"))) #>        CloneSeq CloneFrequency CloneCount SampleID #> 1 CASDAGVFQPQHF     0.02606559       2832  Sample1 #> 2 CASDAGVFQPQHF     0.03718396       4040  Sample1 #> 3 CASSHRGTDTQYF     0.03182726       3458  Sample1 #> 4 CASDAGVFQPQHF     0.04615781       5015  Sample1 #> 5 RASSLAGNTEAFF     0.06006498       6526  Sample1 #> 6 CASDAGVFQPQHF     0.03363123       3654  Sample1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"step-1-find-associated-sequences","dir":"Articles","previous_headings":"","what":"Step 1: Find Associated Sequences","title":"Searching for Associated TCR/BCR Clusters","text":"first step conduct systematic search associated sequences within provided samples using findAssociatedSeqs function. search two-stage procedure. unique receptor sequences first filtered according basic criteria order narrow list candidates. candidate sequence, compute P-value Fisher’s exact test independence binary variable interest observed presence sequence within sample/subject. user specifies P-value cutoff association detected. , explain usage behavior findAssociatedSeqs function.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"search-criteria","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Search Criteria","title":"Searching for Associated TCR/BCR Clusters","text":"findAssociatedSeqs function several parameters control criteria used searching associated sequences. include several filter criteria used determine sequences considered testing, well argument specify P-value cutoff association detected. arguments presented .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"sample-membership","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Search Criteria","what":"Sample Membership","title":"Searching for Associated TCR/BCR Clusters","text":"default, sequences appear least five samples considered. can changed setting min_sample_membership argument different value. Setting value NULL bypasses check.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"sequence-length","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Search Criteria","what":"Sequence Length","title":"Searching for Associated TCR/BCR Clusters","text":"default, sequences contain least seven characters considered. can changed setting min_seq_length argument different value. Setting value NULL bypasses check.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"sequence-content","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Search Criteria","what":"Sequence Content","title":"Searching for Associated TCR/BCR Clusters","text":"Sequences containing characters * _ excluded consideration. can changed using drop_matches argument, accommodates character string regular expression specifying pattern content search . content sequence checked match pattern using grep function base R. match found, sequence excluded consideration. Setting value NULL bypasses check. details pattern matching performed, please refer base R documentation files regex grep.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"p-value-cutoff","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences > Search Criteria","what":"P-value Cutoff","title":"Searching for Associated TCR/BCR Clusters","text":"default, sequences P-value 0.05 Fisher’s exact test included output findAssociatedSeqs. However, users may wish impose stronger burden evidence control false discovery rate multiple testing. cutoff can set different value using pval_cutoff argument. lower cutoff value, stronger evidence association required sequence included output. noted, however, sequences returned findAssociatedSeqs ordered P-value, subset can used step2. Thus, imposing stricter P-value cutoff can also done indirectly calling findAssociatedSeqs, subsetting results according P-value.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"input-file-paths","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Input File Paths","title":"Searching for Associated TCR/BCR Clusters","text":"main argument findAssociatedSeqs function file_list argument, accepts vector containing file paths. path corresponds distinct AIRR-Seq data file representing individual sample. , prepare vector input_files provided file_list argument findAssociatedSeqs:","code":"# input files for step 1 (one per sample) input_files <- file.path(dir_input_samples, paste0(\"Sample\", 1:samples, \".rds\")) head(input_files) #> [1] \"/tmp/RtmpvDN8DB/input_samples/Sample1.rds\" #> [2] \"/tmp/RtmpvDN8DB/input_samples/Sample2.rds\" #> [3] \"/tmp/RtmpvDN8DB/input_samples/Sample3.rds\" #> [4] \"/tmp/RtmpvDN8DB/input_samples/Sample4.rds\" #> [5] \"/tmp/RtmpvDN8DB/input_samples/Sample5.rds\" #> [6] \"/tmp/RtmpvDN8DB/input_samples/Sample6.rds\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"input-file-format","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Input File Format","title":"Searching for Associated TCR/BCR Clusters","text":"file format input files findAssociatedSeqs specified using input_type parameter. supported formats include \"rds\", \"rda\", \"csv\", well files can read using read.table function, \"tsv\" \"txt\". text formats \"csv\", \"tsv\" \"txt\", users can specify separation option utilizing sep argument. default setting sep = \"\" accommodates forms white space, .e., one spaces, tabs, newlines carriage returns. addition, important note first line data assumed header default. disable behavior treat first line data, users must set header parameter FALSE. \"rda\" (Rdata) format, data_symbols argument used specify name sample’s AIRR-Seq data frame within Rdata file (.e., name data frame appear R environment Rdata file loaded). argument accepts character string. requires sample’s data frame name within respective Rdata file. example, sample’s data frame named mydataframe saved using command save(mydataframe, file = myfilepath), file path myfilepath different sample, set data_symbols = \"mydataframe\". samples stored .rds files, use input_type = \"rds\".","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"specifying-the-sequence-column","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Specifying the Sequence Column","title":"Searching for Associated TCR/BCR Clusters","text":"seq_col argument used specify column containing clone sequences input data sample. argument accepts either column name column index. simulated data, column containing clone sequences named CloneSeq.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"assigning-samples-to-groups","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Assigning Samples to Groups","title":"Searching for Associated TCR/BCR Clusters","text":"group_ids argument used assign sample one two groups, representing two levels binary variable interest. argument accepts vector length file_list. entry group_ids assigned group label sample corresponding entry file_list. values may used group labels, vector must contain exactly two unique values. instance, simulated data, first half samples belong control group, second half belong treatment group. Thus, assign one group label first 15 samples different group label last 15 samples. choose label first 15 samples \"reference\" last 15 samples \"comparison\". However, noted results unchanged labels reversed, different pair labels used, long first 15 samples assigned one group last 15 samples . vector provide group_ids argument findAssociatedSeqs created :","code":"# group label assignments for the samples group_labels <- c(rep(\"reference\", samples_c), rep(\"comparison\", samples_t)) group_labels #>  [1] \"reference\"  \"reference\"  \"reference\"  \"reference\"  \"reference\"  #>  [6] \"reference\"  \"reference\"  \"reference\"  \"reference\"  \"reference\"  #> [11] \"reference\"  \"reference\"  \"reference\"  \"reference\"  \"reference\"  #> [16] \"comparison\" \"comparison\" \"comparison\" \"comparison\" \"comparison\" #> [21] \"comparison\" \"comparison\" \"comparison\" \"comparison\" \"comparison\" #> [26] \"comparison\" \"comparison\" \"comparison\" \"comparison\" \"comparison\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"assigning-samples-to-subjects-if-applicable","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Assigning Samples to Subjects (If Applicable)","title":"Searching for Associated TCR/BCR Clusters","text":"subject_ids argument can used assign sample particular subject. argument accepts vector length file_list. entry subject_ids assigned subject ID sample corresponding entry file_list. subject_ids argument omitted, Fisher’s exact test treats sample independent observational unit. case, relevant contingency table involves counts samples possessing given sequence. subject IDs provided, subject’s collection samples treated single observational unit. relevant contingency table involves counts subjects possessing given sequence. allows sequence counted per subject, results subject counted exactly margin. Subject IDs provided binary variable interest subject-specific data contains multiple samples single subject. Subject IDs omitted binary variable interest sample-specific sample comes different subject.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"specifying-the-clone-frequency-column-optional","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Specifying the Clone Frequency Column (Optional)","title":"Searching for Associated TCR/BCR Clusters","text":"freq_col argument can used specify column containing clone frequencies input data sample. argument accepts either column name column index. clone frequencies provided, maximum clone frequency (across samples) associated sequence included content data frame returned findAssociatedSeqs.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"output-file-path","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Output File Path","title":"Searching for Associated TCR/BCR Clusters","text":"findAssociatedSeqs function returns data frame containing associated sequences along additional information. format contents data frame explained executing function. default, data frame returned findAssociatedSeqs also saved current working directory csv file named associated_seqs.csv. different file name /directory can specified providing file path outfile argument. example, setting outfile = \"myfile.csv\" save file current working directory myfile.csv, setting outfile = \"~/myfolder/myfile.csv\" save file within subdirectory myfolder located within current working directory. user can also specify outfile = NULL order prevent output saved.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"demonstration-of-execution-and-output","dir":"Articles","previous_headings":"Step 1: Find Associated Sequences","what":"Demonstration of Execution and Output","title":"Searching for Associated TCR/BCR Clusters","text":"execute findAssociatedSeqs function using inputs prepared earlier file_list group_ids arguments: findAssociatedSeqs returns data frame containing receptor sequences found associated binary variable based Fisher’s exact test using specified P-value cutoff. row corresponds unique sequence includes following variables: ReceptorSeq: unique receptor sequence fisher_pvalue: P-value Fisher’s exact test independence receptor sequence binary variable interest shared_by_n_samples: number samples sequence observed samples_g0: samples sequence observed, number samples belonging first group (first unique value group_ids) samples_g1: samples sequence observed, number samples belonging second group (second unique value group_ids) shared_by_n_subjects: number subjects sequence observed (present subject IDs specified subject_ids) subjects_g0: subjects sequence observed, number subjects belonging first group (present subject IDs specified subject_ids) subjects_g1: subjects sequence observed, number subjects belonging second group (present subject IDs specified subject_ids) label: character string summarizing information. Also includes maximum -sample clone frequency across samples, available. rows data frame ordered Fisher’s exact test \\(P\\)-value.","code":"# search across samples for associated sequences using Fisher's exact test associated_seqs <- findAssociatedSeqs(   file_list = input_files, input_type = \"rds\",    group_ids = group_labels,    seq_col = \"CloneSeq\",    min_seq_length = NULL, drop_matches = NULL,    min_sample_membership = NULL,    pval_cutoff = 0.1,   outfile = NULL) #> Data contains 30 samples, 15 of which belong to group reference and 15 of which belong to group comparison. #> >>> Loading and compiling data from all samples: #> Loading sample 1: Input data contains 30 rows. #> Loading sample 2: Input data contains 30 rows. #> Loading sample 3: Input data contains 30 rows. #> Loading sample 4: Input data contains 30 rows. #> Loading sample 5: Input data contains 30 rows. #> Loading sample 6: Input data contains 30 rows. #> Loading sample 7: Input data contains 30 rows. #> Loading sample 8: Input data contains 30 rows. #> Loading sample 9: Input data contains 30 rows. #> Loading sample 10: Input data contains 30 rows. #> Loading sample 11: Input data contains 30 rows. #> Loading sample 12: Input data contains 30 rows. #> Loading sample 13: Input data contains 30 rows. #> Loading sample 14: Input data contains 30 rows. #> Loading sample 15: Input data contains 30 rows. #> Loading sample 16: Input data contains 30 rows. #> Loading sample 17: Input data contains 30 rows. #> Loading sample 18: Input data contains 30 rows. #> Loading sample 19: Input data contains 30 rows. #> Loading sample 20: Input data contains 30 rows. #> Loading sample 21: Input data contains 30 rows. #> Loading sample 22: Input data contains 30 rows. #> Loading sample 23: Input data contains 30 rows. #> Loading sample 24: Input data contains 30 rows. #> Loading sample 25: Input data contains 30 rows. #> Loading sample 26: Input data contains 30 rows. #> Loading sample 27: Input data contains 30 rows. #> Loading sample 28: Input data contains 30 rows. #> Loading sample 29: Input data contains 30 rows. #> Loading sample 30: Input data contains 30 rows. #> All samples loaded. #> Extracting list of unique sequences... Done.  8 unique sequences present. #> Computing sample membership (this may take a while)... Done. #> Filtering by Fisher's exact test P-value... Done. 4 sequences remain. #> All done. Sorting results by Fisher's exact test P-value and returning. # view first few rows of output head(associated_seqs) #>        ReceptorSeq fisher_pvalue shared_by_n_samples samples_g0 samples_g1 #> 8   CSVDLGKGNNEQFF  1.052106e-05                  18          3         15 #> 7      CASSGAYEQYF  1.157316e-04                  17          3         14 #> 4 CASSEEGQLSTDTQYF  5.197401e-03                  10          1          9 #> 5 CASSIEGQLSTDTQYF  6.559548e-02                  16          5         11 #>                                                                                                                  label #> 8 Sequence present in 18 samples (3 in group reference, 15 in group comparison)\\nFisher's exact test P-value: 1.05e-05 #> 7 Sequence present in 17 samples (3 in group reference, 14 in group comparison)\\nFisher's exact test P-value: 0.000116 #> 4    Sequence present in 10 samples (1 in group reference, 9 in group comparison)\\nFisher's exact test P-value: 0.0052 #> 5   Sequence present in 16 samples (5 in group reference, 11 in group comparison)\\nFisher's exact test P-value: 0.0656"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"step-2-find-associated-clones","dir":"Articles","previous_headings":"","what":"Step 2: Find Associated Clones","title":"Searching for Associated TCR/BCR Clusters","text":"previous step, used findAssociatedSeqs identify receptor sequences associated binary variable interest. next step use findAssociatedClones function search across samples identify clones sequences similar associated sequences identified step 1. associated sequence, define neighborhood set sequences fall within specified distance (e.g., maximum Hamming distance 1). identify clones (samples) sequences belong neighborhood. data associated sequence’s neighborhood saved separate file used input step 3.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"specifying-the-sample-data","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Specifying the Sample Data","title":"Searching for Associated TCR/BCR Clusters","text":"order findAssociatedClones conduct search, must specify sample data, just calling findAssociatedSeqs step 1. done using arguments file_list, input_type, group_ids seq_col, behave manner seen earlier findAssociatedSeqs function step 1: file_list accepts vector input file paths sep, header data_symbols situational arguments regarding data format group_ids accepts vector group assignments seq_col accepts name index clone sequence data column Refer back step 1 detailed explanation arguments. user use values arguments calling findAssociatedSeqs step 1.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"assigning-custom-sample-ids-optional","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Assigning Custom Sample IDs (Optional)","title":"Searching for Associated TCR/BCR Clusters","text":"clone’s sample ID automatically included variable data associated sequence’s neighborhood. default, samples labeled numerically according order appear file_list. sample_ids argument allows custom sample IDs assigned. accepts vector length file_list. entry sample_ids assigned sample ID sample corresponding entry file_list.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"assigning-subject-ids-optional","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Assigning Subject IDs (Optional)","title":"Searching for Associated TCR/BCR Clusters","text":"subject_ids argument allows subject ID assigned sample separate variable sample ID. subject IDs provided, clone’s subject ID included variable data associated sequence’s neighborhood (addition sample ID variable). subject_ids argument accepts vector length file_list. entry subject_idsis assigned subject ID sample corresponding entry file_list.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"specifying-the-associated-sequences","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Specifying the Associated Sequences","title":"Searching for Associated TCR/BCR Clusters","text":"associated sequences specified via assoc_seqs argument, accepts character vector containing associated sequences. Typically, vector provided assoc_seqs ReceptorSeq column data frame returned findAssociatedSeqs. considers associated sequences found step 1. However, may desirable consider subset sequences returned findAssociatedSeqs. sequences ordered Fisher’s exact test P-value facilitate reference. example, many associated sequences, choose consider 10 lowest P-values specifying assoc_seqs = associated_seqs$ReceptorSeq[1:10].","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"neighborhood-distance-settings","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Neighborhood Distance Settings","title":"Searching for Associated TCR/BCR Clusters","text":"default, associated sequence’s neighborhood includes sequences Hamming distance 1 associated sequence. type distance metric distance threshold used determine neighborhoods can adjusted using dist_type nbd_radius arguments. example, setting dist_type = \"lev\" nbd_radius = 2 results neighborhood containing sequences Levenshtein distance 2 associated sequence.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"output-settings","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Output Settings","title":"Searching for Associated TCR/BCR Clusters","text":"findAssociatedClones function return direct output. Instead, saves data associated sequence’s neighborhoods files used inputs step 3. neighborhood, data frame saved individual file. data frame contains one row clone neighborhood. following arguments can used customize output.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"subsetting-columns-from-the-input-data","dir":"Articles","previous_headings":"Step 2: Find Associated Clones > Output Settings","what":"Subsetting Columns From the Input Data","title":"Searching for Associated TCR/BCR Clusters","text":"data frame neighborhood includes data columns present sample’s original input data frame. cases, user may wish columns included. case, user can specify columns included using subset_cols argument, accepts either vector column names vector column indices. column specified seq_col argument automatically included regardless value subset_cols.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"output-directory","dir":"Articles","previous_headings":"Step 2: Find Associated Clones > Output Settings","what":"Output Directory","title":"Searching for Associated TCR/BCR Clusters","text":"file path output directory specified using output_dir argument. output directory specified output_dir argument created already exist.","code":"# output directory for current step dir_nbds <- file.path(data_dir, \"assoc_seq_nbds\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"output-file-format","dir":"Articles","previous_headings":"Step 2: Find Associated Clones > Output Settings","what":"Output File Format","title":"Searching for Associated TCR/BCR Clusters","text":"default, neighborhood’s data frame saved csv file. can changed using output_type argument. valid options include \"tsv\", \"rds\" \"rda\". files saved using \"rda\" (Rdata) format, data frame named data R environment Rdata file loaded.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"example-function-call","dir":"Articles","previous_headings":"Step 2: Find Associated Clones","what":"Example Function Call","title":"Searching for Associated TCR/BCR Clusters","text":"execute findAssociatedClones function using inputs prepared earlier file_list group_ids arguments: following files created directory specified output_dir argument: file contains neighborhood data single associated sequence.","code":"# Identify clones in a neighborhood around each associated sequence findAssociatedClones(   file_list = input_files, input_type = \"rds\",    group_ids = group_labels,    seq_col = \"CloneSeq\",    assoc_seqs = associated_seqs$ReceptorSeq,   min_seq_length = NULL, drop_matches = NULL,   output_dir = dir_nbds) #> <<< Beginning search for associated clones >>> #> Processing sample 1 of 30 (1): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 2 of 30 (2): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 3 of 30 (3): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 4 of 30 (4): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 5 of 30 (5): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 6 of 30 (6): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 7 of 30 (7): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 8 of 30 (8): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 9 of 30 (9): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 10 of 30 (10): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 11 of 30 (11): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 12 of 30 (12): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 13 of 30 (13): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 14 of 30 (14): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 15 of 30 (15): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 16 of 30 (16): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 17 of 30 (17): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 18 of 30 (18): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 19 of 30 (19): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 20 of 30 (20): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 21 of 30 (21): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 22 of 30 (22): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 23 of 30 (23): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 24 of 30 (24): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 25 of 30 (25): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 26 of 30 (26): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 27 of 30 (27): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 28 of 30 (28): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 29 of 30 (29): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> Processing sample 30 of 30 (30): #> Input data contains 30 rows. #> Finding clones in a neighborhood of each associated sequence... Done. #> >>> Done processing samples. Compiling results: #> Gathering data from all samples for sequence 1 (CSVDLGKGNNEQFF)... Done. #> Gathering data from all samples for sequence 2 (CASSGAYEQYF)... Done. #> Gathering data from all samples for sequence 3 (CASSEEGQLSTDTQYF)... Done. #> Gathering data from all samples for sequence 4 (CASSIEGQLSTDTQYF)... Done. #> >>> All tasks complete. Output is contained in the following directory: #>   /tmp/RtmpvDN8DB/assoc_seq_nbds # Files created by findAssociatedClones list.files(dir_nbds) #> [1] \"CASSEEGQLSTDTQYF.csv\" \"CASSGAYEQYF.csv\"      \"CASSIEGQLSTDTQYF.csv\" #> [4] \"CSVDLGKGNNEQFF.csv\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"step-3-global-network-of-associated-clusters","dir":"Articles","previous_headings":"","what":"Step 3: Global Network of Associated Clusters","title":"Searching for Associated TCR/BCR Clusters","text":"Now identified clones associated sequence’s neighborhood, final step use buildAssociatedClusterNetwork function combine clones neighborhoods single global network. use clustering analysis partition global network clusters, considered associated clusters.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"input-file-paths-1","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Input File Paths","title":"Searching for Associated TCR/BCR Clusters","text":"files created findAssociatedClones previous step contain data neighborhood. files provided buildAssociatedClusterNetwork supplying character vector file paths file_list argument. create vector .","code":"# Files created by findAssociatedClones nbd_files <- list.files(dir_nbds, full.names = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"input-file-format-1","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Input File Format","title":"Searching for Associated TCR/BCR Clusters","text":"default, findAssociatedClones saves output files using csv file format. default, buildAssociatedClusterNetwork assumes input files csv file format. files created findPublicClusters saved using different file format, input_type argument can used specify format used. argument behavior seen findPublicClusters. \"rda\" (Rdata) file format, data_symbols argument used specify name sample’s node-level data frame within respective Rdata file. findPublicClusters called output_type = \"rda\", node-level data frame sample named ndat. Accordingly, default value data_symbols ndat, user need manually specify value data_symbols unless names within files changed.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"customization-of-network-analysis","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Customization of Network Analysis","title":"Searching for Associated TCR/BCR Clusters","text":"buildAssociatedClusterNetwork uses arguments buildRepSeqNetwork customizing global network analysis. vignette provides overview arguments. mention important ones .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"distance-function-and-distance-cutoff","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Customization of Network Analysis","what":"Distance Function and Distance Cutoff","title":"Searching for Associated TCR/BCR Clusters","text":"default, two nodes within global network joined edge Hamming distance sequences 1. Levenshtein distance can used instead Hamming distance setting dist_type = \"lev\". maximum distance two nodes joined edge can changed using dist_cutoff argument.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"clustering-algorithm","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Customization of Network Analysis","what":"Clustering Algorithm","title":"Searching for Associated TCR/BCR Clusters","text":"constructing global network, buildAssociatedClusterNetwork performs cluster analysis network nodes, partitioning global network graph densely-connected subgraphs. neighborhoods two different associated sequences similar, .e., network contains many edge connections joining nodes one neighborhood nodes neighborhood, two neighborhoods high chance belonging cluster. Thus, cluster analysis assists identifying distinct groups clones/sequences associated binary variable interest. default, clustering performed using cluster_fast_greedy algorithm igraph package. clustering algorithms igraph package can used instead default algorithm. algorithm specified using cluster_fun argument, accepts one following functions: cluster_fast_greedy cluster_edge_betweenness cluster_fluid_communities cluster_infomap cluster_label_prop cluster_leading_eigen cluster_leiden cluster_louvain cluster_optimal cluster_spinglass cluster_walktrap example, setting cluster_fun = cluster_leiden performs clustering using cluster_leiden algorithm. information particular algorithm, users can refer help documentation file. example, command ?cluster_fast_greedy loads documentation file cluster_fast_greedy (default) algorithm, assuming NAIR package loaded (e.g., using library(NAIR)).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"customization-of-visual-plot","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Customization of Visual Plot","title":"Searching for Associated TCR/BCR Clusters","text":"default, network graph plot produced buildAssociatedClusterNetwork colors nodes according binary variable interest. assists user validating cluster’s association binary variable. also allows one visually distinguish clusters single level binary variable present (e.g., disease-clusters). desired, different variable can used color nodes. done specifying column variable color_nodes_by argument, accepts column name column index. color_nodes_by argument also accommodates vector column names vector column indices, case one plot created column specified, plot coloring nodes according variable respective column. example, setting color_nodes_by = c(3, 5) produce two plots per sample, one plot nodes colored according value third column input data vignette details additional arguments can used customize visual plot.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"output-settings-1","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Output Settings","title":"Searching for Associated TCR/BCR Clusters","text":"output returned buildAssociatedClusterNetwork follows format output buildRepSeqNetwork. function returns list containing node-level cluster-level meta data global network, well plots generated, addition network adjacency matrix igraph network edge list. default, contents list returned buildAssociatedClusterNetwork saved current working directory. list element saved individual file. file formats default file formats used buildRepSeqNetwork. particular, node-level cluster-level meta data saved csv files. Alternatively, user can save entire output list single compressed rds rda file setting output_type = \"rds\" output_type = \"rda\", respectively. default, files saved share common file name prefix \"AssociatedClusterNetwork\". common file name prefix can set different value supplying character string output_name argument. output can saved different directory providing file path output_dir argument. user can also specify output_dir = NULL order prevent output saved.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"execution-and-output","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Execution and Output","title":"Searching for Associated TCR/BCR Clusters","text":"execute buildAssociatedClusterNetwork function using input prepared earlier file_list argument:  visual plot network, see treatment group shows high representation clusters, affirming association sequences treatment variable. elements output list returned buildAssociatedClusterNetwork following names: default files saved buildAssociatedClusterNetwork following names:","code":"# Combine neighborhoods and perform network analysis all_clusters <- buildAssociatedClusterNetwork(   file_list = nbd_files,    seq_col = \"CloneSeq\",    size_nodes_by = 1.5,   output_dir = file.path(data_dir, \"assoc_clusters\")) #> <<< Building network of associated clones >>> #> Input data contains 202 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 202 nodes. #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 3 clusters in the network... Done. #> Generating graph plot with nodes colored by GroupID... #>  Done. #> Node-level meta-data saved to file: #>   /tmp/RtmpvDN8DB/assoc_clusters/AssociatedClusterNetwork_NodeMetadata.csv #> Cluster-level meta-data saved to file: #>   /tmp/RtmpvDN8DB/assoc_clusters/AssociatedClusterNetwork_ClusterMetadata.csv #> Network graph plots saved to file: #>   /tmp/RtmpvDN8DB/assoc_clusters/AssociatedClusterNetwork.pdf #> Network igraph saved in edgelist format to file: #>   /tmp/RtmpvDN8DB/assoc_clusters/AssociatedClusterNetwork_EdgeList.txt #> Adjacency matrix saved to file: #>   /tmp/RtmpvDN8DB/assoc_clusters/AssociatedClusterNetwork_AdjacencyMatrix.mtx # output returned by buildAssociatedClusterNetwork names(all_clusters) #> [1] \"igraph\"           \"adjacency_matrix\" \"node_data\"        \"cluster_data\"     #> [5] \"plots\" # Files saved by buildAssociatedClusterNetwork list.files(file.path(data_dir, \"assoc_clusters\")) #> [1] \"AssociatedClusterNetwork_AdjacencyMatrix.mtx\" #> [2] \"AssociatedClusterNetwork_ClusterMetadata.csv\" #> [3] \"AssociatedClusterNetwork_EdgeList.txt\"        #> [4] \"AssociatedClusterNetwork_NodeMetadata.csv\"    #> [5] \"AssociatedClusterNetwork.pdf\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"node-level-meta-data","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Execution and Output","what":"Node-Level Meta Data","title":"Searching for Associated TCR/BCR Clusters","text":"node_data data frame contained output list contains following variables: Notice default, variables present sample’s original data, \"CloneFrequency\" \"CloneCount\", automatically carried data. addition, variables containing various node-level network properties also present.","code":"# variables in the node-level meta data names(all_clusters$node_data) #>  [1] \"CloneSeq\"                  \"CloneFrequency\"            #>  [3] \"CloneCount\"                \"SampleID\"                  #>  [5] \"GroupID\"                   \"AssocSeq\"                  #>  [7] \"degree\"                    \"cluster_id\"                #>  [9] \"transitivity\"              \"eigen_centrality\"          #> [11] \"centrality_by_eigen\"       \"betweenness\"               #> [13] \"centrality_by_betweenness\" \"authority_score\"           #> [15] \"coreness\"                  \"page_rank\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"cluster-level-meta-data","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters > Execution and Output","what":"Cluster-Level Meta Data","title":"Searching for Associated TCR/BCR Clusters","text":"cluster_data data frame contained output list contains following variables: row corresponds cluster global network, variable corresponds cluster-level property.","code":"# variables in the node-level meta data names(all_clusters$cluster_data) #>  [1] \"cluster_id\"                  \"node_count\"                  #>  [3] \"mean_seq_length\"             \"mean_degree\"                 #>  [5] \"max_degree\"                  \"seq_w_max_degree\"            #>  [7] \"agg_count\"                   \"max_count\"                   #>  [9] \"seq_w_max_count\"             \"diameter_length\"             #> [11] \"global_transitivity\"         \"assortativity\"               #> [13] \"edge_density\"                \"degree_centrality_index\"     #> [15] \"closeness_centrality_index\"  \"eigen_centrality_index\"      #> [17] \"eigen_centrality_eigenvalue\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"labeling-the-global-clusters","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Labeling the Global Clusters","title":"Searching for Associated TCR/BCR Clusters","text":"order easily cross-reference clusters visual plot clusters data, can label clusters ID numbers follows:","code":"# Modify plot to add labels to the clusters all_clusters$plots[[1]] <-    addClusterLabels(     plot = all_clusters$plots[[1]],     net = all_clusters,     top_n_clusters = 3,     criterion = \"node_count\", # (the default)     size = 10   )  # View modified plot all_clusters$plots[[1]] #> Warning: Removed 199 rows containing missing values (`geom_text()`)."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"focusing-on-individual-clusters-of-interest","dir":"Articles","previous_headings":"Step 3: Global Network of Associated Clusters","what":"Focusing on Individual Clusters of Interest","title":"Searching for Associated TCR/BCR Clusters","text":"wish focus particular cluster interest within global network, can build network exclusively using clones cluster. , focus first cluster, also largest cluster node count. generate two plots. first plot, color node according receptor sequence corresponding clone. provides detailed account sequences appear cluster relative representation. second plot, color node according sample corresponding clone originally appeared. allows one distinguish whether clones cluster come many samples opposed relatively samples.","code":"# focus on the first cluster buildRepSeqNetwork(   data = all_clusters$node_data[all_clusters$node_data$cluster_id == 1, ],   seq_col = \"CloneSeq\",    color_nodes_by = c(\"CloneSeq\", \"SampleID\"),    color_scheme = c(\"plasma\", \"turbo\"),   size_nodes_by = 3,    output_dir = NULL, output_name = \"Cluster 1\") #> Input data contains 83 rows. #> Removing sequences with length fewer than 3 characters... Done. 83 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 83 nodes (after removing isolated nodes). #> Generating graph plot with nodes colored by CloneSeq... #>  Done. #> Generating graph plot with nodes colored by SampleID... #>  Done."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/associated_clusters.html","id":"optional-k-means-clustering-on-tcr-sequences-encoded-by-atchley-factors","dir":"Articles","previous_headings":"","what":"(Optional) K-means Clustering on TCR Sequences Encoded By Atchley Factors","title":"Searching for Associated TCR/BCR Clusters","text":"NOTE: step applies TCR CDR3 amino acid sequences additional step analysis, can take TCR sequences full network step 3 use deep learning algorithm trained encoder encode TCR sequence 30-dimensional numeric vector based Atchley-factor representations amino acids. allows us perform \\(K\\)-means clustering TCR sequences based numerically encoded values. can profile sample based TCR sequences distributed among \\(K\\)-means clusters: compute fraction sample’s unique TCR sequences belong cluster, yielding \\(K\\)-dimensional vector representing profile sample. can use heatmaps compare profiles across samples assess correlation profile samples. ultimate purpose kmeansAtchley() produce two heatmaps, generated using gplots::heatmap.2 function saved pdf. numerically-encoded TCR values \\(K\\)-means sample profiles returned return_output = TRUE.","code":"atchley_results <- kmeansAtchley(   data = all_clusters$node_data,   amino_col = \"CloneSeq\", sample_col = \"SampleID\", group_col = \"GroupID\",   k = 5, output_dir = file.path(data_dir, \"assoc_clusters\"),    return_output = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"simulate-example-data","dir":"Articles","previous_headings":"","what":"Simulate Example Data","title":"buildRepSeqNetwork","text":"demonstration purposes, simulate toy data using built-package functions. simulate data consisting two samples 100 observations , total 200 observations (rows).","code":"library(NAIR) dir_out <- tempdir()  toy_data <- simulateToyData()  head(toy_data) #>        CloneSeq CloneFrequency CloneCount SampleID #> 1 TTGAGGAAATTCG    0.007873775       3095  Sample1 #> 2 GGAGATGAATCGG    0.007777102       3057  Sample1 #> 3 GTCGGGTAATTGG    0.009094910       3575  Sample1 #> 4 GCCGGGTAATTCG    0.010160859       3994  Sample1 #> 5 GAAAGAGAATTCG    0.009336593       3670  Sample1 #> 6 AGGTGGGAATTCG    0.010369470       4076  Sample1 nrow(toy_data) #> [1] 200"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"primary-inputs","dir":"Articles","previous_headings":"","what":"Primary Inputs","title":"buildRepSeqNetwork","text":"buildRepSeqNetwork function two required arguments specifying input data. function’s first argument data accepts data frame containing AIRR-seq data, row corresponds single TCR/BCR clone (bulk data) cell (single-cell data). second argument seq_col specifies data column containing receptor sequences used basis similarity two cells clones. argument accepts either column name (e.g., seq_col = \"CloneSeq\") column index (e.g., seq_col = 1, denoting first column). single-cell data, see vignette building networks based joint similarity alpha chain sequences beta chain sequences. , execute buildRepSeqNetwork function. visual plot network graph automatically printed plotting window R.","code":"output <- buildRepSeqNetwork(toy_data, seq_col = \"CloneSeq\",                               output_dir = dir_out) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Generating graph plot... #>  Done. #> Node-level meta-data saved to file: #>   /tmp/RtmpeQ8zB0/MyRepSeqNetwork_NodeMetadata.csv #> Network graph plots saved to file: #>   /tmp/RtmpeQ8zB0/MyRepSeqNetwork.pdf #> Network igraph saved in edgelist format to file: #>   /tmp/RtmpeQ8zB0/MyRepSeqNetwork_EdgeList.txt #> Adjacency matrix saved to file: #>   /tmp/RtmpeQ8zB0/MyRepSeqNetwork_AdjacencyMatrix.mtx"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"base-output","dir":"Articles","previous_headings":"","what":"Base Output","title":"buildRepSeqNetwork","text":"optional arguments used, buildRepSeqNetwork function returns list containing following items: describe items . subsequent sections, introduce optional arguments buildRepSeqNetwork show output changes based arguments.","code":"names(output) #> [1] \"igraph\"           \"adjacency_matrix\" \"node_data\"        \"plots\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"node_data","dir":"Articles","previous_headings":"Base Output","what":"node_data","title":"buildRepSeqNetwork","text":"item node_data data frame row corresponds node network graph: default, columns original input AIRR-seq data present returned node data. can changed using subset_cols argument. row names original input data preserved returned node data. allows user match rows input data corresponding rows node data. Notice row names rows original input data missing returned node data. default, nodes connected least one node edge kept network. can changed using drop_isolated_nodes argument.","code":"head(output$node_data) #>         CloneSeq CloneFrequency CloneCount SampleID #> 2  GGAGATGAATCGG    0.007777102       3057  Sample1 #> 5  GAAAGAGAATTCG    0.009336593       3670  Sample1 #> 8  GGGGAGAAATTGG    0.006220155       2445  Sample1 #> 11 GGGGGAGAATTGC    0.012969469       5098  Sample1 #> 12 GGGGGGGAATTGC    0.009079646       3569  Sample1 #> 13 AGGGGGAAATTGG    0.014941093       5873  Sample1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"plots","dir":"Articles","previous_headings":"Base Output","what":"plots","title":"buildRepSeqNetwork","text":"item plots list containing plot(s) created buildRepSeqNetwork. plot object class ggraph (inherits ggplot class), named according variable used color nodes. nodes colored according variable, name plot uniform_color. Plots can customized optional arguments buildRepSeqNetwork well modifying created.","code":"names(output$plots) #> [1] \"uniform_color\" class(output$plots$uniform_color) #> [1] \"ggraph\" \"gg\"     \"ggplot\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"igraph","dir":"Articles","previous_headings":"Base Output","what":"igraph","title":"buildRepSeqNetwork","text":"item igraph object class igraph, contains list nodes edges comprise network graph. igraph object can used downstream computation network properties, alternative computing network properties calling buildRepSeqNetwork. can also used generate additional plots network graph.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"adjacency_matrix","dir":"Articles","previous_headings":"Base Output","what":"adjacency_matrix","title":"buildRepSeqNetwork","text":"item adjacency_matrix object class dgCMatrix, sparse matrix format Matrix package. network adjacency matrix encodes graph (.e., set nodes edges) matrix. symmetric, row (equivalently, column) corresponding distinct network node. network nodes follow order rows columns. column name receptor sequence corresponding node column. row name row index original input data corresponds node row. matrix entry value 0 1, 1 indicating edge connecting node row node column, 0 indicating edge connection. Although diagonal entries 1, values meaningful, since edge drawn given node . Note rows (nodes) adjacency matrix correspond rows (nodes) node_data data frame. number rows row names. adjacency matrix can used downstream computation network properties, alternative computing network properties calling buildRepSeqNetwork.","code":"class(output$adjacency_matrix) #> [1] \"dgCMatrix\" #> attr(,\"package\") #> [1] \"Matrix\" # First 5 rows and columns of the network adjacency matrix head(output$adjacency_matrix, c(5, 5)) #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>    GGAGATGAATCGG GAAAGAGAATTCG GGGGAGAAATTGG GGGGGAGAATTGC GGGGGGGAATTGC #> 2              1             .             .             .             . #> 5              .             1             .             .             . #> 8              .             .             1             .             . #> 11             .             .             .             1             1 #> 12             .             .             .             1             1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"filtering-the-input-data","dir":"Articles","previous_headings":"","what":"Filtering the Input Data","title":"buildRepSeqNetwork","text":"rows input data value NA receptor sequence (value column specified seq_col argument) automatically removed prior building network. following options useful removing noise irrelevant data analysis, potentially improving quality network graph downstream analysis results.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"min_seq_length","dir":"Articles","previous_headings":"Filtering the Input Data","what":"min_seq_length","title":"buildRepSeqNetwork","text":"parameter used filter TCR/BCR sequences certain length. argument accepts numeric value specifies minimum sequence length. Every data row whose sequence length value dropped constructing network graph. receptor sequence value column specified seq_col argument. default, minimum sequence length set 3. check can bypassed setting min_seq_length = NULL.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"drop_matches","dir":"Articles","previous_headings":"Filtering the Input Data","what":"drop_matches","title":"buildRepSeqNetwork","text":"parameter can optionally used filter TCR/BCR sequences content matching certain pattern. argument accepts character string regular expression specifying pattern content search . TCR/BCR sequence checked match specified content pattern. Every data row whose sequence matches pattern dropped constructing network graph. receptor sequence value column specified seq_col argument. checked match specified content pattern using grep function base R.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"network-settings","dir":"Articles","previous_headings":"","what":"Network Settings","title":"buildRepSeqNetwork","text":"settings used construct network can customized using arguments .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"distance-function","dir":"Articles","previous_headings":"Network Settings","what":"Distance Function","title":"buildRepSeqNetwork","text":"default method measuring similarity TCR/BCR sequences Hamming distance. calculates number differences two sequences length. sequences different lengths, shorter sequence extended adding non-matching characters make length longer sequence. Levenshtein distance can used alternative measurement determine similarity sequences. calculates minimum number single-character edits (insertions, deletions transformations) needed transform one sequence . method particularly useful comparing sequences different lengths can account insertions deletions. constructing network based similarity CDR-3 nucleotide sequences, preferable use Levenshtein distance instead default Hamming distance setting argument dist_type = \"levenshtein\". However, Levenshtein distance requires significantly computational time Hamming distance, may challenging working large data sets long TCR/BCR sequences.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"distance-cutoff","dir":"Articles","previous_headings":"Network Settings","what":"Distance Cutoff","title":"buildRepSeqNetwork","text":"distance function specified dist_type argument (Hamming distance default) used quantify similarity TCR/BCR sequences. chosen distance measurement determines distance two nodes network graph. default, two nodes graph connected edge distance 1. However, users want adjust cutoff, dist_cutoff argument can set different value. example, dist_cutoff = 2, two nodes connected edge distance 2. cutoff value controls stringency network construction affects number density edges network.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"keepremove-isolated-nodes","dir":"Articles","previous_headings":"Network Settings","what":"Keep/Remove Isolated Nodes","title":"buildRepSeqNetwork","text":"default, given node edges connecting nodes network, removed network graph included output. Notice input data contained 200 rows, node_data data frame returned output contains fewer rows : rows correspond 122 nodes joined edge least one node network. row names original input data preserved, allowing user conveniently cross-reference node corresponding row original input data. desired, nodes can kept network, including edge connections nodes. accomplished setting drop_isolated_nodes argument FALSE.","code":"nrow(output$node_data) #> [1] 122 head(rownames(output$node_data)) #> [1] \"2\"  \"5\"  \"8\"  \"11\" \"12\" \"13\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"network-properties-and-cluster-analysis","dir":"Articles","previous_headings":"","what":"Network Properties and Cluster Analysis","title":"buildRepSeqNetwork","text":"buildRepSeqNetwork function can perform additional network analysis constructing network. includes cluster analysis computation network properties. Cluster analysis partitions network graph densely-connected subgraphs, network properties describe structural organization network.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"description","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis > Node-Level Network Properties","what":"Description","title":"buildRepSeqNetwork","text":"Node-level network properties properties pertain individual node network graph. local properties, meaning value given node depends subset nodes network. One example network degree given node, represents number nodes directly joined given node edge connection. properties global properties, meaning value given node depends nodes network. example authority score node, computed using entire graph adjacency matrix (denote matrix \\(\\), principal eigenvector \\(^T \\) represents authority scores network nodes). names node-level network properties can computed listed : degree cluster_id transitivity closeness centrality_by_closeness eigen_centrality centrality_by_eigen betweenness centrality_by_betweenness authority_score coreness page_rank details individual properties, please refer documentation chooseNodeStats function using command ?NAIR::chooseNodeStats. cluster_id property warrants explanation discussed subsection cluster analysis.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"computing-node-level-properties","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis > Node-Level Network Properties","what":"Computing Node-Level Properties","title":"buildRepSeqNetwork","text":"Use setting node_stats = TRUE enable computation node-level network properties.  node data now contains node-level network properties addition original data columns: default, available node-level properties computed except closeness, centrality_by_closeness cluster_id.","code":"# build network with computation of node-level network properties output2 <- buildRepSeqNetwork(toy_data, \"CloneSeq\", node_stats = TRUE,                                output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Computing node-level network statistics... Done. #> Generating graph plot with nodes colored by degree... #>  Done. names(output2$node_data) #>  [1] \"CloneSeq\"                  \"CloneFrequency\"            #>  [3] \"CloneCount\"                \"SampleID\"                  #>  [5] \"degree\"                    \"transitivity\"              #>  [7] \"eigen_centrality\"          \"centrality_by_eigen\"       #>  [9] \"betweenness\"               \"centrality_by_betweenness\" #> [11] \"authority_score\"           \"coreness\"                  #> [13] \"page_rank\" head(output2$node_data[ , c(\"CloneSeq\", \"degree\", \"authority_score\")]) #>         CloneSeq degree authority_score #> 2  GGAGATGAATCGG      1      0.00000000 #> 5  GAAAGAGAATTCG      3      0.00000000 #> 8  GGGGAGAAATTGG      2      0.04558649 #> 11 GGGGGAGAATTGC      4      0.15055366 #> 12 GGGGGGGAATTGC     10      0.52691798 #> 13 AGGGGGAAATTGG      5      0.14682343"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"specifying-the-node-level-properties","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis > Node-Level Network Properties","what":"Specifying the Node-Level Properties","title":"buildRepSeqNetwork","text":"set node-level properties computed can specified using stats_to_include argument. compute node-level properties, user can simply specify stats_to_include = \"\". specify particular subset available node-level properties, user must provide named logical vector following particular format. vector can created using chooseNodeStats function. node-level property name argument chooseNodeStats, argument accepting either TRUE FALSE specify whether property computed. default value argument agrees default set node properties seen previous example. words, setting stats_to_include = chooseNodeStats() leaving stats_to_include argument unspecified. example user wishes compute closeness property addition default properties, page_rank property excluded: user wishes include small number properties exclude rest, requires setting many argument values chooseNodeStats FALSE, can inconvenient. case, may instead easier use exclusiveNodeStats function, behaves manner chooseNodeStats, arguments set FALSE default.","code":"# Modifying the default set of node-level properties output2 <- buildRepSeqNetwork(   toy_data, \"CloneSeq\", node_stats = TRUE,   stats_to_include = chooseNodeStats(closeness = TRUE, page_rank = FALSE)) # Include only the node-level properties specified below output2 <- buildRepSeqNetwork(   toy_data, \"CloneSeq\", node_stats = TRUE,    stats_to_include = exclusiveNodeStats(degree = TRUE, transitivity = TRUE))"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"cluster-analysis","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis","what":"Cluster Analysis","title":"buildRepSeqNetwork","text":"Cluster analysis involves using community-finding algorithm partition network graph clusters (densely-connected subgraphs). clusters represent groups clones/cells similar receptor sequences. cluster assigned numeric cluster ID, cluster membership ID node recorded. cluster membership ID cluster ID cluster node belongs. cluster membership ID recorded cluster_id node-level network property, included variable node-level metadata. Cluster-level network properties cluster also computed. additional data frame containing cluster-level network properties included output list returned buildRepSeqNetwork.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"enabling-cluster-analysis","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis > Cluster Analysis","what":"Enabling Cluster Analysis","title":"buildRepSeqNetwork","text":"perform cluster analysis, use setting cluster_stats = TRUE. also compute cluster-level network properties cluster. user set node_stats = TRUE specified inclusion cluster_id node-level property stats_to_include argument, cluster analysis automatically performed cluster_id values added node-level data. However, cluster-level network properties computed unless user set cluster_stats = TRUE.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"clustering-algorithm","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis > Cluster Analysis","what":"Clustering Algorithm","title":"buildRepSeqNetwork","text":"default, clustering performed using cluster_fast_greedy algorithm igraph package. clustering algorithms igraph package can used instead default algorithm. algorithm specified using cluster_fun argument, accepts one following functions: cluster_fast_greedy cluster_edge_betweenness cluster_fluid_communities cluster_infomap cluster_label_prop cluster_leading_eigen cluster_leiden cluster_louvain cluster_optimal cluster_spinglass cluster_walktrap example, setting cluster_fun = cluster_leiden performs clustering using cluster_leiden algorithm. information particular algorithm, users can refer help documentation file. example, command ?igraph::cluster_fast_greedy loads documentation file cluster_fast_greedy algorithm.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"cluster-level-network-properties","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis > Cluster Analysis","what":"Cluster-Level Network Properties","title":"buildRepSeqNetwork","text":"user set cluster_stats = TRUE, partitioning network clusters, various network properties computed cluster. cluster-level network properties recorded data frame, containing one row per cluster. , re-generate output buildRepSeqNetwork, time cluster analysis included. output list now includes additional data frame containing cluster-level meta data: brief description cluster-level property given : node_count: number nodes cluster. mean_seq_length: mean sequence length cluster. mean_degree: mean network degree cluster. max_degree: maximum network degree cluster. seq_w_max_degree: receptor sequence possessing maximum degree within cluster. agg_count: aggregate count among nodes cluster (based counts count_col, provided). max_count: maximum count among nodes cluster (based counts count_col, provided). seq_w_max_count: receptor sequence possessing maximum count within cluster. diameter_length: longest geodesic distance cluster. assortativity: assortativity coefficient cluster’s graph, based degree (minus one) node cluster (degree computed based upon nodes within cluster). global_transitivity: transitivity (.e., clustering coefficient) cluster’s graph, estimates probability adjacent vertices connected. edge_density: number edges cluster fraction maximum possible number edges. degree_centrality_index: cluster-level centrality index based degree within cluster graph. closeness_centrality_index: cluster-level centrality index based closeness, .e., distance nodes cluster. eigen_centrality_index: cluster-level centrality index based eigenvector centrality scores, .e., values principal eigenvector adjacency matrix cluster. eigen_centrality_eigenvalue: eigenvalue corresponding principal eigenvector adjacency matrix cluster.","code":"output3 <- buildRepSeqNetwork(toy_data, \"CloneSeq\", node_stats = TRUE,                                cluster_stats = TRUE, print_plots = FALSE,                               output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Computing node-level network statistics... Done. #> Computing cluster membership within the network... Done. #> Computing statistics for the 20 clusters in the network... Done. #> Generating graph plot with nodes colored by cluster_id... Done. names(output3) #> [1] \"igraph\"           \"adjacency_matrix\" \"node_data\"        \"cluster_data\"     #> [5] \"plots\" names(output3$cluster_data) #>  [1] \"cluster_id\"                  \"node_count\"                  #>  [3] \"mean_seq_length\"             \"mean_degree\"                 #>  [5] \"max_degree\"                  \"seq_w_max_degree\"            #>  [7] \"agg_count\"                   \"max_count\"                   #>  [9] \"seq_w_max_count\"             \"diameter_length\"             #> [11] \"global_transitivity\"         \"assortativity\"               #> [13] \"edge_density\"                \"degree_centrality_index\"     #> [15] \"closeness_centrality_index\"  \"eigen_centrality_index\"      #> [17] \"eigen_centrality_eigenvalue\" head(output3$cluster_data[ , 1:6]) #>   cluster_id node_count mean_seq_length mean_degree max_degree seq_w_max_degree #> 1          1         14           13.00        3.36          9    AAAAAAAAATTGC #> 2          2         28           12.96        8.43         18    GGGGGGGAATTGG #> 3          3          9           12.67        2.22          4     AGAAGAAAATTC #> 4          4          6           13.00        3.33          9    GGGGGGAAATTGG #> 5          5          6           12.00        2.17          3     AGGGAGGAATTC #> 6          6         25           12.00        4.60         10     AAAAAAAAATTG"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"specifying-the-count-column","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis > Cluster Analysis","what":"Specifying the Count Column","title":"buildRepSeqNetwork","text":"cluster-level network properties, agg_count max_count, computed user specifies column input data containing counts row (.e., clone count bulk data Unique Molecular Identifier count single-cell data). column specified using count_col function, accepts column name column index. count column specified, values coerced numeric values. rows input data count value NA NaN dropped constructing network.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"labeling-clusters","dir":"Articles","previous_headings":"Network Properties and Cluster Analysis > Cluster Analysis","what":"Labeling Clusters","title":"buildRepSeqNetwork","text":"order easily reference clusters within visual plot network graph, possible label clusters plot cluster IDs. must done calling buildRepSeqNetwork, accomplished using addClusterLabels function described .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"buildRepSeqNetwork","text":"buildRepSeqNetwork function includes various arguments facilitate customization network visualization. See vignette overview. Additionally, following arguments can used control whether plots generated /displayed R: Use print_plots = FALSE prevent plots printed R plotting window. Plots still generated, included output (assuming valid output directory) saved pdf usual. Use plots = FALSE prevent plots generated entirely.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"subsetting-columns-from-the-input-data","dir":"Articles","previous_headings":"Output Settings","what":"Subsetting Columns From the Input Data","title":"buildRepSeqNetwork","text":"node_data data frame contained output buildRepSeqNetwork includes columns present original input data frame. cases, user may wish columns included. case, user can specify columns included using subset_cols argument, accepts vector containing either column names column indices columns kept. column specified seq_col argument automatically included regardless value subset_cols.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"output-directory","dir":"Articles","previous_headings":"Output Settings","what":"Output Directory","title":"buildRepSeqNetwork","text":"default, buildRepSeqNetwork saves output current working directory. However, users can specify directory using output_dir argument. specified output directory created already exist. Setting output_dir NULL prevent output written file.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"output-file-format","dir":"Articles","previous_headings":"Output Settings","what":"Output File Format","title":"buildRepSeqNetwork","text":"default, component list returned buildRepSeqNetwork saved file, node-level cluster-level meta data saved csv files. output list saved using \"rda\" (Rdata) format, output list named net R environment Rdata file loaded R using load function.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"pdf-of-plots","dir":"Articles","previous_headings":"Output Settings","what":"PDF of Plots","title":"buildRepSeqNetwork","text":"Regardless value output_type, separate pdf file containing graph plot(s) created output_dir. dimensions (inches) pdf can adjusted using plot_width plot_height arguments, defaults 12 10, respectively. pdf file created plots generated (.e., argument plots set FALSE). Note: ggraph object plot saved user sets output_type = \"rds\" output_type = \"rda\". Using one settings recommended used user wishes modify plots future. Note, however, plots can always re-generated node-level meta data using generateGraphPlot function described .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"output-file-names","dir":"Articles","previous_headings":"Output Settings","what":"Output File Name(s)","title":"buildRepSeqNetwork","text":"default, name saved file starts MyRepSeqNetwork. prefix can changed providing character string output_name argument. output_type set \"rds\" \"rda\", name file value output_name argument followed appropriate file extension (either .rds .rda). name pdf file graph plot value output_name argument followed .pdf file extension.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"downstream-tasks-and-complementary-functions","dir":"Articles","previous_headings":"","what":"Downstream Tasks and Complementary Functions","title":"buildRepSeqNetwork","text":"section covers basic tasks user may wish perform following use buildRepSeqNetwork. describe tasks can conveniently performed using additional functions within NAIR package.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"modifying-plots","dir":"Articles","previous_headings":"Downstream Tasks and Complementary Functions","what":"Modifying Plots","title":"buildRepSeqNetwork","text":"cases, user may wish make changes plot previously created buildRepSeqNetwork function. Refer vignette details.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"downstream-computation-of-network-properties","dir":"Articles","previous_headings":"Downstream Tasks and Complementary Functions","what":"Downstream Computation of Network Properties","title":"buildRepSeqNetwork","text":"user already constructed network using buildRepSeqNetwork wishes compute network properties without constructing network (time-consuming large networks), can done using output buildRepSeqNetwork along built-package functions.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"compute-node-level-properties-downstream","dir":"Articles","previous_headings":"Downstream Tasks and Complementary Functions > Downstream Computation of Network Properties","what":"Compute Node-level Properties Downstream","title":"buildRepSeqNetwork","text":"Node-level network properties can computed added node-level meta data passing data frame addNodeNetworkStats function. igraph object contained output list buildRepSeqNetwork provided net argument addNodeNetworkStats. stats_to_include argument can used specify network properties compute just buildRepSeqNetwork function.","code":"# Add network stats to node-level meta data  output$node_data <- addNodeNetworkStats(output$node_data,                                         net = output$igraph,                                         stats_to_include = \"all\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"perform-cluster-analysis-downstream","dir":"Articles","previous_headings":"Downstream Tasks and Complementary Functions > Downstream Computation of Network Properties","what":"Perform Cluster Analysis Downstream","title":"buildRepSeqNetwork","text":"Cluster-level properties can computed passing node-level meta data getClusterStats function. adjacency matrix contained output list buildRepSeqNetwork provided adjacency_matrix argument getClusterStats. seq_col argument accepts column name column index specifying column node data contains receptor sequences. provided, cluster properties involving receptor sequences, mean_seq_length seq_w_max_degree, computed. Similarly, count_col argument used specify column containing counts.","code":"# Add cluster-level properties to output list from buildRepSeqNetwork output$cluster_data <-    getClusterStats(data = output$node_data,                   adjacency_matrix = output$adjacency_matrix,                   seq_col = \"CloneSeq\", count_col = \"CloneCount\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"saving-output-after-creation","dir":"Articles","previous_headings":"Downstream Tasks and Complementary Functions","what":"Saving Output After Creation","title":"buildRepSeqNetwork","text":"cases, user may wish save output list returned buildRepSeqNetwork created. situation may arise user modified output list, user wishes use different output settings wish reconstruct entire network calling buildRepSeqNetwork . saveNetwork function can used save output list manner similar way buildRepSeqNetwork saves output. output list passed net argument, output_dir, output_type, pdf_width pdf_height arguments behavior buildRepSeqNetwork function. output_filename argument behavior output_name argument buildRepSeqNetwork. buildRepSeqNetwork, user specifies output_type = \"rda\", output list named net R environment saved file loaded R using load function.","code":"# save output list returned by buildRepSeqNetwork saveNetwork(net = output, output_dir = dir_out) #> Node-level meta-data saved to file: #>   /tmp/RtmpeQ8zB0/MyRepSeqNetwork_NodeMetadata.csv #> Network graph plots saved to file: #>   /tmp/RtmpeQ8zB0/MyRepSeqNetwork.pdf #> Network igraph saved in edgelist format to file: #>   /tmp/RtmpeQ8zB0/MyRepSeqNetwork_EdgeList.txt #> Adjacency matrix saved to file: #>   /tmp/RtmpeQ8zB0/MyRepSeqNetwork_AdjacencyMatrix.mtx"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"regenerating-output-components","dir":"Articles","previous_headings":"Downstream Tasks and Complementary Functions","what":"Regenerating Output Components","title":"buildRepSeqNetwork","text":"case igraph object contained output buildRepSeqNetwork lost, adjacency matrix can used quickly generate igraph object without recomputing network edges. done passing adjacency matrix generateNetworkFromAdjacencyMat function. adjacency matrix lost, can recomputed node_data data frame. achieved passing column vector receptor sequences sparseAdjacencyMatFromSeqs function. typically faster calling buildRepSeqNetwork , particularly buildRepSeqNetwork previously called default setting drop_isolated_nodes = TRUE. sparseAdjacencyMatFromSeqs function three additional arguments. argument max_dist plays role dist_cutoff argument buildRepSeqNetwork, default value 1. arguments dist_type drop_isolated_nodes behavior default values buildRepSeqNetwork. arguments set match values used buildRepSeqNetwork node_data data frame created.","code":"# create igraph from adjacency matrix output$igraph <- generateNetworkFromAdjacencyMat(output$adjacency_matrix) # create adjacency matrix from receptor sequence data column output$adjacency_matrix <- sparseAdjacencyMatFromSeqs(output$node_data$CloneSeq)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"compartmentalized-workflow","dir":"Articles","previous_headings":"","what":"Compartmentalized Workflow","title":"buildRepSeqNetwork","text":"possible split tasks performed buildRepSeqNetwork separate, individual steps. allows user greater freedom flexibility customizing workflow analysis.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"generatenetworkobjects","dir":"Articles","previous_headings":"Compartmentalized Workflow","what":"generateNetworkObjects","title":"buildRepSeqNetwork","text":"generateNetworkObjects function lightweight function performs core tasks buildRepSeqNetwork leaves remaining tasks performed individually. generateNetworkObjects function performs following tasks: Builds network graph immune repertoire Meta-data nodes network Network adjacency matrix igraph object function arguments data, seq_col, dist_type, dist_cutoff drop_isolated_nodes, behavior default values seen buildRepSeqNetwork function.","code":"output_minimal <- generateNetworkObjects(data = toy_data, seq_col = \"CloneSeq\") #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). names(output_minimal) #> [1] \"igraph\"           \"adjacency_matrix\" \"node_data\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"standalone-input-filtering","dir":"Articles","previous_headings":"Compartmentalized Workflow","what":"Standalone Input Filtering","title":"buildRepSeqNetwork","text":"Filtering input data can performed separate step prior calling generateNetworkObjects. done using filterInputData function. function arguments data, seq_col, min_seq_length, drop_matches, subset_cols count_col, behave manner seen buildRepSeqNetwork.","code":"# Filter input data as a preprocessing step filtered_data <- filterInputData(   toy_data, seq_col = \"CloneSeq\",    min_seq_length = 5,   drop_matches = \"[*|_]\",    subset_cols = c(\"SampleID\"),   count_col = \"CloneCount\") #> Input data contains 200 rows. #> Removing sequences with length fewer than 5 characters... Done. 200 rows remaining. #> Removing sequences containing matches to the expression '[*|_]'... Done. 200 rows remaining. head(filtered_data) #>        CloneSeq CloneCount SampleID #> 1 TTGAGGAAATTCG       3095  Sample1 #> 2 GGAGATGAATCGG       3057  Sample1 #> 3 GTCGGGTAATTGG       3575  Sample1 #> 4 GCCGGGTAATTCG       3994  Sample1 #> 5 GAAAGAGAATTCG       3670  Sample1 #> 6 AGGTGGGAATTCG       4076  Sample1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/buildRepSeqNetwork.html","id":"other-steps","dir":"Articles","previous_headings":"Compartmentalized Workflow","what":"Other Steps","title":"buildRepSeqNetwork","text":"following tasks performed buildRepSeqNetwork performed generateNetworkObjects: Computation network properties cluster analysis Generation visual plot Saving output omitted tasks can performed step using functions NAIR package. Click particular task details can accomplished.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"simulate-example-data","dir":"Articles","previous_headings":"","what":"Simulate Example Data","title":"Network Visualization","text":"demonstration purposes, simulate toy data using built-package functions. simulate data consisting two samples 100 observations , total 200 observations (rows).","code":"library(NAIR) dir_out <- tempdir() toy_data <- simulateToyData() head(toy_data) #>        CloneSeq CloneFrequency CloneCount SampleID #> 1 TTGAGGAAATTCG    0.007873775       3095  Sample1 #> 2 GGAGATGAATCGG    0.007777102       3057  Sample1 #> 3 GTCGGGTAATTGG    0.009094910       3575  Sample1 #> 4 GCCGGGTAATTCG    0.010160859       3994  Sample1 #> 5 GAAAGAGAATTCG    0.009336593       3670  Sample1 #> 6 AGGTGGGAATTCG    0.010369470       4076  Sample1"},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"color-nodes-according-to-metadata","dir":"Articles","previous_headings":"Node Colors","what":"Color Nodes According to Metadata","title":"Network Visualization","text":"nodes graph can colored according variable node-level metadata. accomplished using color_nodes_by argument, accepts character string specifying name column containing variable. user can specify variable present node-level meta data returned buildRepSeqNetwork, including node-level network properties. example, calling buildRepSeqNetwork, can color nodes based CloneCount column original input data setting color_nodes_by = \"CloneCount\" seen .  color_nodes_by argument left unspecified, buildRepSeqNetwork attempt use available variable color nodes. variable clone count provided using count_col argument, used. Otherwise cluster_id variable used exists, followed degree, network properties. suitable options available, nodes left uncolored. user wish nodes colored dynamically, can specified setting color_nodes_by = NULL.","code":"buildRepSeqNetwork(toy_data, seq_col = \"CloneSeq\", node_stats = TRUE,                    color_nodes_by = \"CloneCount\", output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Computing node-level network statistics... Done. #> Generating graph plot with nodes colored by CloneCount... #>  Done."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"change-node-color-palette","dir":"Articles","previous_headings":"Node Colors","what":"Change Node Color Palette","title":"Network Visualization","text":"preset color palette can used color nodes providing appropriate character string color_scheme argument. argument accepts following values: \"default\" default ggplot2 colors One following color scales viridisLite package. scales designed maintain perceptual uniformity (consistently across scale, values close together appear similar, values far apart appear distinct) printed grey scale viewed individuals common forms color-blindness color vision deficiency. information, including images color scales, can referenced Introduction viridis color maps vignette hosted CRAN’s website. \"magma\" (\"\") \"inferno\" (\"B\") \"plasma\" (\"C\") \"viridis\" (\"D\") \"cividis\" (\"E\") \"rocket\" (\"F\") \"mako\" (\"G\") \"turbo\" (\"H\") color scales \"-1\" appended, reverses direction color scale (e.g., color_scheme = \"viridis-1\") discrete color palette grDevices::hcl.pals() (can used variable used color nodes discrete) show example using plasma color scheme viridisLite package, direction color scale reversed:","code":"# Using the \"plasma\" color scheme with reversed color gradient buildRepSeqNetwork(toy_data, seq_col = \"CloneSeq\", node_stats = TRUE,                    color_nodes_by = \"transitivity\",                     color_scheme = \"plasma-1\", output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Computing node-level network statistics... Done. #> Generating graph plot with nodes colored by transitivity... #>  Done."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"use-custom-color-palette","dir":"Articles","previous_headings":"Node Colors","what":"Use Custom Color Palette","title":"Network Visualization","text":"color scales available color_scheme argument buildRepSeqNetwork function limited selection preset color scales. user wishes specify custom color scheme nodes, can done modifying plot created.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"uniform-node-size","dir":"Articles","previous_headings":"Node Size","what":"Uniform Node Size","title":"Network Visualization","text":"default, nodes drawn uniform size value 0.5. results nodes appearing small plot saved using default pdf dimensions 12 inches wide 10 inches tall. default behavior intended prevent nodes overlapping obscuring edges larger networks. different uniform node size can specified providing numeric value size_nodes_by argument. , set node size 1.5, three times large default node size:","code":"buildRepSeqNetwork(toy_data, seq_col = \"CloneSeq\", node_stats = TRUE,                    color_nodes_by = \"transitivity\", color_scheme = \"plasma-1\",                    size_nodes_by = 1.5, output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Computing node-level network statistics... Done. #> Generating graph plot with nodes colored by transitivity... #>  Done."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"size-nodes-according-to-metadata","dir":"Articles","previous_headings":"Node Size","what":"Size Nodes According to Metadata","title":"Network Visualization","text":"Rather draw nodes using uniform node size, possible nodes sized according variable within node-level metadata. achieved providing column name variable size_nodes_by argument. minimum maximum node sizes can specified using node_size_limits argument, accepts numeric vector length two, first entry minimum node size second entry maximum node size.","code":"# Size nodes dynamically by network degree; use custom size range buildRepSeqNetwork(toy_data, seq_col = \"CloneSeq\", node_stats = TRUE,                    color_nodes_by = \"transitivity\", color_scheme = \"plasma-1\",                    size_nodes_by = \"degree\",                     node_size_limits = c(0.5, 1.5), output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Computing node-level network statistics... Done. #> Generating graph plot with nodes colored by transitivity... #>  Done."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"labeling-clusters","dir":"Articles","previous_headings":"","what":"Labeling Clusters","title":"Network Visualization","text":"cluster analysis performed calling buildRepSeqNetwork, output include data resulting clusters, cluster identified cluster ID. order easily reference clusters within visual plot network graph, possible label clusters plot cluster IDs. must done calling buildRepSeqNetwork, accomplished using addClusterLabels function modify plot contained output buildRepSeqNetwork. Note buildRepSeqNetwork returns list, one elements list another list named plots, contains plots generated buildRepSeqNetwork. addClusterLabels function two primary arguments. plot modified provided plot argument. entire output list returned buildRepSeqNetwork provided net argument. default, 20 largest clusters node count labeled order preserve legibility. number can changed providing different value top_n_clusters argument. Instead prioritizing clusters label based node count, different variable within cluster-level metadata can used, long variable numeric. achieved providing column name variable criterion argument. variable present cluster_data data frame contained output list buildRepSeqNetwork. Rather prioritizing clusters greatest values variable, lowest values can instead prioritized labeling setting greatest_values = FALSE. size cluster ID labels can adjusted providing numeric value size argument (default 5), color can adjusted providing valid character string color argument (default \"black\"). addClusterLabels function assumes node-level meta data includes variable named cluster_id records cluster membership node. case buildRepSeqNetwork called cluster analysis enabled. variable name different cluster_id (e.g., columns manually renamed), correct variable name must provided cluster_id_col argument.","code":"# Generate network, but don't print the graph plot yet network <- buildRepSeqNetwork(   toy_data, seq_col = \"CloneSeq\",    node_stats = TRUE, cluster_stats = TRUE,   color_nodes_by = \"transitivity\", color_scheme = \"plasma-1\",   size_nodes_by = \"degree\", node_size_limits = c(0.5, 1.5),    print_plots = FALSE, output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Computing node-level network statistics... Done. #> Computing cluster membership within the network... Done. #> Computing statistics for the 20 clusters in the network... Done. #> Generating graph plot with nodes colored by transitivity... Done.  # Add labels to the two largest clusters and print the plot addClusterLabels(plot = network$plots$transitivity,                  net = network,                  top_n_clusters = 2,                  criterion = \"node_count\" # (the default) ) #> Warning: Removed 120 rows containing missing values (`geom_text()`)."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"generate-multiple-plots-of-a-network","dir":"Articles","previous_headings":"","what":"Generate Multiple Plots of a Network","title":"Network Visualization","text":"buildRepSeqNetwork can generate multiple plots network graph, plot coloring nodes according different variable. accomplished providing vector column names color_nodes_by argument instead single column name. different color palette can used plot. achieved providing character vector color_scheme argument. vector must length vector provided color_nodes_by argument. color palette specified entry applied corresponding plot. , instead, single value provided color_scheme argument, specified color palette applied plots.   plots stored plots list, contained within output list buildRepSeqNetwork. plot named according variable used color nodes.","code":"network <- buildRepSeqNetwork(   toy_data, seq_col = \"CloneSeq\", node_stats = TRUE,    color_nodes_by = c(\"transitivity\", \"CloneCount\"),   color_scheme = c(\"plasma-1\", \"default\"),   size_nodes_by = \"CloneCount\", node_size_limits = c(0.1, 2.5),   output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Computing node-level network statistics... Done. #> Generating graph plot with nodes colored by transitivity... #>  Done. #> Generating graph plot with nodes colored by CloneCount... #>  Done. names(network$plots) #> [1] \"transitivity\" \"CloneCount\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"title-and-subtitle","dir":"Articles","previous_headings":"","what":"Title and Subtitle","title":"Network Visualization","text":"output_name argument used names files saved buildRepSeqNetwork. default, also used title plot generated buildRepSeqNetwork. default value output_name \"MyRepSeqNetwork\". default, subtitle plot contains information settings used construct network, including values dist_type dist_cutoff arguments. custom plot title subtitle can specified using plot_title plot_subtitle arguments, respectively. Either element can omitted plot supplying NULL value corresponding argument, shown .","code":"buildRepSeqNetwork(toy_data, seq_col = \"CloneSeq\", node_stats = TRUE,                    color_nodes_by = \"transitivity\", color_scheme = \"plasma-1\",                    size_nodes_by = \"degree\", node_size_limits = c(0.5, 2.5),                    plot_title = NULL, plot_subtitle = NULL, output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Computing node-level network statistics... Done. #> Generating graph plot with nodes colored by transitivity... #>  Done."},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"excluding-sizecolor-legend","dir":"Articles","previous_headings":"Legend","what":"Excluding Size/Color Legend","title":"Network Visualization","text":"default, nodes colored sized dynamically according variable, legend included plot showing color scale /size scale. color scale can manually excluded legend setting color_legend = FALSE. Similarly, setting size_legend = FALSE exclude size scale legend. Note: exception default behavior occurs variable used color nodes discrete 20 distinct values. case color scale automatically excluded legend order prevent taking excessive space plot. name variable used color nodes reported plot’s subtitle reference. user wishes ignore exception force color legend shown, can setting color_legend = TRUE.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"legend-titles","dir":"Articles","previous_headings":"Legend","what":"Legend Titles","title":"Network Visualization","text":"default, title shown color scale legend name variable used color nodes. custom title can specified providing character string color_title argument. Similarly, default title size scale name variable used size nodes, custom title can specified using size_title argument. color_title size_title arguments can also set NULL order omit respective title. vector provided color_nodes_by argument order generate multiple plots, color_title accept character vector matching length, entry title color legend corresponding plot.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"edge-width","dir":"Articles","previous_headings":"","what":"Edge width","title":"Network Visualization","text":"default, edges plot drawn width 0.1. different width can used edges setting edge_width argument different value.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"excluding-plots","dir":"Articles","previous_headings":"","what":"Excluding Plots","title":"Network Visualization","text":"Use print_plots = FALSE prevent plots printed R plotting window. Plots still generated returned output, well saved pdf valid output directory exists. Use plots = FALSE prevent plots generated entirely.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"motivation","dir":"Articles","previous_headings":"Modifying Plots After Creation","what":"Motivation","title":"Network Visualization","text":"cases, user may wish make changes plot previously created buildRepSeqNetwork function. example, suppose call buildRepSeqNetwork order construct network simulated data:  Now suppose wish modify plot seen . call buildRepSeqNetwork , using appropriate arguments customize plot desired. However, involve reconstructing network, unnecessary purposes take substantial time network large. Another option directly modify plot contained within already-existing output buildRepSeqNetwork.","code":"output <- buildRepSeqNetwork(toy_data, \"CloneSeq\", node_stats = TRUE,                              output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Computing node-level network statistics... Done. #> Generating graph plot with nodes colored by degree... #>  Done."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"how-to-modify-plots","dir":"Articles","previous_headings":"Modifying Plots After Creation","what":"How to Modify Plots","title":"Network Visualization","text":"list returned buildRepSeqNetwork contains sublist named plots: plot created buildRepSeqNetwork contained list, plot named according variable used color nodes. list contains one plot named degree. plot exists object class ggraph ggraph package. ggraph class inherits structure ggplot class ggplot2 package. plot can therefore modified using ggplot2 functions syntax, many excellent informational resources available. ggraph class extends ggplot class addition graph-specific geoms layouts. plots produced buildRepSeqNetwork use geoms geom_edge_link0 edges geom_node_point nodes. demonstration , remove plot title subtitle, adjust node size, color nodes using CloneCount variable change color scale.  can replace original plot contained output buildRepSeqNetwork modified plot. variable used color nodes modified, can also rename plot accordingly. Alternatively, can keep original plot add modified plot plot list contained existing output buildRepSeqNetwork. complete set functions, geoms aesthetics within ggraph ggplot2 packages allow user customize plots beyond possible using arguments buildRepSeqNetwork.","code":"names(output$plots) #> [1] \"degree\" library(ggraph) #> Loading required package: ggplot2  # modify plot modified_plot <-    output$plots$degree +    # remove title and subtitle   labs(title = NULL, subtitle = NULL) +     # adjust node size and node color variable   geom_node_point(     aes(color = output$node_data$CloneCount), size = 1.5) +   # change legend title for node color   guides(color = guide_legend(title = \"Clone Count\")) +    # change color scale   scale_color_viridis(option = \"plasma\", direction = -1)  modified_plot # replace original plot with modified plot output$plots$degree <- modified_plot  # rename plot according to new node color variable names(output$plots) <- \"CloneCount\" # add modified plot to list containing the original plot output$plots$CloneCount <- modified_plot  names(output$plots) #> [1] \"degree\"     \"CloneCount\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"custom-color-scales","dir":"Articles","previous_headings":"Modifying Plots After Creation","what":"Custom Color Scales","title":"Network Visualization","text":"color scales available color_scheme argument buildRepSeqNetwork function limited selection preset color scales. user wishes manually customize color scheme nodes, can done modifying plot created.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"for-continuous-variables","dir":"Articles","previous_headings":"Modifying Plots After Creation > Custom Color Scales","what":"For Continuous Variables","title":"Network Visualization","text":"variable used color nodes continuous, custom color gradient can specified using scale_color_gradient function, allows user specify color end gradient using arguments low high. , use buildRepSeqNetwork generate plot nodes colored using CloneCount variable. modify plot use custom color gradient.","code":"# generate plot with nodes colored by clone count output <- buildRepSeqNetwork(   toy_data, \"CloneSeq\",    color_nodes_by = \"CloneCount\",    size_nodes_by = 1.5,   print_plots = FALSE, output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Generating graph plot with nodes colored by CloneCount... Done.  # modify plot to use custom color gradient; replace original plot output$plots$CloneCount <-    output$plots$CloneCount +   scale_color_gradient(low = \"pink\", high = \"purple4\")    output$plots$CloneCount"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"for-discrete-variables","dir":"Articles","previous_headings":"Modifying Plots After Creation > Custom Color Scales","what":"For Discrete Variables","title":"Network Visualization","text":"variable used color nodes discrete, custom color palette can specified using scale_color_manual function, allows user specify color used value discrete variable. argument values accepts vector colors whose length must match number unique values discrete variable. , use buildRepSeqNetwork generate plot nodes colored using SampleID variable. modify plot use custom color palette.","code":"# generate plot with nodes colored by sample ID output <- buildRepSeqNetwork(   toy_data, \"CloneSeq\",    color_nodes_by = \"SampleID\",    size_nodes_by = 1.5,   print_plots = FALSE, output_dir = NULL) #> Input data contains 200 rows. #> Removing sequences with length fewer than 3 characters... Done. 200 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes). #> Generating graph plot with nodes colored by SampleID... Done.  # modify plot to use custom color palette output$plots[[1]] +    scale_color_manual(values = c(\"deepskyblue\", \"red2\"))"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"generating-new-plots","dir":"Articles","previous_headings":"","what":"Generating New Plots","title":"Network Visualization","text":"cases, rather modifying existing plot, user may wish generate entirely new plot network graph. example, may case user wants keep existing plots, also wants additional plots nodes colored according new variables used current plots. new plots can generated calling buildRepSeqNetwork , user may wish avoid reconstructing network, redundant time-consuming large networks. Instead, new plots can generated using generateNetworkGraphPlots function combination existing output buildRepSeqNetwork. function’s first second arguments accept igraph node_data objects, respectively, contained output list buildRepSeqNetwork. remaining arguments generateNetworkGraphPlots used customize plot behave identically buildRepSeqNetwork covered vignette. generateNetworkGraphPlots function can used generate multiple plots similar fashion buildRepSeqNetwork supplying vector column references color_nodes_by argument. function returns list containing one item plot. default, plots also printed plots pane R.   default, plots generated using generateNetworkGraphPlots title subtitle. can set using plot_title plot_subtitle arguments, respectively. new plots can added original list plots appending list returned generateNetworkGraphPlots.","code":"# Generate new plots using previous output of buildRepSeqNetwork new_plots <- generateNetworkGraphPlots(   igraph = output$igraph, data = output$node_data,   color_nodes_by = c(\"CloneCount\", \"CloneSeq\"),    color_scheme = c(\"default\", \"turbo\"),   size_nodes_by = 1) #> Generating graph plot with nodes colored by CloneCount... #>  Done. #> Generating graph plot with nodes colored by CloneSeq... #>  Done. # add new plots to original list of plots output$plots <- c(output$plots, new_plots)  names(output$plots) #> [1] \"SampleID\"   \"CloneCount\" \"CloneSeq\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/network_visualization.html","id":"saving-plots","dir":"Articles","previous_headings":"","what":"Saving Plots","title":"Network Visualization","text":"making changes list plots contained output buildRepSeqNetwork, replacing plot modified version adding new plots list, user may wish save plots pdf file. can conveniently accomplished passing list plots saveNetworkPlots function specifying file path pdf file using outfile argument. plots list saved single pdf.","code":"saveNetworkPlots(output$plots, outfile = file.path(dir_out, \"plots.pdf\")) #> Network graph plots saved to file: #>   /tmp/Rtmp1sQS3j/plots.pdf"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Searching for Public TCR/BCR Clusters","text":"NAIR package includes set functions facilitate searching public TCR/BCR clusters across multiple samples Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data. context, public cluster consists similar TCR/BCR clones (e.g., whose CDR3 amino acid sequences differ one amino acid) shared across samples (e.g., across individuals across time points single individual). first provide brief conceptual overview, followed demonstration explain process greater detail.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"overview-of-process","dir":"Articles","previous_headings":"Introduction","what":"Overview of Process","title":"Searching for Public TCR/BCR Clusters","text":"Filter clusters within sample’s network. sample, construct repertoire network use cluster analysis partition nodes clusters. Filter data, keeping clusters sufficient node count clone count. Construct global network filtered data perform clustering. Combine filtered data samples single global network. Perform cluster analysis assign membership global clusters. Assess sample representation within clusters identify public clusters.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"simulate-data-for-demonstration","dir":"Articles","previous_headings":"Introduction","what":"Simulate Data for Demonstration","title":"Searching for Public TCR/BCR Clusters","text":"simulate toy data demonstration. simulate total 30 samples, containing 30 observations. sequences simulated tendency appear relatively samples, others simulated tendency appear many samples. sample saved separate file using .rds file format. files named “Sample1.rds”, “Sample2.rds”, etc. file path directory saved R environment variable dir_input_samples later reference. first rows data first sample appear follows:","code":"# Use temp dir data_dir <- tempdir()  # Directory to store input files dir_input_samples <- file.path(data_dir, \"input_samples\") dir.create(dir_input_samples, showWarnings = FALSE)  samples <- 30 sample_size <- 30 # (seqs per sample)            base_seqs <- c(   \"CASSIEGQLSTDTQYF\", \"CASSEEGQLSTDTQYF\", \"CASSSVETQYF\",   \"CASSPEGQLSTDTQYF\", \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\",   \"CASSLTSGYNEQFF\", \"CASSETGYNEQFF\", \"CASSLTGGNEQFF\", \"CASSYLTGYNEQFF\",   \"CASSLTGNEQFF\", \"CASSLNGYNEQFF\", \"CASSFPWDGYGYTF\", \"CASTLARQGGELFF\",   \"CASTLSRQGGELFF\", \"CSVELLPTGPLETSYNEQFF\", \"CSVELLPTGPSETSYNEQFF\",   \"CVELLPTGPSETSYNEQFF\", \"CASLAGGRTQETQYF\", \"CASRLAGGRTQETQYF\",   \"CASSLAGGRTETQYF\", \"CASSLAGGRTQETQYF\", \"CASSRLAGGRTQETQYF\",   \"CASQYGGGNQPQHF\", \"CASSLGGGNQPQHF\", \"CASSNGGGNQPQHF\", \"CASSYGGGGNQPQHF\",   \"CASSYGGGQPQHF\", \"CASSYKGGNQPQHF\", \"CASSYTGGGNQPQHF\",    \"CAWSSQETQYF\", \"CASSSPETQYF\", \"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\")   # relative generation probabilities pgen <- cbind(   stats::toeplitz(0.6^(0:(sample_size - 1))),   matrix(1, nrow = samples, ncol = length(base_seqs) - samples))  # Simulate the data library(NAIR) foo <- simulateToyData(       samples = samples, sample_size = sample_size,   prefix_length = 1, prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, samples), rep(0, samples)),   affixes = base_seqs, affix_probs = pgen, num_edits = 0,   output_dir = dir_input_samples, no_return = FALSE) # View first few rows of data for sample 1 head(readRDS(file.path(dir_input_samples, \"Sample1.rds\"))) #>           CloneSeq CloneFrequency CloneCount SampleID #> 1 CASSIEGQLSTDTQYF     0.02606559       2832  Sample1 #> 2 CASSEEGQLSTDTQYF     0.03718396       4040  Sample1 #> 3      CASSSPETQYF     0.03182726       3458  Sample1 #> 4 CASSIEGQLSTDTQYF     0.04615781       5015  Sample1 #> 5      CAWSSQETQYF     0.06006498       6526  Sample1 #> 6 CASSEEGQLSTDTQYF     0.03363123       3654  Sample1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"step-1-filter-clusters-within-each-sample","dir":"Articles","previous_headings":"","what":"Step 1: Filter Clusters Within Each Sample","title":"Searching for Public TCR/BCR Clusters","text":"First, use findPublicClusters function perform network analysis sample individually select clusters based node count clone count. sample, repertoire network constructed cluster analysis used partition network clusters. clusters filtered according node count clone count based user-specified criteria. node-level cluster-level metadata clusters remain filtering saved files used inputs step 2. , explain function’s usage.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"filter-settings","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"Filter Settings","title":"Searching for Public TCR/BCR Clusters","text":"findPublicClusters function several parameters control criteria used filter nodes clusters sample. arguments presented .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"top-n-clusters","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Filter Settings","what":"Top \\(n\\) Clusters","title":"Searching for Public TCR/BCR Clusters","text":"Within sample, clusters ranked node count. top \\(n\\) highest-ranking clusters (greatest node count) within sample automatically retained. default value \\(n\\) 20. different value \\(n\\) can specified using top_n_clusters argument. one cluster tied \\(n\\)-th place ranking node count, one cluster included top \\(n\\) clusters. ensures \\(n\\) clusters selected sample based criterion. fewer \\(n\\) clusters present network sample, clusters retained.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"minimum-node-count","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Filter Settings","what":"Minimum Node Count","title":"Searching for Public TCR/BCR Clusters","text":"addition retaining top \\(n\\) clusters sample, clusters contain sufficient number nodes also retained. default, cluster containing least ten nodes retained. value can adjusted using min_node_count argument. example, setting min_clone_count = 30 retain clusters containing least 30 nodes.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"minimum-clone-count","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Filter Settings","what":"Minimum Clone Count","title":"Searching for Public TCR/BCR Clusters","text":"addition clusters retained based node count, clusters sufficient aggregate clone count also retained. aggregate clone count cluster sum clone counts across nodes (clones) cluster. default, cluster aggregate clone count least 100 retained. value can adjusted using min_clone_count argument. example, setting min_clone_count = 500 retain clusters aggregate clone count least 500. Note clusters selected according criterion clone counts provided. done using count_col argument explained Specifying Count Column subsection.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"sequence-length","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Filter Settings","what":"Sequence Length","title":"Searching for Public TCR/BCR Clusters","text":"building network sample, clones whose receptor sequences least three characters length included network. minimum value sequence length can adjusted setting min_seq_length argument different value. Setting value NULL bypasses check.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"sequence-content","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Filter Settings","what":"Sequence Content","title":"Searching for Public TCR/BCR Clusters","text":"building network sample, clones whose receptor sequences contain characters * _ omitted network. can changed using drop_matches argument, accommodates character string regular expression specifying pattern content search . content clone’s sequence checked match pattern using grep function base R. match found, clone omitted network. Setting value NULL bypasses check. details pattern matching performed, please refer base R documentation files regex grep.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"input-file-paths","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"Input File Paths","title":"Searching for Public TCR/BCR Clusters","text":"main argument findPublicClusters function file_list argument, accepts vector containing file paths. path corresponds distinct AIRR-Seq data file representing individual sample. , prepare vector input_files provided file_list argument findPublicClusters:","code":"# input files for step 1 (one per sample) input_files <- file.path(dir_input_samples, paste0(\"Sample\", 1:samples, \".rds\")) head(input_files) #> [1] \"/tmp/Rtmp4keLMW/input_samples/Sample1.rds\" #> [2] \"/tmp/Rtmp4keLMW/input_samples/Sample2.rds\" #> [3] \"/tmp/Rtmp4keLMW/input_samples/Sample3.rds\" #> [4] \"/tmp/Rtmp4keLMW/input_samples/Sample4.rds\" #> [5] \"/tmp/Rtmp4keLMW/input_samples/Sample5.rds\" #> [6] \"/tmp/Rtmp4keLMW/input_samples/Sample6.rds\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"input-file-format","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"Input File Format","title":"Searching for Public TCR/BCR Clusters","text":"file format input files findPublicClusters specified using input_type parameter. supported formats include \"rds\", \"rda\", \"csv\", well files can read using read.table function, \"tsv\" \"txt\". text formats \"csv\", \"tsv\" \"txt\", users can specify separation option utilizing sep argument. default setting sep = \"\" accommodates forms white space, .e., one spaces, tabs, newlines carriage returns. addition, important note first line data assumed header default. disable behavior treat first line data, users must set header parameter FALSE. \"rda\" (Rdata) format, data_symbols argument used specify name sample’s AIRR-Seq data frame within Rdata file (.e., name data frame appear R environment Rdata file loaded). argument accepts character string. requires sample’s data frame name within respective Rdata file. example, sample’s data frame named mydataframe saved using command save(mydataframe, file = myfilepath), file path myfilepath different sample, set data_symbols = \"mydataframe\". samples stored .rds files, use input_type = \"rds\".","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"specifying-the-sequence-column","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"Specifying the Sequence Column","title":"Searching for Public TCR/BCR Clusters","text":"clone’s TCR/BCR sequence used basis similarity clones network. seq_col argument used specify column containing clone sequences input data sample. argument accepts either column name column index. simulated data, column containing clone sequences named CloneSeq.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"specifying-the-count-column","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"Specifying the Count Column","title":"Searching for Public TCR/BCR Clusters","text":"clone count clone used filter clusters within sample. count_col argument used specify column containing clone counts input data sample. argument accepts either column name column index. simulated data, column containing clone sequences named CloneCount.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"assigning-custom-sample-ids","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"Assigning Custom Sample IDs","title":"Searching for Public TCR/BCR Clusters","text":"sample ID clone included filtered data saved findPublicClusters. allow us distinguish sample origin clone combine filtered data samples step 2. default, samples labeled numerically according order appear file_list. sample_ids argument allows custom sample IDs assigned, desired. argument accepts vector length file_list. entry sample_ids assigned sample ID sample corresponding entry file_list.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"network-settings-per-sample","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"Network Settings Per Sample","title":"Searching for Public TCR/BCR Clusters","text":"settings used construct network sample can customized using arguments .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"distance-function","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Network Settings Per Sample","what":"Distance Function","title":"Searching for Public TCR/BCR Clusters","text":"default method measuring similarity TCR/BCR sequences Hamming distance. calculates number differences two sequences length. sequences different lengths, shorter sequence extended adding non-matching characters make length longer sequence. Levenshtein distance can used alternative measurement determine similarity sequences. calculates minimum number single-character edits (insertions, deletions transformations) needed transform one sequence . method particularly useful comparing sequences different lengths can account insertions deletions. constructing network based similarity CDR-3 nucleotide sequences, preferable use Levenshtein distance instead default Hamming distance setting argument dist_type = \"levenshtein\". However, Levenshtein distance requires significantly computational time Hamming distance, may challenging working large data sets long TCR/BCR sequences.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"distance-cutoff","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Network Settings Per Sample","what":"Distance Cutoff","title":"Searching for Public TCR/BCR Clusters","text":"distance function specified dist_type argument (Hamming distance default) used quantify similarity TCR/BCR sequences. chosen distance measurement determines distance two nodes network graph. default, two nodes graph connected edge distance 1. However, users want adjust cutoff, dist_cutoff argument can set different value. example, dist_cutoff = 2, two nodes connected edge distance 2. cutoff value controls stringency network construction affects number density edges network.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"keepremove-isolated-nodes","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Network Settings Per Sample","what":"Keep/Remove Isolated Nodes","title":"Searching for Public TCR/BCR Clusters","text":"default, given node edges connecting nodes network, removed network graph included output. desired, nodes can kept network, including edge connections nodes. accomplished setting drop_isolated_nodes argument FALSE.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"clustering-algorithm","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"Clustering Algorithm","title":"Searching for Public TCR/BCR Clusters","text":"default, clustering performed using cluster_fast_greedy algorithm igraph package. clustering algorithms igraph package can used instead default algorithm. algorithm specified using cluster_fun argument, accepts one following functions: cluster_fast_greedy cluster_edge_betweenness cluster_fluid_communities cluster_infomap cluster_label_prop cluster_leading_eigen cluster_leiden cluster_louvain cluster_optimal cluster_spinglass cluster_walktrap example, setting cluster_fun = cluster_leiden performs clustering using cluster_leiden algorithm. information particular algorithm, users can refer help documentation file. example, command ?igraph::cluster_fast_greedy loads documentation file cluster_fast_greedy algorithm.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-settings","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"Output Settings","title":"Searching for Public TCR/BCR Clusters","text":"findPublicClusters function return direct output. Instead, saves network metadata selected clusters files used inputs step 2. sample, findPublicClusters saves two files, one containing node-specific network metadata containing cluster-specific network metadata. data sample saved filtering clusters, thus includes clusters selected based specified filter settings.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"subsetting-columns-from-the-input-data","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Output Settings","what":"Subsetting Columns From the Input Data","title":"Searching for Public TCR/BCR Clusters","text":"node-specific network metadata sample includes data columns present sample’s original input data frame. cases, user may wish columns included. case, user can specify columns included using subset_cols argument, accepts vector containing either column names column indices columns kept. column specified seq_col argument automatically included regardless value subset_cols.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-directory","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Output Settings","what":"Output Directory","title":"Searching for Public TCR/BCR Clusters","text":"file path output directory specified using output_dir argument. output directory specified output_dir argument created already exist. Within output directory, two subdirectories created. One subdirectory, named node_meta_data, contains node-level data files sample, , named cluster_meta_data, contains cluster-level data files. Within two subdirectories, file sample named according sample ID specified sample_ids argument (see Assigning Custom Sample IDs subsection ).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-file-format","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Output Settings","what":"Output File Format","title":"Searching for Public TCR/BCR Clusters","text":"default, file saved RDS file. can changed using output_type argument. valid options include \"rda\" \"csv\". \"rda\" (Rdata) format, data frame containing node-level data named ndat R environment Rdata file loaded, data frame containing cluster-level data named cdat.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"saving-unfiltered-network-data","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample > Output Settings","what":"Saving Unfiltered Network Data","title":"Searching for Public TCR/BCR Clusters","text":"default, findPublicClusters function saves network metadata clusters selected based specified filter settings. desired, network metadata sample’s full network can also saved prior filtering clusters. done providing file path output_dir_unfiltered argument, specifies separate output directory full network data. sample’s full network data prior filtering clusters saved directory specified output_dir_unfiltered argument. data saved separately , addition , default data saved filtering clusters. Note sequence-based filter settings specified min_seq_length drop_chars still apply sample’s full network, since network constructed applying filters. full, pre-filtered network refers network contains sample’s clusters, .e., public clusters identified clusters removed. full network data sample includes node-level metadata, cluster-level metadata, igraph edge list, network adjacency matrix, well plots generated (see next subsection). default, R objects files saved single RDS file whose file name (excluding .rds file extension) sample ID (specified sample_ids argument). RDA file format can used instead RDS setting output_type_unfiltered = \"rda\". desired, R object can saved separate file setting output_type_unfiltered = \"individual\". saves object according default file format used buildRepSeqNetwork. saving objects individually, sample ID used common file name prefix files sample.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"optional-network-visualization-per-sample","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"(Optional) Network Visualization Per Sample","title":"Searching for Public TCR/BCR Clusters","text":"default, findPublicClusters produce visual plots constructing network sample. Instead, visualization occurs combining data samples single network step 2. desired, visual plots full network sample (prior filtering clusters) can produced setting plots = TRUE. plots can printed R additionally setting print_plots = TRUE. Furthermore, user specified save full network data sample (prior filtering clusters) providing file path output_type_unfiltered argument, plots saved along rest full network data sample. Note plots saved along default data saved filtering clusters. Therefore, file path provided output_type_unfiltered argument, plots saved . , addition, argument print_plots set FALSE (default), setting plots = TRUE effect. user sets plots TRUE, default, plot sample color nodes according cluster membership. desired, different variable can used color nodes. done specifying column variable color_nodes_by argument, accepts column name column index. vignette details additional arguments can used customize visual plot sample.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"example-function-call","dir":"Articles","previous_headings":"Step 1: Filter Clusters Within Each Sample","what":"Example Function Call","title":"Searching for Public TCR/BCR Clusters","text":"execute findPublicClusters function using input prepared earlier file_list argument. file path output directory saved R variable named dir_filtered_samples later reference.","code":"# 1. Filter Clusters Within Each Sample dir_filtered_samples <- file.path(data_dir, \"filtered_samples\") findPublicClusters(   file_list = input_files, input_type = \"rds\",   sample_ids = paste0(\"Sample\", 1:samples),   seq_col = \"CloneSeq\", count_col = \"CloneCount\",   min_seq_length = NULL, drop_matches = NULL,   top_n_clusters = 3, min_node_count = 5, min_clone_count = 15000,   output_dir = dir_filtered_samples) #> <<< Beginning search for public clusters >>> #> Processing sample 1 of 30: Sample1 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 30 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 7 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (18 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 2 of 30: Sample2 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 28 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 6 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (22 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 3 of 30: Sample3 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 29 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 6 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (20 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 4 of 30: Sample4 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 28 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 6 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (18 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 5 of 30: Sample5 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 27 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 6 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (22 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 6 of 30: Sample6 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 29 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 9 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (15 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 7 of 30: Sample7 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 26 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 8 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (13 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 8 of 30: Sample8 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 26 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 9 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (12 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 9 of 30: Sample9 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 26 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 8 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (13 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 10 of 30: Sample10 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 28 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 9 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (15 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 11 of 30: Sample11 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 26 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 8 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (18 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 12 of 30: Sample12 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 29 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 10 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (12 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 13 of 30: Sample13 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 27 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 8 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (18 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 14 of 30: Sample14 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 26 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 7 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (17 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 15 of 30: Sample15 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 29 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 8 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (14 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 16 of 30: Sample16 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 26 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 6 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (21 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 17 of 30: Sample17 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 29 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 7 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (22 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 18 of 30: Sample18 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 28 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 9 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (14 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 19 of 30: Sample19 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 28 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 8 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (17 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 20 of 30: Sample20 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 26 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 8 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (15 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 21 of 30: Sample21 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 28 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 8 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (19 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 22 of 30: Sample22 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 28 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 8 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (16 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 23 of 30: Sample23 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 27 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 7 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (19 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 24 of 30: Sample24 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 27 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 8 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (18 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 25 of 30: Sample25 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 28 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 9 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (17 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 26 of 30: Sample26 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 28 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 7 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (17 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 27 of 30: Sample27 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 25 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 5 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (18 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 28 of 30: Sample28 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 26 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 7 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (16 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 29 of 30: Sample29 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 29 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 7 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 4 clusters (22 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> Processing sample 30 of 30: Sample30 #> Input data contains 30 rows. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 28 nodes (after removing isolated nodes). #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 6 clusters in the network... Done. #> >>> Filtering clusters in the current sample... Done. #> * 3 clusters (19 nodes) remain. Saving results... Done. #> ---------------------------------------------------------------------- #> All samples complete. Filtered data is located in the following directory: #>   /tmp/Rtmp4keLMW/filtered_samples"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"step-2-global-network-of-public-clusters","dir":"Articles","previous_headings":"","what":"Step 2: Global Network of Public Clusters","title":"Searching for Public TCR/BCR Clusters","text":"Next, use buildPublicClusterNetwork function combine filtered data samples single global network perform clustering analysis.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"input-file-paths-1","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Input File Paths","title":"Searching for Public TCR/BCR Clusters","text":"files created findPublicClusters previous step contain filtered data sample. detailed earlier, files located two separate subdirectories, one containing files node-level metadata containing files cluster-level metadata. step, require files containing node-level metadata. files provided buildPublicClusterNetwork supplying character vector file paths file_list argument. create vector .","code":"# Node-level metadata for each sample's filtered clusters dir_filtered_samples_node <- file.path(dir_filtered_samples, \"node_meta_data\") files_filtered_samples_node <- list.files(dir_filtered_samples_node,                                            full.names = TRUE) head(files_filtered_samples_node) #> [1] \"/tmp/Rtmp4keLMW/filtered_samples/node_meta_data/Sample1.rds\"  #> [2] \"/tmp/Rtmp4keLMW/filtered_samples/node_meta_data/Sample10.rds\" #> [3] \"/tmp/Rtmp4keLMW/filtered_samples/node_meta_data/Sample11.rds\" #> [4] \"/tmp/Rtmp4keLMW/filtered_samples/node_meta_data/Sample12.rds\" #> [5] \"/tmp/Rtmp4keLMW/filtered_samples/node_meta_data/Sample13.rds\" #> [6] \"/tmp/Rtmp4keLMW/filtered_samples/node_meta_data/Sample14.rds\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"input-file-format-1","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Input File Format","title":"Searching for Public TCR/BCR Clusters","text":"default, findPublicClusters saves output files using RDS file format. default, buildPublicClusterNetwork assumes input files RDS file format. files created findPublicClusters saved using different file format, input_type argument can used specify format used. argument behavior seen findPublicClusters. \"rda\" (Rdata) file format, data_symbols argument used specify name sample’s node-level data frame within respective Rdata file. findPublicClusters called output_type = \"rda\", node-level data frame sample named ndat. Accordingly, default value data_symbols ndat, user need manually specify value data_symbols unless names within files changed.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"specifying-the-sequence-and-count-columns","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Specifying the Sequence and Count Columns","title":"Searching for Public TCR/BCR Clusters","text":"seq_col count_col arguments used specify columns containing receptor sequences clone counts, respectively, manner seen earlier findPublicClusters. clone counts used compute cluster-level properties, omitted count_col left unspecified.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"network-settings","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Network Settings","title":"Searching for Public TCR/BCR Clusters","text":"settings used construct network can customized using arguments findPublicClusters, shown default values: dist_type = \"hamming\" dist_cutoff = 1 drop_isolated_nodes = FALSE Refer vignette details meaning behavior.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"clustering-algorithm-1","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Clustering Algorithm","title":"Searching for Public TCR/BCR Clusters","text":"constructing global network, buildPublicClusterNetwork performs cluster analysis network nodes, partitioning global network graph densely-connected subgraphs. global clusters can contain nodes different samples. default, clustering performed using cluster_fast_greedy algorithm igraph package. clustering algorithms igraph package can used instead default algorithm. algorithm specified using cluster_fun argument, accepts one following functions: cluster_fast_greedy cluster_edge_betweenness cluster_fluid_communities cluster_infomap cluster_label_prop cluster_leading_eigen cluster_leiden cluster_louvain cluster_optimal cluster_spinglass cluster_walktrap example, setting cluster_fun = cluster_leiden performs clustering using cluster_leiden algorithm. information particular algorithm, users can refer help documentation file. example, command ?igraph::cluster_fast_greedy loads documentation file cluster_fast_greedy algorithm.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"customization-of-visual-plot","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Customization of Visual Plot","title":"Searching for Public TCR/BCR Clusters","text":"default, network graph plot produced buildPublicClusterNetwork colors nodes according sample ID. can assist user identifying public clusters. desired, different variable can used color nodes. done specifying column variable color_nodes_by argument, accepts column name column index. vignette details additional arguments can used customize visual plot.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-settings-1","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Output Settings","title":"Searching for Public TCR/BCR Clusters","text":"output returned buildPublicClusterNetwork follows format output buildRepSeqNetwork. function returns list containing node-level cluster-level metadata global network, well plots generated, addition network adjacency matrix igraph network edge list.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-directory-1","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Output Settings","what":"Output Directory","title":"Searching for Public TCR/BCR Clusters","text":"default, subdirectory named public_clusters created within current working directory, contents list returned buildPublicClusterNetwork saved subdirectory. output can saved different directory providing file path output_dir argument. user can also specify output_dir = NULL order prevent output saved.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-file-format-1","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Output Settings","what":"Output File Format","title":"Searching for Public TCR/BCR Clusters","text":"default, element list returned buildPublicClusterNetwork saved individual file. file formats default file formats used buildRepSeqNetwork. particular, node-level cluster-level metadata saved csv files. Alternatively, user can save entire output list single compressed rds rda file setting output_type = \"rds\" output_type = \"rda\", respectively.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"pdf-of-plots","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Output Settings","what":"PDF of Plots","title":"Searching for Public TCR/BCR Clusters","text":"Regardless value output_type, separate pdf file containing graph plot(s) created output_dir. dimensions (inches) pdf can adjusted using plot_width plot_height arguments, defaults 12 10, respectively. pdf file created plots generated (.e., argument plots set FALSE). Note: ggraph object plot saved user sets output_type = \"rds\" output_type = \"rda\". Using one settings recommended used user wishes modify plots future. Note, however, plots can always re-generated node-level meta data using generateGraphPlot function described .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"output-file-names","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Output Settings","what":"Output File Name(s)","title":"Searching for Public TCR/BCR Clusters","text":"default, name saved file starts PublicClusterNetwork. prefix can changed providing character string output_name argument. output_type set \"rds\" \"rda\", name file value output_name argument followed appropriate file extension (either .rds .rda). name pdf file graph plot value output_name argument followed .pdf file extension.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"example-call-and-output","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Example Call and Output","title":"Searching for Public TCR/BCR Clusters","text":"execute buildPublicClusterNetwork function using input prepared earlier file_list argument:  default files saved buildPublicClusterNetwork following names: elements output list returned buildPublicClusterNetwork following names: , describe element list.","code":"dir_out <- file.path(data_dir, \"public_clusters\")  # Collect clones from all public clusters and perform network analysis public_clusters <- buildPublicClusterNetwork(   file_list = files_filtered_samples_node,   seq_col = \"CloneSeq\", count_col = \"CloneCount\",   size_nodes_by = 1,   output_dir = dir_out) #> Building network of public clusters: #> Input data contains 517 rows. #> Removing sequences with length fewer than 3 characters... Done. 517 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 517 nodes. #> Computing cluster membership within the network... Done. #> Computing node-level network statistics... Done. #> Computing statistics for the 20 clusters in the network... Done. #> Generating graph plot with nodes colored by SampleID... #>  Done. #> Node-level meta-data saved to file: #>   /tmp/Rtmp4keLMW/public_clusters/PublicClusterNetwork_NodeMetadata.csv #> Cluster-level meta-data saved to file: #>   /tmp/Rtmp4keLMW/public_clusters/PublicClusterNetwork_ClusterMetadata.csv #> Network graph plots saved to file: #>   /tmp/Rtmp4keLMW/public_clusters/PublicClusterNetwork.pdf #> Network igraph saved in edgelist format to file: #>   /tmp/Rtmp4keLMW/public_clusters/PublicClusterNetwork_EdgeList.txt #> Adjacency matrix saved to file: #>   /tmp/Rtmp4keLMW/public_clusters/PublicClusterNetwork_AdjacencyMatrix.mtx # Files saved by buildPublicClusterNetwork list.files(dir_out) #> [1] \"PublicClusterNetwork_AdjacencyMatrix.mtx\" #> [2] \"PublicClusterNetwork_ClusterMetadata.csv\" #> [3] \"PublicClusterNetwork_EdgeList.txt\"        #> [4] \"PublicClusterNetwork_NodeMetadata.csv\"    #> [5] \"PublicClusterNetwork.pdf\" # output returned by buildPublicClusterNetwork names(public_clusters) #> [1] \"igraph\"           \"adjacency_matrix\" \"node_data\"        \"cluster_data\"     #> [5] \"plots\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"node_data","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Example Call and Output","what":"node_data","title":"Searching for Public TCR/BCR Clusters","text":"node_data data frame contained output list contains one row node network, following variables: Notice default, variables present sample’s original data, \"CloneFrequency\" \"CloneCount\", automatically carried data. Many node-level network properties present data. pertain network individual sample node originated, .e., networks constructed step 1. includes variables begin \"SampleLevel\", SampleLevelNetworkDegree, well variable ClusterIDInSample. variables begin \"Public\", PublicNetworkDegree, pertain global network. particular, ClusterIDPublic indicates ID global cluster node belongs.","code":"# variables in the node-level metadata names(public_clusters$node_data) #>  [1] \"CloneSeq\"                           \"CloneFrequency\"                     #>  [3] \"CloneCount\"                         \"SampleID\"                           #>  [5] \"SampleLevelNetworkDegree\"           \"ClusterIDInSample\"                  #>  [7] \"SampleLevelTransitivity\"            \"PublicCloseness\"                    #>  [9] \"SampleLevelCentralityByCloseness\"   \"SampleLevelEigenCentrality\"         #> [11] \"SampleLevelCentralityByEigen\"       \"SampleLevelBetweenness\"             #> [13] \"SampleLevelCentralityByBetweenness\" \"SampleLevelAuthorityScore\"          #> [15] \"SampleLevelCoreness\"                \"SampleLevelPageRank\"                #> [17] \"PublicNetworkDegree\"                \"ClusterIDPublic\"                    #> [19] \"PublicTransitivity\"                 \"PublicCentralityByCloseness\"        #> [21] \"PublicEigenCentrality\"              \"PublicCentralityByEigen\"            #> [23] \"PublicBetweenness\"                  \"PublicCentralityByBetweenness\"      #> [25] \"PublicAuthorityScore\"               \"PublicCoreness\"                     #> [27] \"PublicPageRank\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"cluster_data","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Example Call and Output","what":"cluster_data","title":"Searching for Public TCR/BCR Clusters","text":"cluster_data data frame contained output list contains one row cluster network, following variables representing cluster-level network properties:","code":"# variables in the node-level metadata names(public_clusters$cluster_data) #>  [1] \"cluster_id\"                  \"node_count\"                  #>  [3] \"mean_seq_length\"             \"mean_degree\"                 #>  [5] \"max_degree\"                  \"seq_w_max_degree\"            #>  [7] \"agg_count\"                   \"max_count\"                   #>  [9] \"seq_w_max_count\"             \"diameter_length\"             #> [11] \"global_transitivity\"         \"assortativity\"               #> [13] \"edge_density\"                \"degree_centrality_index\"     #> [15] \"closeness_centrality_index\"  \"eigen_centrality_index\"      #> [17] \"eigen_centrality_eigenvalue\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"plots","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Example Call and Output","what":"plots","title":"Searching for Public TCR/BCR Clusters","text":"item plots list containing plot(s) created buildPublicClusterNetwork. plot object class ggraph (inherits ggplot class), named according variable used color nodes. plots can modified creation described vignette. New plots can generated output described .","code":"names(public_clusters$plots) #> [1] \"SampleID\" class(public_clusters$plots$SampleID) #> [1] \"ggraph\" \"gg\"     \"ggplot\""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"igraph","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Example Call and Output","what":"igraph","title":"Searching for Public TCR/BCR Clusters","text":"item igraph object class igraph, contains list nodes edges comprise network graph. can used generate additional plots network graph.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"adjacency_matrix","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters > Example Call and Output","what":"adjacency_matrix","title":"Searching for Public TCR/BCR Clusters","text":"item adjacency_matrix object class dgCMatrix, sparse matrix format Matrix package. network adjacency matrix encodes graph (.e., set nodes edges) matrix. symmetric, row (equivalently, column) corresponding distinct network node. network nodes follow order rows columns. column name receptor sequence corresponding node column. row name row index original input data corresponds node row. matrix entry value 0 1, 1 indicating edge connecting node row node column, 0 indicating edge connection. Although diagonal entries 1, values meaningful, since edge drawn given node . Note rows (nodes) adjacency matrix correspond rows (nodes) node_data data frame. number rows row names.","code":"class(public_clusters$adjacency_matrix) #> [1] \"dgCMatrix\" #> attr(,\"package\") #> [1] \"Matrix\" # First 5 rows and columns of the network adjacency matrix head(public_clusters$adjacency_matrix, c(5, 5)) #> 5 x 5 sparse Matrix of class \"dgCMatrix\" #>                #> [1,] 1 1 . 1 . #> [2,] 1 1 . 1 . #> [3,] . . 1 . . #> [4,] 1 1 . 1 . #> [5,] . . . . 1"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"labeling-the-global-clusters","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Labeling the Global Clusters","title":"Searching for Public TCR/BCR Clusters","text":"plot generated buildPublicClusterNetwork, appear six clusters three samples represented. order reference clusters within data, can label six largest clusters plot cluster IDs using addClusterLabels function. Note within node-level metadata, global cluster ID stored variable ClusterIDPublic, must provide column name cluster_id_col argument.","code":"# Modify plot to add labels to the clusters public_clusters$plots[[1]] <-    addClusterLabels(     plot = public_clusters$plots[[1]],     net = public_clusters,     top_n_clusters = 6,     cluster_id_col = \"ClusterIDPublic\",     size = 7   )  # View modified plot public_clusters$plots[[1]] #> Warning: Removed 511 rows containing missing values (`geom_text()`)."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/articles/public_clusters.html","id":"focusing-on-individual-clusters-of-interest","dir":"Articles","previous_headings":"Step 2: Global Network of Public Clusters","what":"Focusing on Individual Clusters of Interest","title":"Searching for Public TCR/BCR Clusters","text":"wish focus particular cluster interest within global network, can build network exclusively using clones cluster. accomplished using buildRepSeqNetwork function, subset data according value ClusterIDPublic column, contains global cluster IDs. , focus first cluster, case also largest cluster node count. plot, color node according receptor sequence corresponding clone.  , sixth largest cluster:","code":"# focus on cluster 1 buildRepSeqNetwork(   data =      public_clusters$node_data[public_clusters$node_data$ClusterIDPublic == 1, ],   seq_col = \"CloneSeq\",    color_nodes_by = \"CloneSeq\", color_scheme = \"plasma\",    size_nodes_by = 3,    output_dir = NULL, output_name = \"Cluster 1\") #> Input data contains 96 rows. #> Removing sequences with length fewer than 3 characters... Done. 96 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 96 nodes (after removing isolated nodes). #> Generating graph plot with nodes colored by CloneSeq... #>  Done. # focus on cluster 6 buildRepSeqNetwork(   data =      public_clusters$node_data[public_clusters$node_data$ClusterIDPublic == 6, ],   seq_col = \"CloneSeq\",    color_nodes_by = \"CloneSeq\", color_scheme = \"plasma\",    size_nodes_by = 3,    output_dir = NULL, output_name = \"Cluster 6\") #> Input data contains 27 rows. #> Removing sequences with length fewer than 3 characters... Done. 27 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 27 nodes (after removing isolated nodes). #> Generating graph plot with nodes colored by CloneSeq... #>  Done."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Neal. Author, maintainer. Hai Yang. Author. Le Phi Long. Author. Li Zhang. Author. Ze Zhang. Contributor.            Author BriseisEncoder.py","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Neal B, Yang H, Phi Long L, Zhang L (2023). NAIR: Network Analysis Immune Repertoire. R package version 0.0.9040, https://mlizhangx.github.io/Network-Analysis--Repertoire-Sequencing-/.","code":"@Manual{,   title = {NAIR: Network Analysis for Immune Repertoire},   author = {Brian Neal and Hai Yang and Le {Phi Long} and Li Zhang},   year = {2023},   note = {R package version 0.0.9040},   url = {https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/}, }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"what-data-does-nair-support","dir":"","previous_headings":"","what":"What data does NAIR support?","title":"Network Analysis for Immune Repertoire","text":"NAIR supports bulk single-cell immune repertoire sequence data T-cell B-cell receptors (TCR BCR). Single-cell data: row single cell Bulk data: row distinct TCR/BCR clone (unique combination V-D-J genes nucleotide sequence) typically includes corresponding measurement clonal abundance (e.g., clone count clone frequency/fraction)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"how-does-nair-model-the-immune-repertoire-as-a-network","dir":"","previous_headings":"","what":"How does NAIR model the immune repertoire as a network?","title":"Network Analysis for Immune Repertoire","text":"cell (single-cell data) clone (bulk data) modeled node (vertex) network node, consider corresponding receptor sequence (nucleotide amino acid) pair nodes, measure similarity receptor sequences (using Hamming Levenshtein distance) single-cell data, sequences two chains (e.g., alpha chain beta chain) can jointly used determine similarity cells, considering cells similar sequences chains similar (.e., distance chain threshold) Many clustering algorithms available, seeking identify “best” configuration clusters according different graph criteria Network statistics characterize repertoire terms local global structural properties graph Customized visual plots network graph generated, nodes colored according desired meta-data (e.g., disease status, sample ID, cluster ID, clone count, etc.)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"installation","dir":"","previous_headings":"","what":"Network Analysis for Immune Repertoire","title":"Network Analysis for Immune Repertoire","text":"current development version NAIR can installed github using following commands: Installing development version requires toolchain compiler. Windows, means downloading installing Rtools. MacOS, entails installing XCode Command Line Tools (“XCode CLI”) correct version gfortran macOS version (instructions ).","code":"install.packages(\"devtools\") devtools::install_github(   \"mlizhangx/Network-Analysis-for-Repertoire-Sequencing-\",   build_vignettes = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Network Analysis for Immune Repertoire","text":"package installed, type following commands access package vignettes documentation:","code":"# Package introduction vignette vignette(\"NAIR\", package = \"NAIR\")  # Display vignettes in html browser browseVignettes(\"NAIR\")  # Browse documentation help(package = \"NAIR\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"the-buildrepseqnetwork-function","dir":"","previous_headings":"","what":"The buildRepSeqNetwork function","title":"Network Analysis for Immune Repertoire","text":"General network analysis AIRR-Seq data performed using buildRepSeqNetwork function. function following: Filters input AIRR-Seq data according user specifications Builds network graph immune repertoire Cluster analysis Computation network properties Generates customized visual plot network graph using ggraph Meta-data nodes network, including network properties Meta-data clusters network Network graph plot (returned ggraph object saved pdf) Network adjacency matrix sparse matrix format igraph object containing list edges network graph See vignette(\"buildRepSeqNetwork\") tutorial function’s usage output.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"visualization","dir":"","previous_headings":"","what":"Visualization","title":"Network Analysis for Immune Repertoire","text":"buildRepSeqNetwork function includes various arguments facilitate customization network visualization. See vignette(\"network_visualization\") overview.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"searching-for-associated-clusters","dir":"","previous_headings":"","what":"Searching for Associated Clusters","title":"Network Analysis for Immune Repertoire","text":"Given multiple samples AIRR-Seq data, NAIR package can used search TCR/BCR clusters associated binary variable interest, disease condition, treatment clinical outcome. See vignette(\"associated_clusters\") detailed tutorial.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/index.html","id":"searching-for-public-clusters","dir":"","previous_headings":"","what":"Searching for Public Clusters","title":"Network Analysis for Immune Repertoire","text":"NAIR package includes set functions facilitate searching public TCR/BCR clusters across multiple samples AIRR-seq data. context, public cluster consists similar TCR/BCR clones (e.g., whose CDR3 amino acid sequences differ one amino acid) shared across samples (e.g., across individuals across time points single individual). See vignette(\"public_clusters\") detailed tutorial.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"\n  Label Clusters in a Network Graph Plot — addClusterLabels","title":"\n  Label Clusters in a Network Graph Plot — addClusterLabels","text":"Given graph plot metadata network clustering analysis performed, labels clusters plot cluster IDs. user can specify cluster-level property rank clusters, labeling clusters specified rank.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n  Label Clusters in a Network Graph Plot — addClusterLabels","text":"","code":"addClusterLabels(   plot,   net,   top_n_clusters = 20,   cluster_id_col = \"cluster_id\",   criterion = \"node_count\",   size = 5,   color = \"black\",   greatest_values = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n  Label Clusters in a Network Graph Plot — addClusterLabels","text":"plot ggraph object containing network graph plot. net list containing data frames named node_data cluster_data node-level cluster-level network properties, returned buildRepSeqNetwork called cluster_stats = TRUE. top_n_clusters positive integer specifying number clusters label. highest rank according criterion argument labeled. cluster_id_col column name cluster ID variable within net$node_data. Note net$cluster_data, variable always assumed cluster_id. criterion column name net$cluster_data specifying cluster-level network property rank clusters. property quantitative ranking meaningful. See getClusterStats list properties. default \"node_size\". size font size cluster ID labels. Passed size argument geom_node_text. color color cluster ID labels. Passed color argument geom_node_text. greatest_values Logical. Controls whether clusters ranked according greatest least values property specified criterion argument. TRUE, clusters greater values ranked lower values, thereby receiving higher priority labeled.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n  Label Clusters in a Network Graph Plot — addClusterLabels","text":"ggraph object containing original plot annotated cluster ID labels.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n  Label Clusters in a Network Graph Plot — addClusterLabels","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n  Label Clusters in a Network Graph Plot — addClusterLabels","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n  Label Clusters in a Network Graph Plot — addClusterLabels","text":"","code":"if (FALSE) { toy_data <- simulateToyData()  # Generate network network <- buildRepSeqNetwork(   toy_data, seq_col = \"CloneSeq\",   node_stats = TRUE, cluster_stats = TRUE,   color_nodes_by = \"transitivity\", color_scheme = \"plasma-1\",   size_nodes_by = \"degree\", node_size_limits = c(0.5, 1.5),   print_plots = FALSE, output_dir = NULL )  # Label two largest clusters addClusterLabels(   plot = network$plots$transitivity,   net = network,   top_n_clusters = 2,   criterion = \"node_count\" # (the default) ) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Perform Cluster Analysis on the Nodes of a Network Graph — addClusterMembership","title":"\n    Perform Cluster Analysis on the Nodes of a Network Graph — addClusterMembership","text":"Given igraph node-level metadata network, partitions graph densely-connected subgraphs (clusters) using specified clustering algorithm, adds cluster membership ID variable node-level metadata.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Perform Cluster Analysis on the Nodes of a Network Graph — addClusterMembership","text":"","code":"addClusterMembership(   data,   net,   fun = cluster_fast_greedy )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Perform Cluster Analysis on the Nodes of a Network Graph — addClusterMembership","text":"data data frame containing node-level metadata network, data frame named node_data contained output buildRepSeqNetwork generateNetworkObjects. net igraph object network, element named igraph contained output buildRepSeqNetwork generateNetworkObjects. fun function use clustering algorithm. See clustering_algorithms.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Perform Cluster Analysis on the Nodes of a Network Graph — addClusterMembership","text":"Cluster analysis involves using community-finding algorithm partition network graph clusters (densely-connected subgraphs). clusters represent groups clones/cells similar receptor sequences. cluster assigned numeric cluster ID, cluster membership ID node recorded. cluster membership ID cluster ID cluster node belongs.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Perform Cluster Analysis on the Nodes of a Network Graph — addClusterMembership","text":"copy data additional column named cluster_id contains cluster membership ID network node corresponding row.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n    Perform Cluster Analysis on the Nodes of a Network Graph — addClusterMembership","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Perform Cluster Analysis on the Nodes of a Network Graph — addClusterMembership","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addClusterMembership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Perform Cluster Analysis on the Nodes of a Network Graph — addClusterMembership","text":"","code":"toy_data <- simulateToyData()  # Generate network net <-   generateNetworkObjects(     toy_data,     \"CloneSeq\"   ) #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 122 nodes (after removing isolated nodes).  # Perform cluster analysis, # add cluster membership ID data_w_clusterID <-   addClusterMembership(     net$node_data,     net$igraph   ) #> Computing cluster membership within the network... Done."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"\n  Label Nodes in a Network Graph Plot — addGraphLabels","title":"\n  Label Nodes in a Network Graph Plot — addGraphLabels","text":"Annotate graph plot add custom labels nodes.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n  Label Nodes in a Network Graph Plot — addGraphLabels","text":"","code":"addGraphLabels(   plot,   node_labels,   size = 5,   color = \"black\" )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n  Label Nodes in a Network Graph Plot — addGraphLabels","text":"plot ggraph object containing network graph plot. node_labels vector containing node labels, entry label single node. length match number nodes plot. size font size node labels. Passed size argument geom_node_text. color color node labels. Passed size argument geom_node_text.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n  Label Nodes in a Network Graph Plot — addGraphLabels","text":"Labels added using geom_node_text.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n  Label Nodes in a Network Graph Plot — addGraphLabels","text":"ggraph object containing original plot annotated node labels.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n  Label Nodes in a Network Graph Plot — addGraphLabels","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addGraphLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n  Label Nodes in a Network Graph Plot — addGraphLabels","text":"","code":"toy_data <-   simulateToyData(     samples = 1,     sample_size = 10,     prefix_length = 1   )  # Generate network network <-   buildRepSeqNetwork(     toy_data,     seq_col = \"CloneSeq\",     print_plots = FALSE,     output_dir = NULL   ) #> Input data contains 10 rows. #> Removing sequences with length fewer than 3 characters... Done. 10 rows remaining. #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 10 nodes (after removing isolated nodes). #> Generating graph plot... Done.  # Label each node with its receptor sequence network$plots[[1]] <-   addGraphLabels(     network$plots[[1]],     network$node_data$CloneSeq,     size = 4   )  # View the plot network$plots[[1]]"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":null,"dir":"Reference","previous_headings":"","what":"\n  Compute Node-Level Network Properties — addNodeNetworkStats","title":"\n  Compute Node-Level Network Properties — addNodeNetworkStats","text":"Compute specified set node-level network properties given network. property added variable node-level metadata network.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n  Compute Node-Level Network Properties — addNodeNetworkStats","text":"","code":"addNodeNetworkStats(   data,   net,   stats_to_include = chooseNodeStats(),   cluster_fun = cluster_fast_greedy )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n  Compute Node-Level Network Properties — addNodeNetworkStats","text":"data data frame containing node-level metadata network, data frame named node_data contained output buildRepSeqNetwork generateNetworkObjects. net igraph object network, element named igraph contained output buildRepSeqNetwork generateNetworkObjects. stats_to_include Specifies network properties compute. Either vector created using chooseNodeStats exclusiveNodeStats, \"\" compute network properties, \"cluster_id_only\" compute cluster_id property. cluster_fun function use clustering algorithm. Passed addClusterMembership. See clustering_algorithms.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n  Compute Node-Level Network Properties — addNodeNetworkStats","text":"Node-level network properties properties pertain individual node network graph. local properties, meaning value given node depends subset nodes network. One example network degree given node, represents number nodes directly joined given node edge connection. properties global properties, meaning value given node depends nodes network. example authority score node, computed using entire graph adjacency matrix (denote matrix \\(\\), principal eigenvector \\(^T \\) represents authority scores network nodes). See chooseNodeStats list available node-level network properties.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n  Compute Node-Level Network Properties — addNodeNetworkStats","text":"copy data additional column network property computed. See chooseNodeStats network property names, used column names.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n  Compute Node-Level Network Properties — addNodeNetworkStats","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n  Compute Node-Level Network Properties — addNodeNetworkStats","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/addNodeNetworkStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n  Compute Node-Level Network Properties — addNodeNetworkStats","text":"","code":"if (FALSE) { toy_data <- simulateToyData()  # Generate network net <-   generateNetworkObjects(     toy_data,     \"CloneSeq\"   )  # Add default set of node properties data_w_default_stats <-   addNodeNetworkStats(     net$node_data, net$igraph   )  # Modify default set of node properties data_w_custom_stats1 <-   addNodeNetworkStats(     net$node_data, net$igraph,     stats_to_include =       chooseNodeStats(         closeness = TRUE,         page_rank = FALSE       )   )  # Add only the spepcified node properties data_w_custom_stats2 <-   addNodeNetworkStats(     net$node_data, net$igraph,     stats_to_include =       exclusiveNodeStats(         degree = TRUE,         transitivity = TRUE       )   )  # Add all node-level network properties data_w_all_stats <-   addNodeNetworkStats(     net$node_data, net$igraph,     stats_to_include = \"all\"   )  }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/adjacencyMatAtchleyFromSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"\nNetwork Adjacency Matrix Based on Atchley Factor Representations — adjacencyMatAtchleyFromSeqs","title":"\nNetwork Adjacency Matrix Based on Atchley Factor Representations — adjacencyMatAtchleyFromSeqs","text":"Given list T-cell receptor CDR3 amino acid sequences, encodes sequence 30-dimensional numeric vector based Atchley factor representations amino acids, computes corresponding network adjacency matrix based Euclidean pairwise distances encoded vectors.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/adjacencyMatAtchleyFromSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\nNetwork Adjacency Matrix Based on Atchley Factor Representations — adjacencyMatAtchleyFromSeqs","text":"","code":"adjacencyMatAtchleyFromSeqs(     seqs,     contig_ids = seq_along(seqs),     max_dist,     return_type = \"adjacency_matrix\",     outfile_distance_matrix = NULL )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/adjacencyMatAtchleyFromSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\nNetwork Adjacency Matrix Based on Atchley Factor Representations — adjacencyMatAtchleyFromSeqs","text":"seqs character vector containing TCR CDR3 amino acid sequences. contig_ids numeric vector length seqs, used uniquely identify elements. default, simply sequence integers 1 length(seqs). max_dist positive integer specifying maximum Euclidean distance numeric vectors corresponding two TCR sequences concidered adjacent (joined edge) network graph. return_type character string specifying type matrix returned. Valid options \"adjacency_matrix\" \"distance_matrix\", latter returns matrix containing pairwise Euclidean distances rather pairwise adjacencies. outfile_distance_matrix optional argument specifying csv file matrix written.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/adjacencyMatAtchleyFromSeqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\nNetwork Adjacency Matrix Based on Atchley Factor Representations — adjacencyMatAtchleyFromSeqs","text":"adjacency matrix graph \\(n\\) nodes/vertices symmetric \\(n \\times n\\) matrix \\((,j)\\)th entry equal 1 nodes \\(\\) \\(j\\) adjacent (joined edge graph) 0 otherwise. element seqs represents node corresponding network graph; two nodes adjacent Euclidean distance numerically encoded values max_dist. return_type = \"distance_matrix\", \\((,j)\\)th entry matrix Euclidean distance numerically encoded vectors \\(\\)th \\(j\\)th sequences seqs vector. TCR CDR3 amino acid sequences encoded 30-dimensional numeric vectors using trained encoder.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/adjacencyMatAtchleyFromSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\nNetwork Adjacency Matrix Based on Atchley Factor Representations — adjacencyMatAtchleyFromSeqs","text":"symmetric, square matrix whose row/column dimension matches length seqs.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/adjacencyMatAtchleyFromSeqs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"\nNetwork Adjacency Matrix Based on Atchley Factor Representations — adjacencyMatAtchleyFromSeqs","text":"encoder trained specifically TCR CDR3 amino acid sequences appropriate use amino acid sequences.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/adjacencyMatAtchleyFromSeqs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\nNetwork Adjacency Matrix Based on Atchley Factor Representations — adjacencyMatAtchleyFromSeqs","text":"BriseisEncoder authored Ze Zhang (Ze.Zhang@UTsouthwestern.edu).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/adjacencyMatAtchleyFromSeqs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\nNetwork Adjacency Matrix Based on Atchley Factor Representations — adjacencyMatAtchleyFromSeqs","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/adjacencyMatAtchleyFromSeqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\nNetwork Adjacency Matrix Based on Atchley Factor Representations — adjacencyMatAtchleyFromSeqs","text":"","code":"if (FALSE) { # Example TCR CDR3 amino acid sequences cdr3 <-   c(\"CASSEAQGSGSTDTQYF\",     \"CATTEGSNTGELFF\",     \"CASSIGDNEQFF\",     \"CATSRDPDRGQSDTQYF\",     \"CASSPTGLSGNTIYF\",     \"CASSEEAGKDTQYF\",     \"CASSGGADTQYF\",     \"CASSLGLATDTQYF\",     \"CASSEKEEVGELFF\",     \"CASSSRTSGGAGELFF\"   )  # Encode sequences, # compute adjacency matrix adjacencyMatAtchleyFromSeqs(   cdr3,   max_dist = 3 )  # Encode sequences, # compute distance matrix adjacencyMatAtchleyFromSeqs(   cdr3,   return_type = \"distance_matrix\" ) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","title":"\n    Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"Given bulk Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data clones indexed row, returns data frame containing one row unique receptor sequence. Includes number clones sharing sequence, well aggregate values clone count clone frequency across clones sharing sequence. Clones can grouped according metadata, case aggregation performed within (across) groups.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"","code":"aggregateIdenticalClones(   data,   clone_col,   count_col,   freq_col,   grouping_cols = NULL )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"data data frame containing bulk AIRR-Seq data, clones indexed row. clone_col column name column index specifying column data containing receptor sequences. count_col column name column index specifying column data containing clone counts. freq_col column name column index specifying column data containing clone frequencies. grouping_cols optional vector column names vector column indices, specifying one columns data used assign clones groups. provided, aggregation occurs within groups, across groups. See details.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"grouping_cols left unspecified, returned data frame contain one row unique receptor sequence appearing data. one columns data specified using grouping_cols argument, clone (row) data assigned group based combination values columns. two clones share receptor sequence belong different groups, receptor sequence appear multiple times returned data frame, one row group sequence appears. row, aggregate clone count, aggregate clone frequency, number clones sharing sequence reported within group row.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"data frame whose first column contains receptor sequences     name column data specified clone_col. One additional column present column data specified using grouping_cols argument, column name. remaining columns follows: AggregatedCloneCount aggregate clone count across clones (within group, applicable) share receptor sequence row. AggregatedCloneFrequency aggregate clone frequency across clones (within group, applicable) share receptor sequence row. UniqueCloneCount number clones (rows) data (within group, applicable) possessing receptor sequence current row.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/aggregateIdenticalClones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Aggregate Counts/Frequencies for Clones With Identical Receptor Sequences — aggregateIdenticalClones","text":"","code":"# Create some data data <- data.frame(   clone_seq = c(\"ATCG\", rep(\"ACAC\", 2), rep(\"GGGG\", 4)),   clone_count = rep(1, 7),   clone_freq = rep(1/7, 7),   time_point = c(\"t_0\", rep(c(\"t_0\", \"t_1\"), 3)),   subject_id = c(rep(1, 5), rep(2, 2)) )  # default usage data_agg <-   aggregateIdenticalClones(     data, \"clone_seq\",     \"clone_count\", \"clone_freq\"   ) #> Aggregating reads (rows) by unique clone sequence... Done. 3 unique clone sequences found.  # group clones by time point data_agg_time <-   aggregateIdenticalClones(     data, \"clone_seq\",     \"clone_count\", \"clone_freq\",     grouping_cols = \"time_point\"   ) #> Aggregating reads (rows) by unique clone sequence... Done. 5 unique clone sequences found.  # group clones by subject ID data_agg_subject <-   aggregateIdenticalClones(     data, \"clone_seq\",     \"clone_count\", \"clone_freq\",     grouping_cols = \"subject_id\"   ) #> Aggregating reads (rows) by unique clone sequence... Done. 4 unique clone sequences found.  # group clones by time point and subject ID data_agg_time_subject <-   aggregateIdenticalClones(     data, \"clone_seq\",     \"clone_count\", \"clone_freq\",     grouping_cols =       c(\"subject_id\", \"time_point\")   ) #> Aggregating reads (rows) by unique clone sequence... Done. 7 unique clone sequences found."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Combine Associated Sequence Neighborhoods and Build Network — buildAssociatedClusterNetwork","title":"\n    Combine Associated Sequence Neighborhoods and Build Network — buildAssociatedClusterNetwork","text":"running findAssociatedClones, function used combine     resulting neighborhoods single network     clustering network analysis performed.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Combine Associated Sequence Neighborhoods and Build Network — buildAssociatedClusterNetwork","text":"","code":"buildAssociatedClusterNetwork(     file_list, input_type = \"csv\",     data_symbols = \"data\",     header = TRUE, sep = \",\",     seq_col,     min_seq_length = NULL, drop_matches = NULL,     drop_isolated_nodes = FALSE,     node_stats = TRUE,     stats_to_include =       chooseNodeStats(cluster_id = TRUE),     cluster_stats = TRUE,     color_nodes_by = \"GroupID\",     output_name = \"AssociatedClusterNetwork\",     ... )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Combine Associated Sequence Neighborhoods and Build Network — buildAssociatedClusterNetwork","text":"file_list Passed loadDataFromFileList. input_type Passed loadDataFromFileList. data_symbols Passed loadDataFromFileList. header Passed loadDataFromFileList. sep Passed loadDataFromFileList. seq_col Passed buildRepSeqNetwork. min_seq_length Passed buildRepSeqNetwork. drop_matches Passed buildRepSeqNetwork. drop_isolated_nodes Passed buildRepSeqNetwork. node_stats Passed buildRepSeqNetwork. stats_to_include Passed buildRepSeqNetwork. cluster_stats Passed buildRepSeqNetwork. color_nodes_by Passed buildRepSeqNetwork. output_name Passed buildRepSeqNetwork. ... arguments buildRepSeqNetwork.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Combine Associated Sequence Neighborhoods and Build Network — buildAssociatedClusterNetwork","text":"Essentially wrapper loadDataFromFileList     buildRepSeqNetwork, default argument values tailored     associated cluster workflow.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n    Combine Associated Sequence Neighborhoods and Build Network — buildAssociatedClusterNetwork","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Combine Associated Sequence Neighborhoods and Build Network — buildAssociatedClusterNetwork","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildAssociatedClusterNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Combine Associated Sequence Neighborhoods and Build Network — buildAssociatedClusterNetwork","text":"","code":"if (FALSE) { ## Generate some toy data for demonstration  # Use temp dir data_dir <- tempdir()  # Directory to store input files dir_input_samples <- file.path(data_dir, \"input_samples\") dir.create(dir_input_samples, showWarnings = FALSE)  samples <- 30 affixes <- c(\"AAAA\", \"AASA\", \"AACA\", \"AAQA\", \"AAQ\", \"AAA\", \"AASAA\", \"AAAAA\") affix_probs_g0 <- rep(1 / length(affixes),                       times = length(affixes) * samples / 2) affix_probs_g1 <- rep(c(1, 5, 1, 1, 1, 1, 5, 1), times = samples / 2) affix_probs <- matrix(c(affix_probs_g0, affix_probs_g1),                       nrow = samples, byrow = TRUE) new_probs_g0 <- rep(c(1/2, 1/6, 1/6, 1/6), times = samples / 2) new_probs_g1 <- rep(c(1/3, 1/6, 1/6, 1/3), times = samples / 2) new_probs <- matrix(c(new_probs_g0, new_probs_g1),                     nrow = samples, byrow = TRUE) simulateToyData(   samples = samples,   sample_size = 30,   prefix_length = 1,   prefix_chars = c(\"A\", \"C\"),   prefix_probs = cbind(rep(1, samples), rep(0, samples)),   affixes = affixes,   affix_probs = affix_probs,   num_edits = 4,   edit_pos_probs = function(seq_length) {     dnorm(seq(-4, 4, length.out = seq_length))   },   edit_ops = c(\"insertion\", \"deletion\", \"transmutation\"),   edit_probs = c(5, 1, 4),   new_chars = c(\"A\", \"S\", \"C\", \"Q\"),   new_probs = new_probs,   output_dir = dir_input_samples,   no_return = TRUE )   ## 1. Find Associated Sequences  # input files for step 1 (one per sample) input_files <- file.path(dir_input_samples, paste0(\"Sample\", 1:samples, \".rds\")) head(input_files)  # group labels for the samples group_labels <- c(rep(\"reference\", samples / 2), rep(\"comparison\", samples / 2))  # search across samples for associated sequences using Fisher's exact test associated_seqs <- findAssociatedSeqs(   file_list = input_files, input_type = \"rds\",   group_ids = group_labels, groups = c(\"reference\", \"comparison\"),   min_seq_length = NULL, drop_matches = NULL,   seq_col = \"CloneSeq\", outfile = NULL) head(associated_seqs)   ## 2. Find Associated Clones  # output directory for current step dir_nbds <- file.path(data_dir, \"assoc_seq_nbds\")  # Identify neighborhood around each associated sequence findAssociatedClones(   file_list = input_files, input_type = \"rds\", group_ids = group_labels,   seq_col = \"CloneSeq\", dist_type = \"levenshtein\",   assoc_seqs = associated_seqs$ReceptorSeq,   min_seq_length = NULL, drop_matches = NULL,   output_dir = dir_nbds)   ## 3. Build Associated Cluster Network  # Files created during previous step nbd_files <- list.files(dir_nbds, full.names = TRUE) nbd_files  # Combine neighborhoods and perform network analysis all_clusters <- buildAssociatedClusterNetwork(   file_list = nbd_files,   seq_col = \"CloneSeq\", dist_type = \"levenshtein\", size_nodes_by = 1.5,   output_dir = file.path(data_dir, \"assoc_clusters\"))  # focus on a particular cluster buildRepSeqNetwork(   data = all_clusters$node_data[all_clusters$node_data$cluster_id == 3, ],   seq_col = \"CloneSeq\", color_nodes_by = \"CloneSeq\", size_nodes_by = 2,   output_dir = NULL, output_name = \"Cluster 3\") }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Build Network of Public Clusters — buildPublicClusterNetwork","title":"\n    Build Network of Public Clusters — buildPublicClusterNetwork","text":"Given node-level meta data sample's filtered public clusters,     combine data across samples perform network analysis.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Build Network of Public Clusters — buildPublicClusterNetwork","text":"","code":"buildPublicClusterNetwork(    ## Input ##   file_list =     list.files(file.path(getwd(), \"public_clusters\", \"node_meta_data\")),   input_type = \"rds\", data_symbols = \"ndat\", header = TRUE, sep = \"\",   seq_col,    ## Network ##   drop_isolated_nodes = FALSE,   node_stats = NULL, stats_to_include = NULL, cluster_stats = NULL,    ## Visualization ##   color_nodes_by = \"SampleID\", color_scheme = \"turbo\",    ## Output ##   output_dir = file.path(getwd(), \"public_clusters\"),   output_name = \"PublicClusterNetwork\",    ...  )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Build Network of Public Clusters — buildPublicClusterNetwork","text":"file_list Passed loadDataFromFileList loading node-level meta data   sample (one data frame per sample). input_type Passed loadDataFromFileList. data_symbols Passed loadDataFromFileList. header Passed loadDataFromFileList. sep Passed loadDataFromFileList. seq_col column name number sample's data frame contains receptor sequences used basis similarity rows network analysis. column must name sample. drop_isolated_nodes Passed buildRepSeqNetwork. node_stats Deprecated. nothing. node-level network properties automatically computed. stats_to_include Deprecated. nothing. cluster_stats Deprecated. nothing. cluster-level network properties automatically computed. color_nodes_by Passed buildRepSeqNetwork. color_scheme Passed buildRepSeqNetwork. output_dir Passed buildRepSeqNetwork. output_name Passed buildRepSeqNetwork. ... arguments buildRepSeqNetwork.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Build Network of Public Clusters — buildPublicClusterNetwork","text":"input data intended obtained using findPublicClusters()     unfiltered RepSeq data sample. Node-level network properties renamed reflect association     public network. names used     ClusterIDPublic, PublicNetworkDegree,     PublicTransitivity, PublicCloseness,     PublicCentralityByCloseness, PublicEigenCentrality,     PublicCentralityByEigen, PublicBetweenness,     PublicCentralityByBetweenness, PublicAuthorityScore,     PublicCoreness, PublicPageRank.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Build Network of Public Clusters — buildPublicClusterNetwork","text":"list network objects returned buildRepSeqNetwork().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n    Build Network of Public Clusters — buildPublicClusterNetwork","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Build Network of Public Clusters — buildPublicClusterNetwork","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Build Network of Public Clusters — buildPublicClusterNetwork","text":"","code":"if (FALSE) { vignette(\"public_clusters\", package = \"NAIR\") }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Build Public Cluster Network By Representative — buildPublicClusterNetworkByRepresentative","title":"\n    Build Public Cluster Network By Representative — buildPublicClusterNetworkByRepresentative","text":"Given cluster-level meta data sample's filtered public clusters,     combine data across samples perform network analysis using     representative sequence cluster.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Build Public Cluster Network By Representative — buildPublicClusterNetworkByRepresentative","text":"","code":"buildPublicClusterNetworkByRepresentative(    ## Input ##   file_list,   input_type = \"rds\", data_symbols = \"cdat\",   header = TRUE, sep = \"\",   seq_col = \"seq_w_max_count\",   count_col = \"agg_count\",    ## Network ##   dist_type = \"hamming\",   dist_cutoff = 1,   cluster_fun = cluster_fast_greedy,    ## Visualization ##   plots = TRUE,   print_plots = TRUE,   plot_title = \"auto\",   plot_subtitle = \"auto\",   color_nodes_by = \"SampleID\",   color_scheme = \"turbo\",   ...,    ## Output ##   output_dir = file.path(getwd(), \"public_clusters\"),   output_type = \"rda\",   output_name = \"PubClustByRepresentative\",   pdf_width = 12, pdf_height = 10  )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Build Public Cluster Network By Representative — buildPublicClusterNetworkByRepresentative","text":"file_list Passed loadDataFromFileList loading cluster-level meta data   sample (one data frame per sample). Data frames match   format cluster-level meta data returned buildRepSeqNetwork. input_type Passed loadDataFromFileList. data_symbols Passed loadDataFromFileList. header Passed loadDataFromFileList. sep Passed loadDataFromFileList. seq_col column name number data frame contains representative sequence used basis similarity rows network analysis. column must name sample. count_col Passed buildRepSeqNetwork. dist_type Passed buildRepSeqNetwork. dist_cutoff Passed buildRepSeqNetwork. cluster_fun Passed addClusterMembership. Controls algorithm used cluster identification. plots Passed buildRepSeqNetwork. print_plots Passed buildRepSeqNetwork. plot_title Passed buildRepSeqNetwork. plot_subtitle Passed buildRepSeqNetwork. color_nodes_by Passed generateNetworkGraphPlots. color_scheme Passed generateNetworkGraphPlots. ... arguments generateNetworkGraphPlots. output_dir Passed saveNetwork. output_type Passed saveNetwork. output_name Passed saveNetwork. pdf_width Passed saveNetwork. pdf_height Passed saveNetwork.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Build Public Cluster Network By Representative — buildPublicClusterNetworkByRepresentative","text":"function intended performing network analysis public clusters     obtained using findPublicClusters(). using cluster-level meta data input buildRepSeqNetwork(),     function treats public cluster single node performs network     analysis similarity based representative sequence cluster     (e.g., sequence greatest clone count). buildRepSeqNetwork     called without filtering drop_isolated_nodes = FALSE. node-level properties automatically computed network,     cluster-level properties network (clusters nodes represent     clusters public-cluster-representatives) computed based properties     public cluster represented node. See 'value' section list      description property.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Build Public Cluster Network By Representative — buildPublicClusterNetworkByRepresentative","text":"list network objects per buildRepSeqNetwork(). data frame  cluster_data includes following variables: TotalSampleLevelNodes network node cluster current row represents         public cluster; value sum sample-network-level nodes         contained public clusters current row. TotalCloneCount network node cluster current row represents         public cluster; value sum aggregate clone count         across public clusters current row. MeanOfMeanSeqLength network node cluster current row represents         public cluster; value mean value mean sequence length         across public clusters current row. MeanDegreeInPublicNet mean network degree network nodes cluster         current row. MaxDegreeInPublicNet maximum network degree network nodes cluster         current row. SeqWithMaxDegree representative sequence network node maximum network degree         network nodes cluster current row.         one node attains maximum network degree, first sequence found         returned. MaxCloneCount network node cluster current row represents         public cluster; maximum value         maximum clone count property across public clusters         current row. SampleWithMaxCloneCount sample possessing public cluster maximum value         maximum clone count property across public clusters         represented network nodes cluster current row.         one public cluster attains maximum value, first         sample ID found returned. SeqWithMaxCloneCount representative sequence public cluster maximum value         maximum clone count property across public clusters         represented network nodes cluster current row.         one public cluster attains maximum value, first         sequence found returned. MaxAggCloneCount network node cluster current row represents         public cluster; maximum value         aggregate clone count property across public clusters         current row. SampleWithMaxAggCloneCount sample possessing public cluster maximum value         aggregate clone count property across public clusters         represented network nodes cluster current row.         one public cluster attains maximum value, first         sample ID found returned. SeqWithMaxAggCloneCount representative sequence public cluster maximum value         aggregate clone count property across public clusters         represented network nodes cluster current row.         one public cluster attains maximum value, first         sequence found returned. DiameterLength See ?getClusterStats(). Assortativity See ?getClusterStats(). GlobalTransitivity See ?getClusterStats(). EdgeDensity See ?getClusterStats(). DegreeCentralityIndex See ?getClusterStats(). ClosenessCentralityIndex See ?getClusterStats(). EigenCentralityIndex See ?getClusterStats(). EigenCentralityEigenvalue See ?getClusterStats().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n    Build Public Cluster Network By Representative — buildPublicClusterNetworkByRepresentative","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Build Public Cluster Network By Representative — buildPublicClusterNetworkByRepresentative","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildPublicClusterNetworkByRepresentative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Build Public Cluster Network By Representative — buildPublicClusterNetworkByRepresentative","text":"","code":"if (FALSE) { ## Generate some toy data for demonstration  # Use temp dir data_dir <- tempdir()  # Directory to store input files dir_input_samples <- file.path(data_dir, \"input_samples\") dir.create(dir_input_samples, showWarnings = FALSE)  samples <- 30 affixes <- c(\"AAAA\", \"AASA\", \"AACA\", \"AAQA\", \"AAQ\", \"AAA\", \"AASAA\", \"AAAAA\") affix_probs_g0 <- rep(1 / length(affixes),                       times = length(affixes) * samples / 2) affix_probs_g1 <- rep(c(1, 5, 1, 1, 1, 1, 5, 1), times = samples / 2) affix_probs <- matrix(c(affix_probs_g0, affix_probs_g1),                       nrow = samples, byrow = TRUE) new_probs_g0 <- rep(c(1/2, 1/6, 1/6, 1/6), times = samples / 2) new_probs_g1 <- rep(c(1/3, 1/6, 1/6, 1/3), times = samples / 2) new_probs <- matrix(c(new_probs_g0, new_probs_g1),                     nrow = samples, byrow = TRUE) simulateToyData(   samples = samples,   sample_size = 30,   prefix_length = 1,   prefix_chars = c(\"A\", \"C\"),   prefix_probs = cbind(rep(1, samples), rep(0, samples)),   affixes = affixes,   affix_probs = affix_probs,   num_edits = 4,   edit_pos_probs = function(seq_length) {     dnorm(seq(-4, 4, length.out = seq_length))   },   edit_ops = c(\"insertion\", \"deletion\", \"transmutation\"),   edit_probs = c(5, 1, 4),   new_chars = c(\"A\", \"S\", \"C\", \"Q\"),   new_probs = new_probs,   output_dir = dir_input_samples,   no_return = TRUE )   ## 1. Find Public Clusters in Each Sample  # input files for step 1 (one per sample) input_files <- file.path(dir_input_samples, paste0(\"Sample\", 1:samples, \".rds\")) head(input_files)  # Search across samples for public clusters dir_filtered_samples <- file.path(data_dir, \"filtered_samples\") findPublicClusters(   file_list = input_files, input_type = \"rds\",   sample_ids = paste0(\"Sample\", 1:samples),   seq_col = \"CloneSeq\", count_col = \"CloneCount\",   min_seq_length = NULL, drop_matches = NULL,   output_dir = dir_filtered_samples)   ## 2. Build Public Cluster Network by Representative Sequence  # Cluster-level meta data for each sample's public clusters dir_filtered_samples_cluster <- file.path(dir_filtered_samples, \"cluster_meta_data\") files_filtered_samples_cluster <- list.files(dir_filtered_samples_cluster,                                              full.names = TRUE) head(files_filtered_samples_cluster)  dir_out <- file.path(data_dir, \"public_clusters\")  buildPublicClusterNetworkByRepresentative(   file_list = files_filtered_samples_cluster,   color_nodes_by = \"ClusterIDPublic\", output_dir = dir_out,   size_nodes_by = 1) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Immune Repertoire Network By Sequence Similarity — buildRepSeqNetwork","title":"\n    Immune Repertoire Network By Sequence Similarity — buildRepSeqNetwork","text":"Builds network graph immune repertoire based sequence     similarity, computes specified network properties generates customized     visualizations.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Immune Repertoire Network By Sequence Similarity — buildRepSeqNetwork","text":"","code":"buildRepSeqNetwork(    ## Input ##   data, seq_col, count_col = NULL,   subset_cols = NULL,   min_seq_length = 3, drop_matches = NULL,    ## Network ##   dist_type = \"hamming\", dist_cutoff = 1,   drop_isolated_nodes = TRUE,   node_stats = FALSE,   stats_to_include = chooseNodeStats(),   cluster_stats = FALSE,   cluster_fun = cluster_fast_greedy,    ## Visualization ##   plots = TRUE,   print_plots = TRUE,   plot_title = \"auto\",   plot_subtitle = \"auto\",   color_nodes_by = \"auto\",   ...,    ## Output ##   output_dir = getwd(),   output_type = \"individual\",   output_name = \"MyRepSeqNetwork\",   pdf_width = 12, pdf_height = 10  )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Immune Repertoire Network By Sequence Similarity — buildRepSeqNetwork","text":"data data frame containing immune repertoire sequencing data, variables indexed column observations (e.g., clones cells) indexed row. seq_col column name number data containing receptor sequences used basis similarity rows. Also accepts vector length 2 specifying distinct sequence columns (e.g., alpha, beta chains); two rows similar types sequences similar. count_col Optional column name number data containing measure abundance, e.g., clone count. Passed getClusterStats; relevant cluster_stats = TRUE. subset_cols Optional vector column names numbers data; supplied, plus relevant columns included output. NULL (default), columns data included. min_seq_length numeric scalar, NULL. Observations whose receptor sequences fewer min_seq_length characters removed prior network analysis. drop_matches optional regular expression character string. Observations whose receptor sequences return match removed prior network analysis. dist_type type function use measure similarity two receptor     sequences. Valid options \"hamming\" (default), \"levenshtein\"     \"euclidean_on_atchley\" (applicable TCR CDR3 amino acid sequences). dist_cutoff nonnegative scalar specifying maximum distance threshold     similarity receptor sequences. drop_isolated_nodes logical scalar; observations whose receptor sequences     similar sequences dropped network? node_stats logical scalar; node-level network properties computed? stats_to_include logical vector returned chooseNodeStats(), specifying node-level     properties include. Also accepts values \"\"     \"cluster_id_only\". relevant node_stats = TRUE. cluster_stats logical scalar; cluster-level network properties computed? cluster_fun Passed addClusterMembership. Controls algorithm used cluster identification. plots logical scalar; plot(s) network graph generated? print_plots logical scalar; visualizations printed R plotting window? plot_title character string (NULL value) used title     visualizations. default value \"auto\" generates title     dynamically. plot_subtitle character string (NULL value) used subtitle     visualizations. default value \"auto\" generates title     dynamically. color_nodes_by Optional. Column name number data used color network nodes     visualizations. vector values supplied, one plot     generated value. value \"auto\" attempts use one several     variables (e.g., cluster ID) color nodes, depending available. ... arguments generateNetworkGraphPlots. output_dir output directory; NULL, output written file. output_type character string specifying file format use writing output file. Default \"individual\" saves item separate, uncompressed file, data frames saved csv format. \"rda\" \"rds\" save output list rda rds file, respectively. output types, plots generated also saved pdf file. output_name character string used common filename prefix files saved. pdf_width Passed width argument grDevices::pdf(). pdf_height Passed height argument grDevices::pdf().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Immune Repertoire Network By Sequence Similarity — buildRepSeqNetwork","text":"build immune repertoire network, TCR/BCR clone (bulk data)     cell (single-cell data) modeled network node (corresponding single     row input data). Two nodes considered adjacent (share edge)     receptor sequences sufficiently similar. nucleotide amino acid sequences supported. Sequence similarity     based either Hamming distance Levenshtein (edit) distance. TCR CDR3     amino acid sequences, alternative measure similarity also available via     argument dist_type = \"euclidean_on_atchley\"; represents sequences     30-dimensional numeric vectors according Atchley factors amino acids     (encode biological properties) using trained encoder. Similarity based     Euclidean distance representations. Selecting distance     threshold challenging setting, however, particular values lack     clear interpretations enjoyed Hamming Levenshtein distances. graph adjacency matrix network computed used generate     igraph network object. Network properties computed largely     use igraph functions. visualizations generated     ggraph.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Immune Repertoire Network By Sequence Similarity — buildRepSeqNetwork","text":"constructed network contains edges, function return NULL warning. Otherwise, function invisibly returns list containing following items: igraph igraph object containing edge list network. adjacency_matrix network graph adjacency matrix, stored sparse matrix class dgCMatrix Matrix package. node_data data     frame containing node-level meta-data network. data frame contains     column names data unless subset_cols non-null,     case column names data specified subset_cols, along     relevant ones (e.g., seq_col), present returned     data frame. data frame additionally contain columns node-level     network properties computed (specified node_stats     stats_to_include arguments). data frame contain one row     node remains network filtering occurred,     including filtering based drop_isolated_nodes. row names     original input data preserved. cluster_data data frame containing cluster-level properties, one row per cluster. included cluster_stats = TRUE. plots list containing graph plot(s) ggraph objects. included plots = TRUE.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n    Immune Repertoire Network By Sequence Similarity — buildRepSeqNetwork","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Immune Repertoire Network By Sequence Similarity — buildRepSeqNetwork","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/buildRepSeqNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Immune Repertoire Network By Sequence Similarity — buildRepSeqNetwork","text":"","code":"if (FALSE) {  # Simulate some toy data for demonstration toy_data <- simulateToyData()  network <- buildRepSeqNetwork(   toy_data, seq_col = \"CloneSeq\",   node_stats = TRUE, cluster_stats = TRUE,   color_nodes_by = \"transitivity\", color_scheme = \"plasma-1\",   size_nodes_by = \"degree\", node_size_limits = c(0.5, 1.5),   output_dir = NULL) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Specify Node-level Network Properties to Compute — chooseNodeStats","title":"\n    Specify Node-level Network Properties to Compute — chooseNodeStats","text":"Create vector specifying node-level network properties compute. Intended use buildRepSeqNetwork addNodeNetworkStats.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Specify Node-level Network Properties to Compute — chooseNodeStats","text":"","code":"chooseNodeStats(   degree = TRUE,   cluster_id = FALSE,   transitivity = TRUE,   closeness = FALSE,   centrality_by_closeness = FALSE,   eigen_centrality = TRUE,   centrality_by_eigen = TRUE,   betweenness = TRUE,   centrality_by_betweenness = TRUE,   authority_score = TRUE,   coreness = TRUE,   page_rank = TRUE,   all_stats = FALSE )  exclusiveNodeStats(   degree = FALSE,   cluster_id = FALSE,   transitivity = FALSE,   closeness = FALSE,   centrality_by_closeness = FALSE,   eigen_centrality = FALSE,   centrality_by_eigen = FALSE,   betweenness = FALSE,   centrality_by_betweenness = FALSE,   authority_score = FALSE,   coreness = FALSE,   page_rank = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/chooseNodeStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Specify Node-level Network Properties to Compute — chooseNodeStats","text":"degree Logical. Whether compute network degree. cluster_id Logical. Whether perform cluster analysis record cluster membership ID node. See addClusterMembership. transitivity Logical. Whether compute node-level network transitivity using transitivity type = \"local\". local transitivity node number triangles connected node relative number triples centered node. closeness Logical. Whether compute network closeness using closeness. centrality_by_closeness Logical. Whether compute network centrality closeness. values entries res element list returned centr_clo. eigen_centrality Logical. Whether compute eigenvector centrality scores node network positions. scores entries vector element list returned eigen_centrality weights = NA. centrality scores correspond values first eigenvector adjacency matrix cluster graph.    centrality_by_eigen      Logical. Whether compute node-level network centrality scores based eigenvector centrality scores. scores entries vector element list returned centr_eigen.    betweenness      Logical. Whether compute network betweenness using betweenness.  centrality_by_betweenness      Logical. Whether compute network centrality scores betweenness. scores entires res element list returned centr_betw.    authority_score      Logical. Whether compute authority score using authority_score.  coreness      Logical. Whether compute network coreness using coreness.  page_rank      Logical. Whether compute page rank. page rank values entries vector element list returned page_rank.    all_stats      Logical. TRUE, node-level network properties computed regardless values used arguments.    functions return vector can passed stats_to_include argument addNodeNetworkStats buildRepSeqNetwork order specify node-level network properties compute. Note buildRepSeqNetwork must called node_stats = TRUE relevant.    main difference chooseNodeStats exclusiveNodeStats lies default argument values. defaults suited different use cases order reduce number argument values must set manually.    chooseNodeStats arguments set TRUE default. Thus suitable  user wishes include majority available properties. can also called all_stats = TRUE convenient way computing available properties.    exclusiveNodeStats arguments set FALSE default. therefore suitable user wishes include properties.         named logical vector one entry function's arguments. entry name corresponding argument, value matches argument's value.addNodeNetworkStatsHai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-     Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/clustering_algorithms.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering Algorithms — Clustering Algorithms","title":"Clustering Algorithms — Clustering Algorithms","text":"Clustering algorithm functions available use within NAIR package. Used arguments functions buildRepSeqNetwork addClusterMembership. functions imported igraph package. See original documentation linked details.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/clustering_algorithms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clustering Algorithms — Clustering Algorithms","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Load Multiple Data Files and Combine — combineSamples","title":"\n    Load Multiple Data Files and Combine — combineSamples","text":"Given multiple data frames stored separate files, loadDataFromFileList     loads combines single data frame. combineSamples similar loadDataFromFileList,     allows data frames filtered subsetted     combined, can automatically add sample-level variables sample ID.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Load Multiple Data Files and Combine — combineSamples","text":"","code":"loadDataFromFileList(     file_list, input_type,     data_symbols = NULL,     header = TRUE, sep = \"\")  combineSamples(     file_list, input_type,     data_symbols = NULL,     header = TRUE, sep = \"\",     seq_col,     min_seq_length = NULL,     drop_matches = NULL,     subset_cols = NULL,     sample_ids = NULL,     subject_ids = NULL,     group_ids = NULL)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Load Multiple Data Files and Combine — combineSamples","text":"file_list character vector file paths containing data frames (one file per data frame). input_type character string specifying input file format; determines function used load file. See details section . data_symbols input_type = \"rda\", character vector specifying name data frame (can length 1 data frames name). header Passed read.table read.csv applicable. sep Passed read.table read.csv applicable. seq_col Passed filterInputData sample. min_seq_length Passed filterInputData sample. drop_matches Passed filterInputData sample. subset_cols Passed filterInputData sample. sample_ids optional character numeric vector sample IDs, whose length matches file_list. subject_ids optional character numeric vector subject IDs, whose length matches file_list. group_ids optional character numeric vector group IDs, whose length matches file_list.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Load Multiple Data Files and Combine — combineSamples","text":"Valid options input_type (corresponding function used     load file) include \"rds\" (readRDS), \"rda\"     (load), \"csv\" (read.csv) \"table\"     (read.table). input_type = \"rda\", data_symbols     argument specifies name data frame R. example,     given three R data frames named sample1, sample2     sample3, data frame saved separate rda file using     save()), pass c(\"sample1\", \"sample2\", \"sample3\")     data_symbols. combineSamples, sample_ids, subject_ids     group_ids non-null, corresponding variable     added combined data frame; named SampleID,     SubjectID GroupID.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Load Multiple Data Files and Combine — combineSamples","text":"data frame containing combined data rows files.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Load Multiple Data Files and Combine — combineSamples","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/combineSamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Load Multiple Data Files and Combine — combineSamples","text":"","code":"## Generate some toy data for demonstration  # Use temp dir data_dir <- tempdir()  # Directory to store input files dir_samples <- file.path(data_dir, \"samples\") dir.create(dir_samples, showWarnings = FALSE) simulateToyData(sample_size = 5,                 output_dir = dir_samples,                 no_return = TRUE) #> [1] TRUE   # Load data frames and combine data <- loadDataFromFileList(   file_list = list.files(dir_samples, full.names = TRUE),   input_type = \"rds\")   ## Same as above, but filter out seqs shorter than 3 characters, ## drop the count/freq/sampleID columns & add new sample ID column data2 <- combineSamples(   file_list = list.files(dir_samples, full.names = TRUE),   input_type = \"rds\",   seq_col = \"CloneSeq\",   min_seq_length = 3,   subset_cols = \"CloneSeq\",   sample_ids = c(\"id01\", \"id02\")) #> >>> Loading and compiling data from all samples: #> Loading sample 1: Input data contains 5 rows. #> Removing sequences with length fewer than 3 characters... Done. 5 rows remaining. #> Loading sample 2: Input data contains 5 rows. #> Removing sequences with length fewer than 3 characters... Done. 5 rows remaining. #> All samples loaded."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/encodeTCRSeqsByAtchleyFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"\nNumerically Encode TCR Sequences Using Deep Learning — encodeTCRSeqsByAtchleyFactor","title":"\nNumerically Encode TCR Sequences Using Deep Learning — encodeTCRSeqsByAtchleyFactor","text":"Given list T-cell receptor CDR3 amino acid sequences, encodes sequence 30-dimensional numeric vector based Atchley factor representation terms using trained encoder.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/encodeTCRSeqsByAtchleyFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\nNumerically Encode TCR Sequences Using Deep Learning — encodeTCRSeqsByAtchleyFactor","text":"","code":"encodeTCRSeqsByAtchleyFactor(     cdr3_AA,     contig_ids = seq_along(cdr3_AA))"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/encodeTCRSeqsByAtchleyFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\nNumerically Encode TCR Sequences Using Deep Learning — encodeTCRSeqsByAtchleyFactor","text":"cdr3_AA character vector containing TCR CDR3 amino acid sequences. contig_ids numeric vector length cdr3_AA, used uniquely identify elements. default, simply sequence integers 1 length(cdr3_AA).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/encodeTCRSeqsByAtchleyFactor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\nNumerically Encode TCR Sequences Using Deep Learning — encodeTCRSeqsByAtchleyFactor","text":"Encoding performed using BriseisEncoder python script. amino acid represented five-dimensional vector Atchley factors, numerically encode biological characteristics. TCR CDR3 amino acid sequence embedded Euclidean 30-space based Atchley factor representations constitutent terms, using deep learning encoder pretrained model.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/encodeTCRSeqsByAtchleyFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\nNumerically Encode TCR Sequences Using Deep Learning — encodeTCRSeqsByAtchleyFactor","text":"matrix length(cdr3_AA) rows 31 columns. row corresponds TCR sequence; first column contig_ids, remaining columns contain 30-dimensional numerical encoding TCR sequence.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/encodeTCRSeqsByAtchleyFactor.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"\nNumerically Encode TCR Sequences Using Deep Learning — encodeTCRSeqsByAtchleyFactor","text":"encoder trained specifically TCR CDR3 amino acid sequences appropriate use amino acid sequences.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/encodeTCRSeqsByAtchleyFactor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\nNumerically Encode TCR Sequences Using Deep Learning — encodeTCRSeqsByAtchleyFactor","text":"BriseisEncoder authored Ze Zhang (Ze.Zhang@UTsouthwestern.edu).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/encodeTCRSeqsByAtchleyFactor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\nNumerically Encode TCR Sequences Using Deep Learning — encodeTCRSeqsByAtchleyFactor","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/encodeTCRSeqsByAtchleyFactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\nNumerically Encode TCR Sequences Using Deep Learning — encodeTCRSeqsByAtchleyFactor","text":"","code":"if (FALSE) { cdr3 <- c(\"CASSEAQGSGSTDTQYF\",           \"CATTEGSNTGELFF\",           \"CASSIGDNEQFF\",           \"CATSRDPDRGQSDTQYF\",           \"CASSPTGLSGNTIYF\",           \"CASSEEAGKDTQYF\",           \"CASSGGADTQYF\",           \"CASSLGLATDTQYF\",           \"CASSEKEEVGELFF\",           \"CASSSRTSGGAGELFF\") encodeTCRSeqsByAtchleyFactor(cdr3) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Filter RepSeq Data Rows and/or Subset Columns — filterInputData","title":"\n    Filter RepSeq Data Rows and/or Subset Columns — filterInputData","text":"Filter data rows sequence length /sequence content; subset data     columns using numeric character vector column references.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Filter RepSeq Data Rows and/or Subset Columns — filterInputData","text":"","code":"filterInputData(data, seq_col, min_seq_length = NULL,                 drop_matches = NULL,                 subset_cols = NULL,                 count_col = NULL)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Filter RepSeq Data Rows and/or Subset Columns — filterInputData","text":"data data frame containing immune repertoire sequencing data, variables indexed column observations (e.g., clones cells) indexed row. seq_col column name data containing receptor sequences use filtering based length content. min_seq_length numeric scalar, NULL. Observations whose receptor sequences fewer min_seq_length characters removed prior network analysis. drop_matches optional regular expression character string. Observations whose receptor sequences return match removed prior network analysis. subset_cols Optional vector column names numbers data; supplied, (addition column referenced seq_col) included output. NULL (default), columns data included. count_col Optional column name number data; supplied, specified column data coerced numeric data rows containing NA/NaNs count column dropped.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Filter RepSeq Data Rows and/or Subset Columns — filterInputData","text":"sequence column(s) data coerced character type rows containing NA values sequence column(s) dropped.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Filter RepSeq Data Rows and/or Subset Columns — filterInputData","text":"data frame containing filtered rows specified columns data.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Filter RepSeq Data Rows and/or Subset Columns — filterInputData","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/filterInputData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Filter RepSeq Data Rows and/or Subset Columns — filterInputData","text":"","code":"## Generate some toy data for demonstration raw_data <- simulateToyData()  # Filter data filtered_data <-   filterInputData(raw_data, seq_col = \"CloneSeq\",                   min_seq_length = 13,                   drop_matches = \"[*|_]\",                   subset_cols = c(\"CloneSeq\", \"CloneFrequency\", \"SampleID\")) #> Input data contains 200 rows. #> Removing sequences with length fewer than 13 characters... Done. 136 rows remaining. #> Removing sequences containing matches to the expression '[*|_]'... Done. 136 rows remaining."},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Gather Clones in Public Neighborhoods Around Associated Sequences — findAssociatedClones","title":"\n    Gather Clones in Public Neighborhoods Around Associated Sequences — findAssociatedClones","text":"Given multiple samples RepSeq data two groups list receptor     sequences associated comparison group (e.g., obtained using     findAssociatedSeqs), function following:     associated sequence,     samples possess associated sequence, gather RepSeq data     clones whose receptor sequences lie neighborhood associated sequence. RepSeq data neighborhood's associated sequence stored data frame     saved file, preparation use     buildAssociatedClusterNetwork.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Gather Clones in Public Neighborhoods Around Associated Sequences — findAssociatedClones","text":"","code":"findAssociatedClones(    ## Input ##   file_list, input_type,   data_symbols = NULL,   header = TRUE, sep = \"\",   sample_ids = as.character(1:length(file_list)),   subject_ids = NULL,   group_ids,   seq_col,    ## Search Criteria ##   assoc_seqs,   nbd_radius = 1,   dist_type = \"hamming\",   min_seq_length = 6,   drop_matches = \"[*|_]\",    ## Output ##   subset_cols = NULL,   output_dir =     file.path(getwd(), \"associated_neighborhoods\"),   output_type = \"csv\",   verbose = FALSE )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Gather Clones in Public Neighborhoods Around Associated Sequences — findAssociatedClones","text":"file_list Passed loadDataFromFileList (one file per sample). input_type Passed loadDataFromFileList. data_symbols Passed loadDataFromFileList. header Passed loadDataFromFileList. sep Passed loadDataFromFileList. sample_ids character numeric vector sample IDs, whose length matches file_list. subject_ids optional character numeric vector subject IDs, whose length matches file_list. group_ids character numeric vector group IDs, contains exactly two unique   values whose length matches file_list. seq_col column name number sample's data frame contains receptor sequences associate comparison group. assoc_seqs character vector containing receptor sequences associated comparison group. nbd_radius maximum distance element assoc_seqs clones within neighborhood. dist_type distance metric used measure distance sequences nbd_radius. Valid options \"hamming\" \"levenshtein\". min_seq_length Passed filterInputData() loading sample. drop_matches Passed filterInputData(). subset_cols Passed filterInputData(). output_dir output directory; valid output directory required, since results returned R. output_type character string specifying file format use writing file. Valid options include \"csv\", \"tsv\", \"rds\" \"rda\". verbose logical scalar; TRUE, additional console output printed reporting number clones sample belonging neighborhood associated sequence, well total number clones neighborhood across samples.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Gather Clones in Public Neighborhoods Around Associated Sequences — findAssociatedClones","text":"neighborhood's RepSeq data file saved using corresponding associated sequence    filename, appropriate file extension appended based    value output_type (e.g., neighborhood data sequence    \"CASSGAYEQYF\" saved \"CASSGAYEQYF.csv\"    output_type = \"csv\"). Three variables, SampleID, SubjectID GroupID, added neighborhood's RepSeq data, whose respective values row values sample_ids, subject_ids group_ids corresponding data row.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n    Gather Clones in Public Neighborhoods Around Associated Sequences — findAssociatedClones","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Gather Clones in Public Neighborhoods Around Associated Sequences — findAssociatedClones","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedClones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Gather Clones in Public Neighborhoods Around Associated Sequences — findAssociatedClones","text":"","code":"if (FALSE) { ## Generate some toy data for demonstration  # Use temp dir data_dir <- tempdir()  # Directory to store input files dir_input_samples <- file.path(data_dir, \"input_samples\") dir.create(dir_input_samples, showWarnings = FALSE)  samples <- 30 affixes <- c(\"AAAA\", \"AASA\", \"AACA\", \"AAQA\", \"AAQ\", \"AAA\", \"AASAA\", \"AAAAA\") affix_probs_g0 <- rep(1 / length(affixes),                       times = length(affixes) * samples / 2) affix_probs_g1 <- rep(c(1, 5, 1, 1, 1, 1, 5, 1), times = samples / 2) affix_probs <- matrix(c(affix_probs_g0, affix_probs_g1),                       nrow = samples, byrow = TRUE) new_probs_g0 <- rep(c(1/2, 1/6, 1/6, 1/6), times = samples / 2) new_probs_g1 <- rep(c(1/3, 1/6, 1/6, 1/3), times = samples / 2) new_probs <- matrix(c(new_probs_g0, new_probs_g1),                     nrow = samples, byrow = TRUE) simulateToyData(   samples = samples,   sample_size = 30,   prefix_length = 1,   prefix_chars = c(\"A\", \"C\"),   prefix_probs = cbind(rep(1, samples), rep(0, samples)),   affixes = affixes,   affix_probs = affix_probs,   num_edits = 4,   edit_pos_probs = function(seq_length) {     dnorm(seq(-4, 4, length.out = seq_length))   },   edit_ops = c(\"insertion\", \"deletion\", \"transmutation\"),   edit_probs = c(5, 1, 4),   new_chars = c(\"A\", \"S\", \"C\", \"Q\"),   new_probs = new_probs,   output_dir = dir_input_samples,   no_return = TRUE )   ## 1. Find Associated Sequences  # input files for step 1 (one per sample) input_files <- file.path(dir_input_samples, paste0(\"Sample\", 1:samples, \".rds\")) head(input_files)  # group labels for the samples group_labels <- c(rep(\"reference\", samples / 2), rep(\"comparison\", samples / 2))  # search across samples for associated sequences using Fisher's exact test associated_seqs <- findAssociatedSeqs(   file_list = input_files, input_type = \"rds\",   group_ids = group_labels, groups = c(\"reference\", \"comparison\"),   min_seq_length = NULL, drop_matches = NULL,   seq_col = \"CloneSeq\", outfile = NULL) head(associated_seqs)   ## 2. Find Associated Clones  # output directory for current step dir_nbds <- file.path(data_dir, \"assoc_seq_nbds\")  # Identify neighborhood around each associated sequence findAssociatedClones(   file_list = input_files, input_type = \"rds\", group_ids = group_labels,   seq_col = \"CloneSeq\", dist_type = \"levenshtein\",   assoc_seqs = associated_seqs$ReceptorSeq,   min_seq_length = NULL, drop_matches = NULL,   output_dir = dir_nbds) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Identify Receptor Sequences Associated With a Binary Variable — findAssociatedSeqs","title":"\n    Identify Receptor Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"Given multiple samples bulk Adaptive Immune Receptor Repertoire Sequencing (AIRR-Seq) data sample-level subject-level binary variable interest disease condition, treatment clinical outcome, identify receptor sequences exhibit statistically significant difference frequency two levels binary variable using Fisher's exact test. findAssociatedSeqs designed use sample contained separate data frame, data frame stored separate file. findAssociatedSeqs2 designed use single data frame containing samples.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Identify Receptor Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"","code":"findAssociatedSeqs(   ## Input ##   file_list,   input_type,   data_symbols = NULL,   header = TRUE, sep = \"\",   sample_ids = NULL,   subject_ids = NULL,   group_ids,   groups = NULL,   seq_col,   freq_col = NULL,    ## Search Criteria ##   min_seq_length = 7,   drop_matches = \"[*|_]\",   min_sample_membership = 5,   pval_cutoff = 0.05,    ## Output ##   outfile = \"associated_seqs.csv\")   findAssociatedSeqs2(   ## Input ##   data,   seq_col,   sample_col,   subject_col = sample_col,   group_col,   groups = NULL,   freq_col = NULL,    ## Search Criteria ##   min_seq_length = 7,   drop_matches = \"[*|_]\",   min_sample_membership = 5,   pval_cutoff = 0.05,    ## Ouptut ##   outfile = \"associated_seqs.csv\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Identify Receptor Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"file_list Passed loadDataFromFileList (one data frame per sample). input_type Passed loadDataFromFileList. data_symbols Passed loadDataFromFileList. header Passed loadDataFromFileList. sep Passed loadDataFromFileList. sample_ids Deprecated. nothing. subject_ids character numeric vector subject IDs, whose length matches file_list.   relevant binary variable interest subject-specific multiple samples belong subject. group_ids character numeric vector group IDs, contains exactly two unique   values whose length matches file_list. two groups correspond two values binary variable interest. groups Deprecated. nothing. argument previously used specify values group_ids corresponding two values binary variable interest. values now determined automatically unique values group_ids. seq_col name index column containing clone sequences input data sample. freq_col Optional. name index column containing clone frequency/fraction (.e., measure clonal abundance normalized based total count sample) input data sample. supplied, maximum clone frequency (across samples) associated sequence included content label variable returned data frame. min_seq_length Passed filterInputData. drop_matches Passed filterInputData. min_sample_membership sequences appear least many samples considered. Setting value NULL bypasses check. pval_cutoff sequences Fisher's exact test $P$-value cutoff     returned. outfile file path used save data frame containing associated sequences     (using write.csv). data data frame containing combined AIRR-seq data samples,     variables indexed column observations indexed row. sample_col name index column data containing sample IDs. subject_col Optional. name index column data containing subject IDs. relevant binary variable interest subject-specific multiple samples belong subject. group_col name index column data containing group IDs.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Identify Receptor Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"list unique receptor sequences first filtered according minimum sequence length sequence content based specified values min_seq_length drop_matches, respectively. list filtered based minimum sample membership, keeping     receptor sequences appear least min_sample_membership     samples. remaining sequence, P-value computed Fisher's exact test independence binary variable interest appearance sequence within repertoire. test performed using     stats::fisher.test, based number samples possessing     sequence two groups. subject IDs provided, test instead based number subjects possessing sequence one samples. sequences     \\(P\\)-value pval_cutoff retained. resulting     sequences sorted \\(P\\)-value increasing order returned     along basic meta-data. returned ouput intended use findAssociatedClones function. See Finding Associated Clusters package vignette details. vignette can accessed using vignette(\"associated_clusters\").","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Identify Receptor Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"data frame containing receptor sequences found associated binary variable based Fisher's exact test using specified P-value cutoff. row corresponds unique sequence includes following variables: ReceptorSeq unique receptor sequence fisher_pvalue P-value Fisher's exact test independence receptor sequence binary variable interest shared_by_n_samples number samples sequence observed samples_g0 samples sequence observed, number samples belonging first group samples_g1 samples sequence observed, number samples belonging second group shared_by_n_subjects number subjects sequence observed (present subject IDs specified) subjects_g0 subjects sequence observed, number subjects belonging first group (present subject IDs specified) subjects_g1 subjects sequence observed, number subjects belonging second group (present subject IDs specified) label character string summarizing information. Also includes maximum -sample clone frequency across samples, available","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n    Identify Receptor Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Identify Receptor Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findAssociatedSeqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Identify Receptor Sequences Associated With a Binary Variable — findAssociatedSeqs","text":"","code":"if (FALSE) { ## Generate some toy data for demonstration ## # Use temp dir data_dir <- tempdir()  # Directory to store input files dir_input_samples <- file.path(data_dir, \"input_samples\") dir.create(dir_input_samples, showWarnings = FALSE)  # Number of samples by control/treatment group samples_c <- samples_t <- 15 samples <- samples_c + samples_t sample_size <- 30 # (seqs per sample)  # sequences (first five are chosen to be associated with treatment) base_seqs <- c(\"CASSGAYEQYF\", \"CSVDLGKGNNEQFF\",                \"CASSIEGQLSTDTQYF\",                \"CASSEEGQLSTDTQYF\",                \"CASSPEGQLSTDTQYF\",                \"RASSLAGNTEAFF\", \"CASSHRGTDTQYF\", \"CASDAGVFQPQHF\")  # relative generation probabilities by control/treatment group pgen_c <- matrix(rep(c(rep(1, 5), rep(30, 3)), times = samples_c),                  nrow = samples_c, byrow = TRUE) pgen_t <- matrix(rep(c(1, 1, rep(1/3, 3), rep(2, 3)), times = samples_t),                  nrow = samples_t, byrow = TRUE) pgen <- rbind(pgen_c, pgen_t)  # Simulate the data simulateToyData(   samples = samples, sample_size = sample_size,   prefix_length = 1, prefix_chars = c(\"\", \"\"),   prefix_probs = cbind(rep(1, samples), rep(0, samples)),   affixes = base_seqs, affix_probs = pgen, num_edits = 0,   output_dir = dir_input_samples, no_return = TRUE)   ## Find Associated Sequences ## # input files (one per sample) input_files <- file.path(dir_input_samples, paste0(\"Sample\", 1:samples, \".rds\"))  # group labels for the samples group_labels <- c(rep(\"reference\", samples_c), rep(\"comparison\", samples_t))  associated_seqs <- findAssociatedSeqs(   file_list = input_files, input_type = \"rds\",   group_ids = group_labels,   seq_col = \"CloneSeq\",   min_seq_length = NULL, drop_matches = NULL,   min_sample_membership = 0,   pval_cutoff = 0.1,outfile = NULL) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Find Public Clusters Among RepSeq Samples — findPublicClusters","title":"\n    Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"Given multiple samples RepSeq data, perform network analysis     sample individually filter clusters node count clone count.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"","code":"findPublicClusters(    ## Input ##   file_list, input_type,   data_symbols = NULL, header = TRUE, sep = \"\",   sample_ids = 1:length(file_list),   seq_col, count_col = NULL,   min_seq_length = 3, drop_matches = \"[*|_]\",    ## Network ##   top_n_clusters = 20,   min_node_count = 10,   min_clone_count = 100,    ## Visualization ##   plots = FALSE, print_plots = FALSE,   plot_title = \"auto\", color_nodes_by = \"cluster_id\",    ## Output ##   output_dir = file.path(getwd(), \"public_clusters\"),   output_type = \"rds\",   output_dir_unfiltered = NULL,   output_type_unfiltered = \"rds\",   ...  )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"file_list Passed loadDataFromFileList(one data frame per sample). input_type Passed loadDataFromFileList. data_symbols Passed loadDataFromFileList. header Passed loadDataFromFileList. sep Passed loadDataFromFileList. sample_ids character numeric vector sample IDs, whose length matches file_list. values   valid use filenames. seq_col column name number sample's data frame contains receptor sequences used basis similarity rows network analysis. column must name sample. count_col column name number sample's data frame contains measure clonal abundance used filtering clusters. column must name sample. min_seq_length Passed buildRepSeqNetwork performing     network analysis sample (prior filtering clusters). drop_matches Passed buildRepSeqNetwork. top_n_clusters top_n_clusters clusters highest node count     automatically included among public clusters. min_node_count Clusters node count least value included     among public clusters. min_clone_count Clusters aggregate clone count least value included     among public clusters. plots Passed buildRepSeqNetwork performing     network analysis sample (prior filtering clusters). print_plots Passed buildRepSeqNetwork. plot_title Passed buildRepSeqNetwork. color_nodes_by Passed buildRepSeqNetwork. output_dir outpout directory save filtered network results sample. output_type character string specifying file format used save filtered     results. Options include \"rds\", \"csv\" \"rda\". output_dir_unfiltered output directory save unfiltered network results sample,     desired. NULL (default), filtered results     saved. output_type_unfiltered character string specifying file format scheme used save     unfiltered network results sample. applicable output_dir_unfiltered     non-null. Passed buildRepSeqNetwork. ... arguments buildRepSeqNetwork(), including node_stats, stats_to_include cluster_stats (see details).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"node-level cluster-level network properties automatically computed     sample. node-level properties     renamed reflect association sample-level network. Specifically,     properties named     ClusterIDInSample, SampleLevelNetworkDegree,     SampleLevelTransitivity, SampleLevelCloseness,     SampleLevelCentralityByCloseness, SampleLevelCentralityByEigen,     SampleLevelEigenCentrality, SampleLevelBetweenness,     SampleLevelCentralityByBetweenness, SampleLevelAuthorityScore,     SampleLevelCoreness, SampleLevelPageRank.     variable SampleID     added node-level cluster-level meta data sample. clusters sample filtered, node-level cluster-level     meta data saved subdirectories node_meta_data     cluster_meta_data, respectively, output_dir; saved     using sample ID (corresponding element sample_id_list)     filename prefix, followed appropriate file extension according     output_type. files containing node-level meta data filtered clusters can     supplied buildPublicClusterNetwork order combine     public clusters across samples perform network analysis. files     containing cluster-level meta data filtered clusters can     supplied buildPublicClusterNetworkByRepresentative build     network using single representative sequence cluster. unfiltered network results sample can also saved supplying     directory output_dir_unfiltered, results desired     downstream analysis.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n    Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/findPublicClusters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Find Public Clusters Among RepSeq Samples — findPublicClusters","text":"Brian Neal (Brian.Neal@ucsf.edu)   buildPublicClusterNetworkbuildPublicClusterNetworkByRepresentativePublic Clusters Vignette","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkFromAdjacencyMat.html","id":null,"dir":"Reference","previous_headings":"","what":"\n  Generate the Network igraph for an Adjacency Matrix — generateNetworkFromAdjacencyMat","title":"\n  Generate the Network igraph for an Adjacency Matrix — generateNetworkFromAdjacencyMat","text":"simple wrapper function used convenience. Given adjacency matrix   undirected network, generates igraph object containing undirected   network graph corresponding adjacency matrix simplifying   removing loops.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkFromAdjacencyMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n  Generate the Network igraph for an Adjacency Matrix — generateNetworkFromAdjacencyMat","text":"","code":"generateNetworkFromAdjacencyMat(adjacency_matrix)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkFromAdjacencyMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n  Generate the Network igraph for an Adjacency Matrix — generateNetworkFromAdjacencyMat","text":"adjacency_matrix Passed igraph::graph_from_adjacency_matrix. square adjacency matrix.     Sparse matrices created using Matrix package supported.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkFromAdjacencyMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n  Generate the Network igraph for an Adjacency Matrix — generateNetworkFromAdjacencyMat","text":"igraph graph object.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkFromAdjacencyMat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n  Generate the Network igraph for an Adjacency Matrix — generateNetworkFromAdjacencyMat","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkFromAdjacencyMat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n  Generate the Network igraph for an Adjacency Matrix — generateNetworkFromAdjacencyMat","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkFromAdjacencyMat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n  Generate the Network igraph for an Adjacency Matrix — generateNetworkFromAdjacencyMat","text":"","code":"# Simulate some toy data for demonstration toy_data <- simulateToyData(sample_size = 10)  adjmat <- sparseAdjacencyMatFromSeqs(toy_data$CloneSeq) #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 4 nodes (after removing isolated nodes). net <- generateNetworkFromAdjacencyMat(adjmat)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraphPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"\n  Generate Plots of a Network Graph — generateNetworkGraphPlots","title":"\n  Generate Plots of a Network Graph — generateNetworkGraphPlots","text":"Given igraph network object data frame containing corresponding node-level meta data, generates one ggraph plots network graph according user specifications.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraphPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n  Generate Plots of a Network Graph — generateNetworkGraphPlots","text":"","code":"generateNetworkGraphPlots(   igraph, data, print_plots = TRUE,   plot_title = NULL, plot_subtitle = NULL,   color_nodes_by = NULL, color_scheme = \"default\",   color_legend = \"auto\", color_title = \"auto\",   edge_width = 0.1, size_nodes_by = 0.5,   node_size_limits = NULL, size_title = \"auto\")"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraphPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n  Generate Plots of a Network Graph — generateNetworkGraphPlots","text":"igraph igraph object containing network graph plotted. data data frame containing node-level meta-data network, row corresponding node. print_plots logical scalar; plots printed R plotting window? plot_title Passed plotNetworkGraph generating plot. plot_subtitle Passed plotNetworkGraph generating plot. color_nodes_by vector specifying one variables data used encode color nodes. One plot generated vector entry, plot coloring nodes according variable corresponding vector entry. vector must either character vector (case entry column name data) numeric vector (case entry column index data). argument NULL, one plot generated nodes uncolored. color_scheme character string specifying color scale use plots, character vector whose length matches color_nodes_by, specifying color scale used plot. entry passed plotNetworkGraph generating plot corresponding entry color_nodes_by. color_legend Passed plotNetworkGraph generating plot. color_title character string specifying title color legend plots, character vector whose length matches color_nodes_by, specifying title color legend plot. entry passed plotNetworkGraph generating plot corresponding entry color_nodes_by. edge_width Passed plotNetworkGraph generating plot. size_nodes_by numeric scalar specifying size nodes plots, column name variable data used encode size nodes plots. Alternatively, argument value NULL uses default ggraph size nodes. Passed size aesthetic mapping geom_node_point. node_size_limits Passed plotNetworkGraph generating plot. size_title Passed plotNetworkGraph generating plot.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraphPlots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n  Generate Plots of a Network Graph — generateNetworkGraphPlots","text":"Intended use output buildRepSeqNetwork generateNetworkObjects. output functions contain inputs igraph data arguments generateNetworkGraphPlots. plot generated dispatching call plotNetworkGraph. plots can saved single pdf using saveNetworkPlots.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraphPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n  Generate Plots of a Network Graph — generateNetworkGraphPlots","text":"list containing one element plot generated. element ggraph object whose name column name variable used color nodes. plot uncolored nodes, name uniform_color.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraphPlots.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n  Generate Plots of a Network Graph — generateNetworkGraphPlots","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraphPlots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n  Generate Plots of a Network Graph — generateNetworkGraphPlots","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkGraphPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n  Generate Plots of a Network Graph — generateNetworkGraphPlots","text":"","code":"if (FALSE) { # Simulate some toy data for demonstration toy_data <- simulateToyData()  # Generate network for data net <- generateNetworkObjects(toy_data, \"CloneSeq\")  # Plot network graph net_plot <- generateNetworkGraphPlots(   net$igraph, net$node_data, color_nodes_by = c(\"SampleID\", \"CloneCount\")) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Generate Core Objects for a RepSeq Network — generateNetworkObjects","title":"\n    Generate Core Objects for a RepSeq Network — generateNetworkObjects","text":"Given immune repertoire sequencing data, returns adjacency matrix,     igraph node meta data repetroire network based sequence     similarity.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Generate Core Objects for a RepSeq Network — generateNetworkObjects","text":"","code":"generateNetworkObjects(data, seq_col,                        dist_type = \"hamming\",                        dist_cutoff = 1,                        drop_isolated_nodes = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Generate Core Objects for a RepSeq Network — generateNetworkObjects","text":"data data frame containing RepSeq data, clones/cells indexed row. seq_col column name number data containing receptor sequences used basis similarity rows. Also accepts vector length 2 specifying distinct sequence columns (e.g., alpha, beta chains); two rows similar types sequences similar. dist_type type function use measure similarity two receptor     sequences. Valid options \"hamming\" (default), \"levenshtein\"     \"euclidean_on_atchley\" (applicable TCR CDR3 amino acid sequences). dist_cutoff nonnegative scalar specifying maximum distance threshold     similarity receptor sequences. drop_isolated_nodes logical scalar; observations whose receptor sequences     similar sequences dropped network?","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Generate Core Objects for a RepSeq Network — generateNetworkObjects","text":"function essentially lightweight version buildRepSeqNetwork,     omitting input filtering, computation network properties, generation     plots saving output.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Generate Core Objects for a RepSeq Network — generateNetworkObjects","text":"constructed network contains edges, function return NULL warning. Otherwise, list containing following items: igraph igraph object containing edge list network. adjacency_matrix network graph adjacency matrix, stored sparse matrix class dgCMatrix Matrix package. node_data data     frame containing node-level meta-data network. data frame contains     column names data. data frame contain one row     node remains network filtering based     drop_isolated_nodes, applicable. row names     original input data preserved.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Generate Core Objects for a RepSeq Network — generateNetworkObjects","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/generateNetworkObjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Generate Core Objects for a RepSeq Network — generateNetworkObjects","text":"","code":"if (FALSE) { # Simulate some toy data for demonstration toy_data <- simulateToyData()  # Generate network for data net <- generateNetworkObjects(toy_data, \"CloneSeq\") }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Compute Cluster-Level Network Statistics — getClusterStats","title":"\n    Compute Cluster-Level Network Statistics — getClusterStats","text":"Given immune repertoire sequence data adjacency matrix   corresponding repertoire network, perform clustering compute cluster-level   network statistics.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Compute Cluster-Level Network Statistics — getClusterStats","text":"","code":"getClusterStats(data,                 adjacency_matrix,                 seq_col = NULL,                 count_col = NULL,                 cluster_id_col = NULL,                 degree_col = NULL,                 cluster_fun = cluster_fast_greedy)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Compute Cluster-Level Network Statistics — getClusterStats","text":"data data frame containing immune repertoire sequence data, clones/cells       indexed row. adjacency_matrix square adjacency matrix corresponding repertoire network rows     data, row dimension matching data. Sparse matrices     created using Matrix package supported. seq_col Optional. column name number data containing receptor sequences (e.g.,       TCR CDR3 nucleotide sequence amino acid sequence). supplied, related cluster-level properties computed. count_col Optional. column name number data containing counts (.e., clone count UMI count). supplied, related cluster-level properties computed. cluster_id_col column name number data containing cluster membership node. NULL, clustering performed using igraph::cluster_fast_greedy() order determine cluster membership. degree_col column name number data containing network degree node. NULL, network degree computed using igraph::degree. cluster_fun Passed addClusterMembership. Controls algorithm used cluster identification.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Compute Cluster-Level Network Statistics — getClusterStats","text":"cluster-level statistics diameter_length, assortativity, transitivity,     edge_density, degree_centrality_index, closeness_centrality_index,     eigen_centrality_index, eigen_centrality_eigenvalue computed cluster     first generating network graph cluster using adjacency     submatrix corresponding cluster. result, computing cluster statistics     can potentially take time large networks many large clusters.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Compute Cluster-Level Network Statistics — getClusterStats","text":"data frame containing one row cluster following columns: cluster_id cluster ID number. node_count number nodes cluster. mean_seq_length mean sequence length cluster. mean_degree mean network degree cluster. max_degree maximum network degree cluster. seq_w_max_degree receptor sequence possessing maximum degree within cluster. agg_count aggregate count among nodes cluster (based counts count_col). max_count maximum count among nodes cluster (based counts count_col). seq_w_max_count receptor sequence possessing maximum count within cluster. diameter_length longest geodesic distance cluster, computed using length(igraph::get_diameter()). assortativity assortativity coefficient cluster's graph, based degree (minus one) node cluster (degree computed based upon nodes within cluster). Computed using igraph::assortativity_degree. global_transitivity transitivity (.e., clustering coefficient) cluster's graph, estimates probability adjacent vertices connected. Computed using igraph::transitivty() type = \"global\". edge_density number edges cluster fraction maximum possible number edges. Computed using igraph::edge_density(). degree_centrality_index cluster-level centrality index based degree within cluster graph. Computed using igraph::centr_degree()$centralization. closeness_centrality_index cluster-level centrality index based closeness, .e., distance nodes cluster. Computed using igraph::centr_clo()$centralization. eigen_centrality_index cluster-level centrality index based eigenvector centrality scores, .e., values first eigenvector adjacency matrix cluster. Computed using igraph::centr_eigen()$centralization. eigen_centrality_eigenvalue eigenvalue corresponding first eigenvector adjacency matrix cluster. Computed using igraph::eigen_centrality()$value.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Compute Cluster-Level Network Statistics — getClusterStats","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getClusterStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Compute Cluster-Level Network Statistics — getClusterStats","text":"","code":"if (FALSE) { # Simulate some toy data for demonstration toy_data <- simulateToyData()  # Generate network for data net <- generateNetworkObjects(toy_data, \"CloneSeq\")  # Get cluster stats cluster_info <-   getClusterStats(net$node_data, net$adjacency_matrix,                   seq_col = \"CloneSeq\", count_col = \"CloneCount\") }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Compute the Neighborhood Around a Cell/Clone — getNeighborhood","title":"\n    Compute the Neighborhood Around a Cell/Clone — getNeighborhood","text":"Given immune repertoire sequence data target receptor sequence, return     subset data consiting cells/clones whose receptor sequences     within specified distance target.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Compute the Neighborhood Around a Cell/Clone — getNeighborhood","text":"","code":"getNeighborhood(data, seq_col, target_seq,                 dist_type = \"hamming\", max_dist = 1)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Compute the Neighborhood Around a Cell/Clone — getNeighborhood","text":"data Data frame containing RepSeq data. seq_col column name number data containing receptor sequences type target_seq. target_seq character string containing receptor sequence cell/clone around form neighborhood. dist_type character string specifying distance type neighborhood based; valid options \"hamming\" \"levenshtein\". max_dist numeric scalar specifying neighborhood radius. neighborhood consists clones whose receptor sequences max_dist target sequence.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Compute the Neighborhood Around a Cell/Clone — getNeighborhood","text":"neighborhood computed target_seq present data, .e., column data referenced seq_col.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Compute the Neighborhood Around a Cell/Clone — getNeighborhood","text":"target_seq present data, data frame containing subset corresponding neighborhood; otherwise, function returns NULL.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n    Compute the Neighborhood Around a Cell/Clone — getNeighborhood","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Compute the Neighborhood Around a Cell/Clone — getNeighborhood","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/getNeighborhood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Compute the Neighborhood Around a Cell/Clone — getNeighborhood","text":"","code":"# Simulate some toy data for demonstration toy_data <- simulateToyData(sample_size = 500)  # Get neighborhood around first clone sequence nbd <- getNeighborhood(toy_data, seq_col = \"CloneSeq\",                        target_seq = toy_data$CloneSeq[[1]])"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":null,"dir":"Reference","previous_headings":"","what":"\nBounded Computation of Hamming Distance — hamDistBounded","title":"\nBounded Computation of Hamming Distance — hamDistBounded","text":"Computes Hamming distance two strings subject specified upper bound.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\nBounded Computation of Hamming Distance — hamDistBounded","text":"","code":"hamDistBounded(a, b, k)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\nBounded Computation of Hamming Distance — hamDistBounded","text":"character string. b character string compared . k upper bound Hamming distance b.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\nBounded Computation of Hamming Distance — hamDistBounded","text":"Hamming distance measures number single-character transformations required transform one string another. defined strings equal length. b differ length, placeholder characters appended shorter string lengths match; placeholder character shorter string treated non-matching character corresponding position longer string. Computation halted Hamming distance determined exceed upper bound k; reduces computation required distinguishing values upper bound unnecessary.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\nBounded Computation of Hamming Distance — hamDistBounded","text":"integer whose value Hamming distance b distance k; otherwise value -1.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\nBounded Computation of Hamming Distance — hamDistBounded","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/hamDistBounded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\nBounded Computation of Hamming Distance — hamDistBounded","text":"","code":"hamDistBounded(\"foo\", \"bar\", 1) #> [1] -1  hamDistBounded(\"foo\", \"bar\", 10) #> [1] 3"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/installPythonModules.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Install Python Modules Used by NAIR — installPythonModules","title":"\n    Install Python Modules Used by NAIR — installPythonModules","text":"Checks whether Python modules used NAIR package available, automatically installs missing via reticulate::py_install().","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/installPythonModules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Install Python Modules Used by NAIR — installPythonModules","text":"","code":"installPythonModules(method = \"auto\", conda = \"auto\", pip = FALSE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/installPythonModules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Install Python Modules Used by NAIR — installPythonModules","text":"method Passed method argument reticulate::py_install(). See ?reticulate::py_install() details. conda Passed conda argument reticulate::py_install(). See ?reticulate::py_install() details. pip Passed pip argument reticulate::py_install(). See ?reticulate::py_install() details. levenshtein Python module, call reticulate::py_install() always uses pip = TRUE.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/installPythonModules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Install Python Modules Used by NAIR — installPythonModules","text":"modules checked installed numpy, pandas, tensorflow keras. Calling function equivalent making individual calls recitulate::py_install() modules.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/installPythonModules.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Install Python Modules Used by NAIR — installPythonModules","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/kmeansAtchley.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Analyze TCR Samples Using Numerical Encoder and K-Means Clustering — kmeansAtchley","title":"\n    Analyze TCR Samples Using Numerical Encoder and K-Means Clustering — kmeansAtchley","text":"Given samples TCR RepSeq data, convert CDR3 amino acid     sequences numeric vectors using deep learning, perform \\(K\\)-means     clustering, profile sample's unique TCR sequences distributed     among clusters, compare profiles across samples.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/kmeansAtchley.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Analyze TCR Samples Using Numerical Encoder and K-Means Clustering — kmeansAtchley","text":"","code":"kmeansAtchley(   data,   amino_col = \"AminoAcidSeq\",   sample_col = \"SampleID\",   group_col, k = 100,   pdf_width = 15,   pdf_height = 15,   margin_cluster_heatmap = 25,   margin_corr_heatmap = 15,   use_viridis = FALSE,   output_dir = getwd(),   file_cluster_heatmap =     \"atchley_kmeans_cluster_relative_size_profiles_by_sample.pdf\",   file_corr_heatmap =     \"atchley_kmeans_corr_in_cluster_size_profile_between_samples.pdf\",   return_output = FALSE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/kmeansAtchley.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Analyze TCR Samples Using Numerical Encoder and K-Means Clustering — kmeansAtchley","text":"data data frame containing combined immune repertoire sequencing data samples,     variables indexed column observations indexed row. amino_col column data containing CDR3 amino acid sequences. sample_col column data containing sample IDs. group_col column data containing group IDs. k number clusters \\(K\\)-means clustering. pdf_width Passed width argument grDevices::pdf(). pdf_height Passed height argument grDevices::pdf(). margin_cluster_heatmap margin width column names row names heatmap     sample's cluster profile. margin_corr_heatmap margin width column names row names heatmap     correlation cluster profiles samples. use_viridis logical scalar indicating whether use cividis     color scale viridis package instead RdBu     color scale RColorBrewer. yields readable results     printing black--white, robust color     vision deficiency. output_dir directory save pdf files two heatmaps produced. file_cluster_heatmap pdf filename heatmap     sample's cluster profile. file_corr_heatmap pdf filename heatmap correlation cluster profiles samples. return_output logical scalar indicating whether return numeric vectors encoding     TCR sequences, K-means cluster membership table, sample's     profile TCR representation across clusters.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/kmeansAtchley.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Analyze TCR Samples Using Numerical Encoder and K-Means Clustering — kmeansAtchley","text":"unique TCR sequence encoded 30-dimensional numeric vector     using encodeTCRSeqsByAtchleyFactor(), \\(K\\)-means clustering     performed encoded TCR sequences samples, resulting     k clusters. sample, TCR representation profile across k clusters     computed length-k vector whose \\(\\)th element     fraction sample's unique TCR sequences belong \\(\\)th     cluster. Two heatmaps generated saved file: first shows TCR     representation profile values across samples clusters; second shows     correlation TCR represenation profiles pairs samples.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/kmeansAtchley.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n    Analyze TCR Samples Using Numerical Encoder and K-Means Clustering — kmeansAtchley","text":"return_output = TRUE, list containing following items: kmeans_cluster_ids data frame two variables, cdr3 kmeanClusterID,     containing unique TCR sequences cluster belongs. encoded_values matrix returned encodeTCRSeqsByAtchleyFactor containing     numerically encoded values TCR sequences. cluster_TCR_profiles matrix k rows one column per sample; column     TCR representation profile sample, value recording     fraction sample's unique TCR sequences belonging cluster     corresponding row (thus column sums 1).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/kmeansAtchley.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n    Analyze TCR Samples Using Numerical Encoder and K-Means Clustering — kmeansAtchley","text":"BriseisEncoder authored Ze Zhang (Ze.Zhang@UTsouthwestern.edu).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/kmeansAtchley.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Analyze TCR Samples Using Numerical Encoder and K-Means Clustering — kmeansAtchley","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/kmeansAtchley.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Analyze TCR Samples Using Numerical Encoder and K-Means Clustering — kmeansAtchley","text":"","code":"if (FALSE) { toy_data <- simulateToyData(   samples = 20,   sample_size = 50,   prefix_length = 0,   prefix_chars = \"\",   prefix_probs = matrix(1, nrow = 20),   affixes = c(\"CASSLGYEQYF\", \"CASSLGETQYF\",               \"CASSLGTDTQYF\", \"CASSLGTEAFF\",               \"CASSLGGTEAFF\", \"CAGLGGRDQETQYF\",               \"CASSQETQYF\", \"CASSLTDTQYF\",               \"CANYGYTF\", \"CANTGELFF\",               \"CSANYGYTF\"),   affix_probs = matrix(1, ncol = 11, nrow = 20), ) toy_data$GroupID <- rep(c(\"G1\", \"G2\"), each = 500)  atchley <- kmeansAtchley(   data = toy_data,   k = 3,   amino_col = \"CloneSeq\",   sample_col = \"SampleID\",   group_col = \"GroupID\",   output_dir = tempdir(),   return_output = TRUE) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":null,"dir":"Reference","previous_headings":"","what":"\nBounded Computation of Levenshtein Distance — levDistBounded","title":"\nBounded Computation of Levenshtein Distance — levDistBounded","text":"Computes Levenshtein distance two strings subject specified upper bound.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\nBounded Computation of Levenshtein Distance — levDistBounded","text":"","code":"levDistBounded(a, b, k)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\nBounded Computation of Levenshtein Distance — levDistBounded","text":"character string. b character string compared . k upper bound Levenshtein distance b.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\nBounded Computation of Levenshtein Distance — levDistBounded","text":"Levenshtein (edit) distance measures minimum number single-character edits (include insertions, deletions transformations) required change one string another. Computation halted Levenshtein distance determined exceed upper bound k; reduces computation required distinguishing values upper bound unnecessary.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\nBounded Computation of Levenshtein Distance — levDistBounded","text":"integer whose value Levenshtein distance b distance k; otherwise value -1.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\nBounded Computation of Levenshtein Distance — levDistBounded","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/levDistBounded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\nBounded Computation of Levenshtein Distance — levDistBounded","text":"","code":"levDistBounded(\"foo\", \"bar\", 1) #> [1] -1 levDistBounded(\"foo\", \"bar\", 10) #> [1] 3 levDistBounded(\"foobar\", \"fubar\", 10) #> [1] 2"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"\n  Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","title":"\n  Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"Given igraph network object, generates ggraph plot network graph according user specifications. manual generation plots, generateNetworkGraphPlots function recommended  plotNetworkGraph. arguments generateNetworkGraphPlots behave like buildRepSeqNetwork support generation multiple plots. generateNetworkGraphPlots dispatches appropriate calls plotNetworkGraph, users need call plotNetworkGraph directly.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n  Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"","code":"plotNetworkGraph(igraph,                  plot_title = NULL,                  plot_subtitle = NULL,                  color_nodes_by = NULL,                  color_scheme = \"default\",                  color_legend = \"auto\",                  color_title = \"auto\",                  edge_width = 0.1,                  size_nodes_by = 0.5,                  node_size_limits = NULL,                  size_title = \"auto\",                  outfile = NULL)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n  Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"igraph igraph object containing network graph plotted. plot_title character string NULL. plot title, passed labs. plot_subtitle character string NULL. plot subtitle, passed labs. color_nodes_by vector whose length matches number nodes network. values used encode color node. Alternatively, argument value NULL (default) leaves nodes uncolored. Passed color aesthetic mapping geom_node_point. color_scheme character string specifying color scale used color nodes. \"default\" uses default ggplot colors. options one viridis color scales (e.g. \"plasma\" \"\") (discrete variables) palette hcl.pals (e.g. \"RdYlGn\"). color_legend logical scalar specifying whether display color legend plot. default value \"auto\" shows color legend color_nodes_by continuous variable discrete variable 20 distinct values. color_title character string (NULL) specifying title color legend. applicable  color_nodes_by vector. color_title = \"auto\" (default), color legend title use name color_nodes_by vector. edge_width numeric scalar specifying width graph edges plot. Passed width argument geom_edge_link0. size_nodes_by numeric scalar specifying size nodes, numeric vector positive entires encodes size node (whose length matches number nodes network). Alternatively, argument value NULL uses default ggraph size nodes. Passed size aesthetic mapping geom_node_point. size_title character string (NULL) specifying title size legend. applicable  size_nodes_by vector. size_title = \"auto\" (default), size legend title use name size_nodes_by vector. node_size_limits numeric vector length 2 specifying minimum maximum node size. applicable size_nodes_by vector. node_size_limits = NULL, default size scale used. outfile optional file path saving plot pdf. NULL (default), pdf saved.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\n  Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"ggraph object.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\n  Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n  Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/plotNetworkGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n  Plot the Graph of an Immune Repertoire Network — plotNetworkGraph","text":"","code":"if (FALSE) { # Simulate some toy data for demonstration toy_data <- simulateToyData()  # Generate network for data net <- generateNetworkObjects(toy_data, \"CloneSeq\")  # Plot network graph net_plot <- plotNetworkGraph(   net$igraph,   color_nodes_by = net$node_data$SampleID,   color_scheme = \"viridis\",   size_nodes_by = net$node_data$CloneCount,   node_size_limits = c(0.5, 3))  print(net_plot) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Save List of Network Objects — saveNetwork","title":"\n    Save List of Network Objects — saveNetwork","text":"Given list network objects returned buildRepSeqNetwork generateNetworkObjects, saves     contents according specified file format scheme.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Save List of Network Objects — saveNetwork","text":"","code":"saveNetwork(net, output_dir = getwd(),             output_type = \"individual\",             output_filename = \"MyRepSeqNetwork\",             pdf_width = 12, pdf_height = 10)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Save List of Network Objects — saveNetwork","text":"net list conforming format returned buildRepSeqNetwork generateNetworkObjects. See details. output_dir file path specifying directory save file(s). output_type character string specifying file format use writing output file. Valid options \"individual\", \"rds\" \"rda\". output_filename character string used common filename prefix files saved. pdf_width Passed width argument pdf function. pdf_height Passed height argument pdf function.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\n    Save List of Network Objects — saveNetwork","text":"list provided net argument must contain least components igraph (igraph object), adjacency_matrix (matrix dgCMatrix) node_data (data frame); components cluster_data (data frame) plots (list ggraph objects) optional, also saved present.  saves item separate, uncompressed file, data frames saved csv format. Setting output_type \"rda\" \"rds\" saves output list rda rds file, respectively. output types, plots present also saved pdf file. default file format scheme output_type = \"individual\", igraph saved edgelist     format .txt file; adjacency matrix saved either .csv format     (dense matrices) .mtx format (sparse matrices); plots     saved .pdf file, meaning plots need generated     order modified. output_type \"rds\"     \"rda\", entire list net saved (R symbol     object net saving .rda).","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Save List of Network Objects — saveNetwork","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Save List of Network Objects — saveNetwork","text":"","code":"if (FALSE) { # Simulate some toy data for demonstration toy_data <- simulateToyData()  # Generate network for data net <- generateNetworkObjects(toy_data, \"CloneSeq\")  # Save network objects saveNetwork(net, output_dir = tempdir()) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"\n    Write Plots to a PDF — saveNetworkPlots","title":"\n    Write Plots to a PDF — saveNetworkPlots","text":"Given list plots, write plots single pdf file.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\n    Write Plots to a PDF — saveNetworkPlots","text":"","code":"saveNetworkPlots(plotlist,                  outfile = \"MyRepSeqNetwork.pdf\",                  pdf_width = 12, pdf_height = 10)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\n    Write Plots to a PDF — saveNetworkPlots","text":"plotlist list whose elements can written pdf using pdf function, ggplot class. outfile file path pdf. pdf_width Passed width argument pdf function. pdf_height Passed height argument pdf function.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\n    Write Plots to a PDF — saveNetworkPlots","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/saveNetworkPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\n    Write Plots to a PDF — saveNetworkPlots","text":"","code":"if (FALSE) { # Simulate some toy data for demonstration toy_data <- simulateToyData()  # Generate network for data net <- generateNetworkObjects(toy_data, \"CloneSeq\")  # Plot network graph net$plots <- generateNetworkGraphPlots(   net$igraph, net$node_data, color_nodes_by = c(\"SampleID\", \"CloneCount\"))  # Save plots saveNetworkPlots(net$plots, outfile = file.path(tempdir(), \"network.pdf\")) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":null,"dir":"Reference","previous_headings":"","what":"\nGenerate Toy RepSeq Data — simulateToyData","title":"\nGenerate Toy RepSeq Data — simulateToyData","text":"Generates toy data can used test demonstrate behavior functions NAIR package. Created lightweight tool use tests, examples vignettes. function intended simulate realistic data.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\nGenerate Toy RepSeq Data — simulateToyData","text":"","code":"simulateToyData(     samples = 2,     chains = 1,     sample_size = 100,     prefix_length = 7,     prefix_chars = c(\"G\", \"A\", \"T\", \"C\"),     prefix_probs = rbind(       \"sample1\" = c(12, 4, 1, 1),       \"sample2\" = c(4, 12, 1, 1)),     affixes = c(\"AATTGG\", \"AATCGG\", \"AATTCG\",                 \"AATTGC\", \"AATTG\", \"AATTC\"),     affix_probs = rbind(       \"sample1\" = c(10, 4, 2, 2, 1, 1),       \"sample2\" = c(1, 1, 1, 2, 2.5, 2.5)),     num_edits = 0,     edit_pos_probs = function(seq_length) {       stats::dnorm(seq(-4, 4, length.out = seq_length))     },     edit_ops = c(\"insertion\", \"deletion\", \"transmutation\"),     edit_probs = c(5, 1, 4),     new_chars = prefix_chars,     new_probs = prefix_probs,     output_dir = NULL,     no_return = FALSE,     seed_value = 42 )"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\nGenerate Toy RepSeq Data — simulateToyData","text":"samples number distinct samples include data. chains number chains (either 1 2) generate receptor sequences. sample_size number observations generate per sample. prefix_length length random prefix generated observed sequence. Specifically, number elements prefix_chars sampled replacement concatenated form prefix. prefix_chars character vector containing characters strings sample generating prefix observed sequence. prefix_probs numeric matrix whose column dimension matches length prefix_chars row dimension matching value samples. \\(\\)th row specifies relative probability weights assigned element prefix_chars sampling form prefix sequence \\(\\)th sample. affixes character vector containing characters strings sample generating suffix observed sequence. affix_probs numeric matrix whose column dimension matches length affixes row dimension matching value samples. \\(\\)th row specifies relative probability weights assigned element affixes sampling form suffix sequence \\(\\)th sample. num_edits nonnegative integer specifying number random edit operations perform observed sequence initial generation. edit_pos_probs function accepts nonnegative integer (character length sequence) argument returns vector length containing probability weights. time edit operation performed sequence, character position perform operation randomly determined according probabilities given function. edit_ops character vector specifying possible operations can performed edit. default value includes valid operations (insertion, deletion, transmutation). edit_probs numeric vector length edit_ops, specifying relative probability weights assigned edit operation. new_chars character vector containing characters strings sample performing insertion edit operation. new_probs numeric matrix whose column dimension matches length new_chars row dimension matching value samples. \\(\\)th row specifies, \\(\\)th sample, relative probability weights assigned element new_chars performing transmutation insertion random edit operation. output_dir optional character string specifying file directory save generated data. One file generated per sample. no_return logical flag can used prevent function returning generated data. TRUE, function instead return TRUE processes complete. seed_value Passed set_seed start function execution.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\nGenerate Toy RepSeq Data — simulateToyData","text":"observed sequence obtained separately generating prefix suffix     according specified settings, joining two performing     sequential rounds edit operations randomized according user's     specifications. Count data generated observation; note count data     generated independently observed sequences relationship     .","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\nGenerate Toy RepSeq Data — simulateToyData","text":"no_return = FALSE (default), data frame whose contents depend value chains argument. chains = 1, data frame contains following variables: CloneSeq \"receptor sequence\" observation. CloneFrequency \"clone frequency\" observation (clone count proportion aggregate clone count within sample). CloneCount \"clone count\" observation. SampleID sample ID observation. chains = 2, data frame contains following variables: AlphaSeq \"alpha chain\" receptor sequence observation. AlphaSeq \"beta chain\" receptor sequence observation. UMIs \"unique count\" observation. Count \"count\" observation. SampleID sample ID observation. no_return = FALSE, function returns TRUE upon completion.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\nGenerate Toy RepSeq Data — simulateToyData","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/simulateToyData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\nGenerate Toy RepSeq Data — simulateToyData","text":"","code":"if (FALSE) { # bulk data from two samples dat1 <- simulateToyData()  # single-cell data with alpha and beta chain sequences dat2 <- simulateToyData(chains = 2)  # write data to file, return nothing simulateToyData(sample_size = 500,                 num_edits = 10,                 seed_value = 1,                 no_return = TRUE,                 output_dir = tempdir())  # example customization dat4 <-   simulateToyData(     samples = 5,     sample_size = 50,     prefix_length = 0,     prefix_chars = \"\",     prefix_probs = matrix(1, nrow = 5),     affixes = c(\"CASSLGYEQYF\", \"CASSLGETQYF\",                 \"CASSLGTDTQYF\", \"CASSLGTEAFF\",                 \"CASSLGGTEAFF\", \"CAGLGGRDQETQYF\",                 \"CASSQETQYF\", \"CASSLTDTQYF\",                 \"CANYGYTF\", \"CANTGELFF\",                 \"CSANYGYTF\"),     affix_probs = matrix(1, ncol = 11, nrow = 5),   ) }"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/sparseAdjacencyMatFromSeqs.html","id":null,"dir":"Reference","previous_headings":"","what":"\nCompute Network Adjacency Matrix for Immune Repertoire — sparseAdjacencyMatFromSeqs","title":"\nCompute Network Adjacency Matrix for Immune Repertoire — sparseAdjacencyMatFromSeqs","text":"Given list receptor sequences, computes adjacency matrix network graph based sequence similarity.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/sparseAdjacencyMatFromSeqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\nCompute Network Adjacency Matrix for Immune Repertoire — sparseAdjacencyMatFromSeqs","text":"","code":"sparseAdjacencyMatFromSeqs(     seqs,     dist_type = \"hamming\",     max_dist = 1,     drop_isolated_nodes = TRUE)"},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/sparseAdjacencyMatFromSeqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\nCompute Network Adjacency Matrix for Immune Repertoire — sparseAdjacencyMatFromSeqs","text":"seqs character vector containing receptor sequences. dist_type character string specifying distance function used measure similarity sequences. Valid options \"hamming\" \"levenshtein\". max_dist nonnegative integer. Pairs sequences whose distance less equal value adjacent (connected edge) network graph. drop_isolated_nodes logical scalar; TRUE, sequences adjacent sequence excluded network.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/sparseAdjacencyMatFromSeqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\nCompute Network Adjacency Matrix for Immune Repertoire — sparseAdjacencyMatFromSeqs","text":"adjacency matrix graph \\(n\\) nodes/vertices symmetric \\(n \\times n\\) matrix \\((,j)\\)th entry equal 1 nodes \\(\\) \\(j\\) adjacent (joined edge) network graph 0 otherwise. node network graph represents receptor sequence seqs vector. Two nodes adjacent distance sequences, measured dist_type, less equal max_dist.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/sparseAdjacencyMatFromSeqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"\nCompute Network Adjacency Matrix for Immune Repertoire — sparseAdjacencyMatFromSeqs","text":"sparse matrix class dgCMatrix Matrix package. drop_isolated_nodes = TRUE, row column names matrix indicate receptor sequences seqs vector correspond row column. row column names can accessed using dimnames(). returns list containing two character vectors, one row names one column names. name \\(\\)th row numerical index seqs vector corresponding \\(\\)th row \\(\\)th column.  name \\(j\\)th column receptor sequence corresponding \\(j\\)th row \\(j\\)th column.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/sparseAdjacencyMatFromSeqs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\nCompute Network Adjacency Matrix for Immune Repertoire — sparseAdjacencyMatFromSeqs","text":"Hai Yang, Jason Cham, Brian Neal, Zenghua Fan, Tao Li Zhang. (2023). NAIR: Network Analysis Immune Repertoire. Frontiers Immunology, vol. 14. https://doi.org/10.3389/fimmu.2023.1181825 https://www.frontiersin.org/articles/10.3389/fimmu.2023.1181825 https://github.com/mlizhangx/Network-Analysis--Repertoire-Sequencing-","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/sparseAdjacencyMatFromSeqs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"\nCompute Network Adjacency Matrix for Immune Repertoire — sparseAdjacencyMatFromSeqs","text":"Brian Neal (Brian.Neal@ucsf.edu)","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/reference/sparseAdjacencyMatFromSeqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\nCompute Network Adjacency Matrix for Immune Repertoire — sparseAdjacencyMatFromSeqs","text":"","code":"sparseAdjacencyMatFromSeqs(     c(\"fee\", \"fie\", \"foe\", \"fum\", \"foo\") ) #> Computing network edges based on a max hamming distance of 1... Done. #> Network contains 4 nodes (after removing isolated nodes). #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>   fee fie foe foo #> 1   1   1   1   . #> 2   1   1   1   . #> 3   1   1   1   1 #> 5   .   .   1   1"},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"package-functions-0-0-9040","dir":"Changelog","previous_headings":"","what":"Package Functions","title":"Changes in NAIR version 0.0.9040","text":"Default value data_symbols argument changed NULL \"data\" order match output format findAssociatedClones findAssociatedClones called output_type = \"rda\". Note change affects case buildAssociatedClusterNetwork called input_type = \"rda\"","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"vignettes-0-0-9040","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"Changes in NAIR version 0.0.9040","text":"buildRepSeqNetwork saveNetwork, vignette now specifies R environment variable name output list saved Rdata file using output_type = \"rda\". Content added completely explain certain behavior arguments previously covered.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"package-webpage-0-0-9040","dir":"Changelog","previous_headings":"","what":"Package Webpage","title":"Changes in NAIR version 0.0.9040","text":"GitHub Actions workflow added automate publication future webpage updates URL GitHub Pages hosted website added URL field DESCRIPTION file pkgdown.yaml","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"package-metadata-0-0-9039","dir":"Changelog","previous_headings":"","what":"Package Metadata","title":"Changes in NAIR version 0.0.9039 (7/29/2023)","text":"Updated authors DESCRIPTION Updated journal article citation Readme documentation files","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"vignettes-0-0-9039","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"Changes in NAIR version 0.0.9039 (7/29/2023)","text":"term “AIRR-Seq” now spelled full “Adaptive Immune Receptor Repertoire Sequencing” prior first instance abbreviation vignette appears Meaning cluster membership ID corresponding cluster_id network property now clearly explained Header levels document structure updated revisions/additions, including fixing remaining broken links, forthcoming","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"documentation-0-0-9039","dir":"Changelog","previous_headings":"","what":"Documentation","title":"Changes in NAIR version 0.0.9039 (7/29/2023)","text":"References/Authors updated across documentation files Many documentation files revised updated use wording clear, accurate consistent language used package vignettes. Updates remaining documentation files forthcoming.","code":""},{"path":[]},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"bug-fixes-0-0-9038","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Changes in NAIR version 0.0.9038 (7/20/2023)","text":"Fixed bug filterInputData raised error count_col subset_cols arguments non-null","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"functions-0-0-9038","dir":"Changelog","previous_headings":"","what":"Functions","title":"Changes in NAIR version 0.0.9038 (7/20/2023)","text":"calling plotNetworkGraph directly vector provided color_nodes_by color_title = \"auto\" (default), function attempt use name vector color legend title. similar change applies respect arguments size_nodes_by size_title. buildPublicClusterNetwork arguments node_stats, stats_to_include cluster_stats now deprecated nothing. node-level cluster-level network properties now automatically computed. arguments remain order maintain backwards compatibility user code, raise warning notifying user deprecated state non-null value provided. Functions clustering algorithms imported igraph package (cluster_fast_greedy) now exported package NAMESPACE file available users. functions can now used inputs cluster_fun argument various NAIR package functions without need use igraph:: prefix. Documentation file added re-exported functions","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"vignettes-and-documentation-0-0-9038","dir":"Changelog","previous_headings":"","what":"Vignettes and Documentation","title":"Changes in NAIR version 0.0.9038 (7/20/2023)","text":"Utility Functions vignette (formerly titled Downstream Analysis) removed. content absorbed buildRepSeqNetwork Network Visualization vignettes buildRepSeqNetwork Network Visualization Searching Public Clusters help file plotNetworkGraph now recommends users prefer higher-level function generateNetworkGraphPlots plotNetworkGraph, since former arguments behave identically buildRepSeqNetwork supports generation multiple plots. plotNetworkGraph called generateNetworkGraphPlots, users need call plotNetworkGraph directly. However, plotNetworkGraph remains exported function available user order maintain backwards compatibility user code.","code":""},{"path":"https://mlizhangx.github.io/Network-Analysis-for-Repertoire-Sequencing-/news/index.html","id":"changes-in-nair-version-009037-7102023","dir":"Changelog","previous_headings":"","what":"Changes in NAIR version 0.0.9037 (7/10/2023)","title":"Changes in NAIR version 0.0.9037 (7/10/2023)","text":"","code":"* Changes to `findAssociatedSeqs`:     * `groups` argument still exists but is now deprecated and no longer used. Group labels are now automatically determined from the unique values of `group_ids`     * `sample_ids` argument still exists but is now deprecated and no longer used. Custom sample IDs play no role in `findAssociatedSeqs`; the argument was inherited from a previous function that included the functionality of both `findAssociatedSeqs` and `findAssociatedClones` * `findPublicClusters` now ignores `plots = TRUE` when `print_plots = FALSE` and `output_dir_unfiltered = NULL`. This prevents unused plots from being generated * `buildAssociatedClusterNetwork` now uses group ID as the default variable for node colors * `buildPublicClusterNetwork` and `buildPublicClusterNetworkByRepresentative` now use sample ID as the default variable for node colors * `buildPublicClusterNetworkByRepresentative` default plot title and subtitle updated for better clarity * `buildRepSeqNetwork`, `generateNetworkObjects` and `generateNetworkGraphPlots` now use `count_col` as the default variable for node colors if available, followed in priority by cluster ID, then network degree. * New arguments to `addClusterLabels`:     * `cluster_id_col` added to permit use with node data where the cluster ID variable has a custom name (e.g., with the output of `buildPublicClusterNetwork`)     * `greatest_values` added, which can be set to `FALSE` to prioritize the clusters to label based on the least values of the `criterion` variable rather than the greatest values * A function `exclusiveNodeStats` has been added. This function behaves in the same manner as `chooseNodeStats`, but all arguments are set to `FALSE` by default. Useful when the user only wishes to specify a small number of node-level properties to compute, with all other properties excluded. * Major revisions to the following vignettes:     * `NAIR: Network Analysis of Immune Repertoire`     * `Searching for Public TCR/BCR Clusters`     * `Searching for Associated TCR/BCR Clusters`     * `buildRepSeqNetwork`     * `Network Visualization` (incomplete, in progress)     * Of particular note, the associated clusters and public clusters vignettes now simulate more reasonable toy data for demonstration purposes. * `Downstream Analysis` vignette title renamed to `Utility Functions`. A revision to this vignette is planned prior to version 1.0. * CXX_STD = CXX11 flag removed from src/Makevars and src/Makevars.win"}]
